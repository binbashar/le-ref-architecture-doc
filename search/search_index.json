{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2017 - 2020 binbash</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"welcome/","title":"Welcome","text":""},{"location":"welcome/#about-leverage","title":"About Leverage","text":"<p>What's Leverage?</p> <p>Our focus is on creating reusable, high quality    Cloud Infrastructure code, through our core components:</p> <ul> <li> Reference Architecture for AWS</li> <li> Infrastructure as Code (IaC) Library</li> <li> Leverage CLI</li> </ul> <p>Because all the code and modules are already built, we can get you up and running up to 10x faster   than a consulting company ( typically in just a few weeks!). On top of code that is thoroughly  documented, tested, and has been proven in production at dozens of other project deployments.</p> <p>Why Leverage?</p> <p>If you implement our Reference Architecture for AWS and the  Infrastructure as Code (IaC) Library via Leverage CLI , you will get your entire Cloud Native  Application Infra in few weeks.</p> <p>Implement Leverage yourself or we can deploy it for you! </p> <p> Read More: </p> <ul> <li>Why our stack?</li> <li>Why Leverage?</li> </ul> <p>Core Features</p> <ul> <li> <p> Reference Architecture: Designed under optimal configs for the most popular modern web and mobile applications needs. Its design is fully based on the AWS Well Architected Framework.</p> </li> <li> <p> Infrastructure as Code (IaC) Library:     A collection of reusable, tested, production-ready E2E AWS Cloud infrastructure as code solutions, leveraged by     modules written in: Terraform, Ansible, Helm charts, Dockerfiles and Makefiles.</p> </li> <li> <p> Leverage CLI: projects' command line tool. Provides the means to interact and deploy Leverage Reference Architecture on AWS and if needed it allows you to define custom tasks to run.</p> </li> </ul>"},{"location":"welcome/#welcome","title":"Welcome","text":"<p>This is the documentation for the Leverage Reference Architecture.</p> <p>It is built around the AWS Well Architected Framework , using a Terraform, Ansible and Helm.</p> <p>An its compose of the following 3 main repos:</p> <ul> <li> le-tf-infra-aws</li> <li> le-tf-vault</li> <li> le-ansible-infra</li> </ul>"},{"location":"welcome/#getting-started","title":"Getting Started","text":"<p> See First Steps for an introduction to our Reference Architecture for AWS workflow through the complete deployment of a basic AWS Landing Zone.</p> <p> See How it works for a whirlwind tour that will get you started.</p> <p> See User guide for a hands on help.</p>"},{"location":"es/bienvenido/","title":"Bienvenido","text":""},{"location":"es/bienvenido/#proximamente","title":"Pr\u00f3ximamente","text":""},{"location":"first-steps/aws-account-setup/","title":"Set Up your AWS Management account","text":""},{"location":"first-steps/aws-account-setup/#create-an-aws-account","title":"Create an AWS account","text":"<p>First and foremost you'll need to create an AWS account for your project's deployment. This will become the management account of your AWS Organization. During the creation of the AWS account, a user will be created for you, the root user. This user will take the email and password you provided as login credentials and it will be the main access point of your account (you can see this user represented in the architecture diagram).</p> <p>The account's name will be given by your project's name followed by <code>-management</code>, since Leverage uses a suffix naming system to differentiate between the multiple accounts of a project. For this guide we'll stick to calling the project <code>MyExample</code> and so, the account name will be <code>myexample-management</code>. </p> <p>Along the same line, we'll use the <code>example.com</code> domain for the email address used to register the account. Adding a <code>-aws</code> suffix to the project's name to indicate that this email address is related to the project's AWS account, we end up with a registration email that looks like <code>myexample-aws@example.com</code>.</p> <p>Email addresses for AWS accounts.<p>Each AWS account requires having a unique email address associated to it. The Leverage Reference Architecture for AWS makes use of multiple accounts to better manage the infrastructure, as such, you will need different addresses for each one. Creating a new email account for each AWS is not a really viable solution to this problem, a better approach is to take advantage of mail services that support aliases. For information regarding how this works:  Email setup for your AWS account.</p> </p> <p>Tip<p>To protect your project's management account, enabling Multi Factor Authentication is highly encouraged, also, reviewing the account's billing setup is always a good idea before proceeding.</p> </p>"},{"location":"first-steps/aws-account-setup/#create-an-admin-user-for-the-management-account","title":"Create an Admin user for the management account","text":"<p>To be able to interact with and manage the AWS environment you will need an IAM user with administrator privileges.</p> <p>To accomplish this, sign in to the IAM Console with your recently created account and create a user named <code>mgmt-org-admin</code> following step 2 of this leverage doc. Setting a password is not necessary, since you won't use this user to log into the web console. Give it admin privileges by attaching the <code>AdministratorAccess</code> policy to it, there's no need to add the user to any group.</p>"},{"location":"first-steps/aws-account-setup/#generate-programmatic-access-keys-for-the-admin-user","title":"Generate programmatic access keys for the Admin user","text":"<p>Lastly, generate programmatic access keys following step 3 of this leverage doc for the <code>mgmt-org-admin</code> user, and then either copy them or download the <code>.csv</code> file that AWS generates for you. In both cases, store the credentials in a secure location.</p> <p>For more detailed information on setting up your AWS account:  Organization account setup guide</p>"},{"location":"first-steps/aws-account-setup/#next-steps","title":"Next steps","text":"<p>You have successfully created and configured the AWS account for your Leverage project. From now on, almost all interactions with the AWS environment (with few notable exceptions) will be performed via Leverage.</p> <p>Next, you will setup all required dependencies to work on a Leverage project in your local machine.</p>"},{"location":"first-steps/introduction/","title":"Introduction","text":""},{"location":"first-steps/introduction/#introduction","title":"Introduction","text":"<p>The objective of this guide is to introduce the user to our binbash Leverage Reference Architecture for AWS workflow  through the complete deployment of a basic landing zone configuration.</p> <p>The Leverage landing zone is the smallest possible fully functional configuration.  It lays out the base infrastructure required to manage the environment: billing and financial management, user management, security enforcement, and shared services and resources. Always following the best practices layed out by the AWS Well-Architected Framework  to ensure quality and to provide a solid base to build upon. This is the starting point from which any Leverage user can and will develop all the features and capabilities they may require to satisfy their specific needs.</p> <p></p> Figure: Leverage Landing Zone architecture components diagram.  <p>On this guide you will learn how to:</p> <ul> <li> Create and configure your AWS account.</li> <li> Work with the Leverage CLI to manage your credentials, infrastructure and the whole Leverage stack.</li> <li> Prepare your local environment to manage a Leverage project.</li> <li> Orchestrate the project's infrastructure.</li> <li> Configure your users' credentials to interact with the project.</li> </ul> <p>Upon completion of this guide you will gain an understanding of the structure of a project as well as familiarity with the tooling used to manage it.</p> <p>To begin your journey into creating your first Leverage project, continue to the next section of the guide where you will start by setting up your AWS account.</p>"},{"location":"first-steps/leverage-project-setup/","title":"Set Up your Leverage project","text":"<p>Up until now we have been taking care of all the prerequisites for a Leverage project, but is time to actually create the Reference Architecture definition for your project. Let's get to it.</p>"},{"location":"first-steps/leverage-project-setup/#create-the-project-directory","title":"Create the project directory","text":"<p>Each Leverage project must be in its own working directory.</p> <p>Create the directory for your project.</p> <pre><code>mkdir myexample\ncd myexample\n</code></pre>"},{"location":"first-steps/leverage-project-setup/#initialize-the-leverage-project","title":"Initialize the Leverage project","text":"<p>When setting up a Leverage project the directory where it will reside needs to be initialized</p> <pre><code>leverage project init\n</code></pre> <pre><code>[09:30:54.027] INFO     No Leverage directory found in user's home. Creating.\n[09:30:54.030] INFO     No project template found. Cloning template.\n[09:30:54.978] INFO     Finished cloning template.\n[09:30:54.981] INFO     Initializing git repository in project directory.\n[09:30:54.990] INFO     No project configuration file found. Dropping configuration template project.yaml.\n[09:30:55.007] INFO     Project initialization finished.\n</code></pre> <p>More information on <code>project init</code></p> <p>Initializing a project creates the global configurations directory for Leverage CLI and downloads the templates used to generate the project's files structure. It then initializes a <code>git</code> repository in the working directory, and creates a file called <code>project.yaml</code>. Leverage projects are by design repositories to leverage some of the capabilities of <code>git</code> and because it is assumed that the code in the project will be versioned.</p>"},{"location":"first-steps/leverage-project-setup/#fill-in-the-configuration-file","title":"Fill in the configuration file","text":"<p>Once the project is initialized you need to fill in the correct information for the project in the configuration file.</p> <p>After filling in the data you will end up with a configuration file similar to the one below. Indicated by arrows are the fields that were modified.</p> <p>You can see in the global values, the project name and a short version of it, in the <code>organization</code> section, the emails for each account, and further down, in the <code>accounts</code> section, the different groups and users for each group in the <code>management</code> and <code>security</code> accounts.  </p> <code>project.yaml</code> for MyExample project <pre><code>project_name: myexample # &lt;--\nshort_name: me # &lt;--\n\nprimary_region: us-east-1\nsecondary_region: us-west-2\n\norganization:\naccounts:\n- name: management\nemail: myexample-aws@example.com # &lt;--\n- name: security\nemail: myexample-aws+security@example.com # &lt;--\n- name: shared\nemail: myexample-aws+shared@example.com # &lt;--\norganizational_units:\n- name: security\npolicy:\n- aws_organizations_policy.default\naccounts:\n- security\n- name: shared\npolicy:\n- aws_organizations_policy.standard\naccounts:\n- shared\n\naccounts:\nmanagement:\ngroups:\n- name: admins # &lt;--\nusers:\n- kit.walker\n- natasha.romanoff\npolicies:\n- '\"arn:aws:iam::aws:policy/AdministratorAccess\"'\nsecurity:\ngroups:\n- name: admins # &lt;--\nusers:\n- natasha.romanoff\n- name: auditors # &lt;--\nusers:\n- kit.walker\npolicies:\n- aws_iam_policy.assume_auditor_role.arn\n- name: devops # &lt;--\nusers:\n- natasha.romanoff\n- edward.stark\n- john.wick\npolicies:\n- aws_iam_policy.assume_devops_role.arn\nshared:\nnetworks:\n- cidr_block: \"172.18.0.0/20\"\navailability_zones: [a,b]\nprivate_subnets_cidr: \"172.18.0.0/21\"\nprivate_subnets:\n- \"172.18.0.0/23\"\n- \"172.18.2.0/23\"\npublic_subnets_cidr: \"172.18.8.0/21\"\npublic_subnets:\n- \"172.18.8.0/23\"\n- \"172.18.10.0/23\"\n</code></pre>"},{"location":"first-steps/leverage-project-setup/#set-up-the-bootstrap-credentials","title":"Set Up the bootstrap credentials","text":"<p>To be able to interact with your AWS environment you first need to configure the credentials to enable AWS CLI to do so. Provide the keys obtained in the previous account creation step to the command by any of the available means.</p> ManuallyFile selectionProvide file in command <p><pre><code>leverage credentials configure --type BOOTSTRAP\n</code></pre> <pre><code>[09:37:17.530] INFO     Loading configuration file.\n[09:37:18.477] INFO     Loading project environment configuration file.\n[09:37:20.426] INFO     Configuring bootstrap credentials.\n&gt; Select the means by which you'll provide the programmatic keys: Manually\n&gt; Key: AKIAU1OF18IXH2EXAMPLE\n&gt; Secret: ****************************************\n[09:37:51.638] INFO     Bootstrap credentials configured in: /home/user/.aws/me/credentials\n[09:37:53.497] INFO     Fetching management account id.\n[09:37:53.792] INFO     Updating project configuration file.\n[09:37:55.344] INFO     Skipping assumable roles configuration.\n</code></pre></p> <p><pre><code>leverage credentials configure --type BOOTSTRAP\n</code></pre> <pre><code>[09:37:17.530] INFO     Loading configuration file.\n[09:37:18.477] INFO     Loading project environment configuration file.\n[09:37:20.426] INFO     Configuring bootstrap credentials.\n&gt; Select the means by which you'll provide the programmatic keys: Path to an access keys file obtained from AWS\n&gt; Path to access keys file: ../bootstrap_accessKeys.csv\n[09:37:51.638] INFO     Bootstrap credentials configured in: /home/user/.aws/me/credentials\n[09:37:53.497] INFO     Fetching management account id.\n[09:37:53.792] INFO     Updating project configuration file.\n[09:37:55.344] INFO     Skipping assumable roles configuration.\n</code></pre></p> <p><pre><code>leverage credentials configure --type BOOTSTRAP --credentials-file ../bootstrap_accessKeys.csv\n</code></pre> <pre><code>[09:37:17.530] INFO     Loading configuration file.\n[09:37:18.477] INFO     Loading project environment configuration file.\n[09:37:20.426] INFO     Configuring bootstrap credentials.\n[09:37:51.638] INFO     Bootstrap credentials configured in: /home/user/.aws/me/credentials\n[09:37:53.497] INFO     Fetching management account id.\n[09:37:53.792] INFO     Updating project configuration file.\n[09:37:55.344] INFO     Skipping assumable roles configuration.\n</code></pre></p> <p>More information on <code>credentials configure</code></p> <p>During the credentials setup, the AWS account id is filled in for us in the project configuration file.</p> <pre><code>...\norganization:\naccounts:\n- name: management\nemail: myexample-aws@example.com\nid: '000123456789'\n...\n</code></pre>"},{"location":"first-steps/leverage-project-setup/#create-the-configured-project","title":"Create the configured project","text":"<p>Now you will finally create all the infrastructure definition in the project.</p> <pre><code>leverage project create\n</code></pre> <pre><code>[09:40:54.934] INFO     Loading configuration file.\n[09:40:54.950] INFO     Creating project directory structure.\n[09:40:54.957] INFO     Finished creating directory structure.\n[09:40:54.958] INFO     Setting up common base files.\n[09:40:54.964] INFO     Account: Setting up management.\n[09:40:54.965] INFO             Layer: Setting up config.\n[09:40:54.968] INFO             Layer: Setting up base-tf-backend.\n[09:40:54.969] INFO             Layer: Setting up base-identities.\n[09:40:54.984] INFO             Layer: Setting up organizations.\n[09:40:54.989] INFO             Layer: Setting up security-base.\n[09:40:54.990] INFO     Account: Setting up security.\n[09:40:54.991] INFO             Layer: Setting up config.\n[09:40:54.994] INFO             Layer: Setting up base-tf-backend.\n[09:40:54.995] INFO             Layer: Setting up base-identities.\n[09:40:55.001] INFO             Layer: Setting up security-base.\n[09:40:55.002] INFO     Account: Setting up shared.\n[09:40:55.003] INFO             Layer: Setting up config.\n[09:40:55.006] INFO             Layer: Setting up base-tf-backend.\n[09:40:55.007] INFO             Layer: Setting up base-identities.\n[09:40:55.008] INFO             Layer: Setting up security-base.\n[09:40:55.009] INFO             Layer: Setting up base-network.\n[09:40:55.013] INFO     Project configuration finished.\n               INFO     Reformatting terraform configuration to the standard style.\n[09:40:55.743] INFO     Finished setting up project.\n</code></pre> <p>More information on <code>project create</code></p> <p>In this step, the directory structure for the project and all definition files are created using the information from the <code>project.yaml</code> file and checked for correct formatting.</p> <p>You will end up with something that looks like this:</p> MyExample project file structure <p><pre><code>\ud83d\udcc2 myexample\n\u251c\u2500\u2500 \ud83d\udcc4 build.env\n\u251c\u2500\u2500 \ud83d\udcc4 project.yaml\n\u251c\u2500\u2500 \ud83d\udcc2 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars\n\u251c\u2500\u2500 \ud83d\udcc2 management\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 config\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n|   \u251c\u2500\u2500 \ud83d\udcc2 global\n|   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 organizations\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 accounts.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 delegated_administrator.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 organizational_units.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 organization.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 policies_scp.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 policy_scp_attachments.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 service_linked_roles.tf\n|   \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n|   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 base-identities\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 groups.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 keys\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 roles.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 users.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n|   \u2514\u2500\u2500 \ud83d\udcc2 us-east-1\n|    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n|    \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n|    \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n|    \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 main.tf\n|    \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n|    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 security-base\n|    \u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 account.tf\n|    \u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n|    \u00a0\u00a0     \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n\u251c\u2500\u2500 \ud83d\udcc2 security\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 config\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 global\n|   |   \u2514\u2500\u2500 \ud83d\udcc2 base-identities\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 groups_policies.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 groups.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 keys\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 role_policies.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 roles.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 users.tf\n|   \u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 us-east-1\n|    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n|    \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n|    \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n|    \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 main.tf\n|    \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n|    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 security-base\n|    \u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 account.tf\n|    \u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n|    \u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 iam_access_analyzer.tf\n|    \u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n\u2502    \u00a0\u00a0     \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n\u2514\u2500\u2500 \ud83d\udcc2 shared\n    \u251c\u2500\u2500 \ud83d\udcc2 config\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n    \u251c\u2500\u2500 \ud83d\udcc2 global\n    |   \u2514\u2500\u2500 \ud83d\udcc2 base-identities\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tf\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 policies.tf\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 roles.tf\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 service_linked_roles.tf\n    |    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n    \u2514\u2500\u2500 \ud83d\udcc2 us-east-1\n        \u251c\u2500\u2500 \ud83d\udcc2 base-network\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tf\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 network.tf\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 network_vpc_flow_logs.tf\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n        \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 main.tf\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n        \u2514\u2500\u2500 \ud83d\udcc2 security-base\n            \u251c\u2500\u2500 \ud83d\udcc4 account.tf\n            \u251c\u2500\u2500 \ud83d\udcc4 config.tf\n            \u2514\u2500\u2500 \ud83d\udcc4 variables.tf\n</code>\n<p>As you can see, it is a structure comprised of directories for each account containing all the definitions for each of the accounts respective layers.</p>\n<p>The layers themselves are also grouped based on the region in which they are deployed. The regions are configured through the <code>project.yaml</code> file. In the case of the Leverage landing zone, most layers are deployed in the primary region, so you can see the definition of these layers in a <code>us-east-1</code> directory, as per the example configuration.</p>\n<p>Some layers are not bound to a region because their definition is mainly comprised of resources for services that are global in nature, like IAM or Organizations. These kind of layers are kept in a <code>global</code> directory.</p>"},{"location":"first-steps/leverage-project-setup/#next-steps","title":"Next steps","text":"<p>You have now created the definition of all the infrastructure for your project and configured the credentials need to deploy such infrastructure in the AWS environment.</p>\n<p>Next, you will orchestrate de first and main account of the project, the management account.</p>"},{"location":"first-steps/local-setup/","title":"Set Up your local environment","text":"<p>A Leverage project is managed via our Leverage CLI, which in turn, makes use of a couple of applications that should be installed in your system beforehand, as is explained in the pre-requisites.</p> <ul> <li> Git</li> <li> Python 3 <code>version 3.8 and up</code></li> <li> Docker</li> </ul> <p>So first, make sure these are installed in your system and the Docker daemon is up and running.</p>"},{"location":"first-steps/local-setup/#install-leverage-cli","title":"Install Leverage CLI","text":"<p>As previously stated, to manage a Leverage project and operate the whole Leverage stack you will need to install Leverage CLI. binbash distributes Leverage CLI as a python package, so you can install it via <code>pip</code>.</p> <pre><code>pip install leverage\n</code></pre> <p>For more detailed information in installing Leverage CLI:  Install Leverage CLI</p>"},{"location":"first-steps/local-setup/#verify-your-leverage-cli-installation","title":"Verify your Leverage CLI installation","text":"<p>Verify that your Leverage CLI installation was successful by running <pre><code>leverage --help\n</code></pre> <pre><code>Usage: leverage [OPTIONS] COMMAND [ARGS]...\n\n  Leverage Reference Architecture projects command-line tool.\n\nOptions:\n  -f, --filename TEXT  Name of the build file containing the tasks\n                       definitions.  [default: build.py]\n  -l, --list-tasks     List available tasks to run.\n  -v, --verbose        Increase output verbosity.\n  --version            Show the version and exit.\n  -h, --help           Show this message and exit.\n\nCommands:\n  credentials  Manage AWS cli credentials.\n  project      Manage a Leverage project.\n  run          Perform specified task(s) and all of its dependencies.\n  terraform    Run Terraform commands in a custom containerized...\n  tf           Run Terraform commands in a custom containerized...\n</code></pre></p>"},{"location":"first-steps/local-setup/#enable-tab-completion","title":"Enable tab completion","text":"<p>If you use Bash, Zsh or Fish, you can enable shell completion for Leverage commands.</p> BashZshFish <p>Add to <code>~/.bashrc</code>: <pre><code>eval \"$(_LEVERAGE_COMPLETE=bash_source leverage)\"\n</code></pre></p> <p>Add to <code>~/.zshrc</code>: <pre><code>eval \"$(_LEVERAGE_COMPLETE=zsh_source leverage)\"\n</code></pre></p> <p>Add to <code>~/.config/fish/completions/leverage.fish</code>: <pre><code>eval (env _LEVERAGE_COMPLETE=fish_source leverage)\n</code></pre></p> <p>Now you need to restart your shell.</p>"},{"location":"first-steps/local-setup/#next-steps","title":"Next steps","text":"<p>Now you have your system completely configured to work on a Leverage project.</p> <p>Next, you will setup and create your Leverage project.</p>"},{"location":"first-steps/management-account/","title":"Orchestrate the Management account","text":"<p>Finally we reach the point in which you'll get to actually create the infrastructure in our AWS environment.</p> <p>Some accounts and layers rely on other accounts/layers being already deployed, creating dependencies between each other and establishing an order in which all layers should be deployed. We will go through these dependency chains in order.</p> <p>Basic Landing Zone AWS Expenses</p> <p>By default this AWS Reference Architecture configuration should not incur in any costs.</p> <p>The management account is used to configure and access all AWS Organizations managed accounts, also, billing and financial decisions are enforced though this account.</p>"},{"location":"first-steps/management-account/#deploy-the-management-accounts-layers","title":"Deploy the Management account's layers","text":"<p>To begin, place yourself in the <code>management</code> account directory.</p> <pre><code>cd management\n</code></pre>"},{"location":"first-steps/management-account/#terraform-backend-layer","title":"Terraform backend layer","text":"<p>Move into the <code>us-east-1/base-tf-backend</code> directory and run:</p> <pre><code>leverage terraform init --skip-validation\nleverage terraform apply\n</code></pre> <p>All <code>apply</code> commands will prompt for confirmation, answer <code>yes</code> when this happens.</p> <p>More information on <code>terraform init</code> and <code>terraform apply</code></p> <p>Now, the infrastructure for the Terraform state management is created. The next step is to push the local <code>.tfstate</code> to the bucket. To do this, uncomment the <code>backend</code> section for the <code>terraform</code> configuration in <code>management/base-tf-backend/config.tf</code></p> <pre><code>  backend \"s3\" {\nkey = \"management/tf-backend/terraform.tfstate\"\n}\n</code></pre> <p>And run once more:</p> <pre><code>leverage terraform init\n</code></pre> <p>When prompted, answer <code>yes</code>. Now you can safely remove the <code>terraform.tfstate</code> and <code>terraform.tfstate.backup</code> files created during the <code>apply</code> step.</p> <p>Terraform backend</p> <p>More information regarding what is the Terraform backend and Terraform state management:</p> <ul> <li>Terraform backend</li> <li>How to manage Terraform state</li> </ul>"},{"location":"first-steps/management-account/#identities-layer","title":"Identities layer","text":"<p>The definition for the identities layer is located within the <code>global</code> directory. Move into the <code>global/base-identities</code> directory and run:</p> <pre><code>leverage terraform init\n</code></pre> <p>To securely manage the users credentials, all members of the organization that are bound to interact with the AWS environment, and are therefore listed in the <code>project.yaml</code> configuration file, should create GPG keys of their own. Then, they should export them and share their public key files with whoever is in charge of the project infrastructure in order to be able to create their respective IAM users. In this guide's case, that person it is you.</p> <p> How to create and manage GPG keys</p> <p>Once you get hold of the keys files, copy them to the <code>keys</code> subdirectory, respecting the user's configured name. For the <code>management</code> account in this guide, we need the keys for <code>kit.walker</code> and <code>natasha.romanoff</code>.</p> <p>Finally, run:</p> <pre><code>leverage terraform apply\n</code></pre>"},{"location":"first-steps/management-account/#organizations-layer","title":"Organizations layer","text":"<p>Next, in the same fashion as in the previous layer, move into the <code>global/organizations</code> directory and run:</p> <pre><code>leverage terraform init\nleverage terraform apply\n</code></pre> <p>The AWS account that you created manually is the <code>management</code> account itself, so to prevent Terraform from trying to create it and error out, this account definition is commented by default in the code. Now you need to make the Terraform state aware of the link between the two. To do that, uncomment the <code>management</code> organizations account resource in <code>accounts.tf</code></p> <pre><code>resource \"aws_organizations_account\" \"management\" {\nname  = \"${var.project_long}-management\"\nemail = local.management_account.email\n}\n</code></pre> <p>Grab the management account id that previously was automatically filled in for us in the <code>project.yaml</code> file</p> <pre><code>...\norganization:\naccounts:\n- name: management\nemail: myexample-aws@example.com\nid: '000123456789'\n...\n</code></pre> <p>And run:</p> <pre><code>leverage terraform import aws_organizations_account.management 000123456789\n</code></pre> <p>More information on <code>terraform import</code></p>"},{"location":"first-steps/management-account/#security-layer","title":"Security layer","text":"<p>The last layer for the <code>management</code> account is the security layer and its definition is located in <code>us-east-1</code>. So, move into the <code>us-east-1/security-base</code> directory and run:</p> <pre><code>leverage terraform init\nleverage terraform apply\n</code></pre>"},{"location":"first-steps/management-account/#update-the-bootstrap-credentials","title":"Update the bootstrap credentials","text":"<p>Now that the <code>management</code> account has been deployed, and more specifically, all Organizations accounts have been created (in the organizations layer) you need to update the credentials for the bootstrap process before proceeding to deploy any of the remaining accounts.</p> <p>This will fetch the organizations structure from the AWS environment and create individual profiles associated with each account for the AWS CLI to use. So, run:</p> <pre><code>leverage credentials configure --type BOOTSTRAP --skip-access-keys-setup\n</code></pre> <pre><code>[09:08:44.762] INFO     Loading configuration file.\n[09:08:44.785] INFO     Loading project environment configuration file.\n[09:08:44.791] INFO     Loading Terraform common configuration.\n[09:08:53.247] INFO     Configuring assumable roles.\n[09:08:53.248] INFO     Fetching organization accounts.\n[09:08:55.193] INFO     Backing up account profiles file.\n[09:08:55.761] INFO             Configuring profile me-management-oaar\n[09:08:59.977] INFO             Configuring profile me-security-oaar\n[09:09:04.081] INFO             Configuring profile me-shared-oaar\n[09:09:08.305] INFO     Account profiles configured in: /home/user/.aws/me/config\n[09:09:08.307] INFO     Updating project's Terraform common configuration.\n</code></pre> <p>More information on <code>credentials configure</code></p>"},{"location":"first-steps/management-account/#next-steps","title":"Next steps","text":"<p>You have successfully orchestrated the <code>management</code> account for your project and configured the credentials for the following steps.</p> <p>Next, you will orchestrate the remaining accounts, <code>security</code> and <code>shared</code>.</p>"},{"location":"first-steps/post-deployment/","title":"Post-deployment steps","text":"<p>The whole landing zone is already deployed, and with it, all defined users were created. From now on, each user should generate their personal programmatic keys and enable Multi Factor Authentication for their interactions with the AWS environment. Let's take a look at the steps required to accomplish this.</p>"},{"location":"first-steps/post-deployment/#get-the-temporary-password-to-access-aws-console","title":"Get the temporary password to access AWS console","text":"<p>We'll take the place of <code>natasha.romanoff</code> to exemplify the process.</p> <p>When Natasha's user was created, an initial random password was also created alongside it. That password was encrypted using her GPG key, as it was shown in the management account's and in the security account's identities layers.</p> <p>As Natasha, you need to access that password so that you can create your programmatic keys to interact with the environment through Leverage.</p> <p>First, for the <code>management</code> account, check that the value <code>sensitive</code> is set to <code>true</code> in the output block <code>user_natasha_romanoff_login_profile_encrypted_password</code> of <code>management/global/base-identities/outputs.tf</code>:</p> <pre><code>output \"user_natasha_romanoff_login_profile_encrypted_password\" {\ndescription = \"The encrypted password, base64 encoded\"\nvalue       = module.user[\"natasha.romanoff\"].iam_user_login_profile_encrypted_password\nsensitive   = true\n}\n</code></pre> <p>Then, in the <code>global/base-identities</code> directory, run the output command with the <code>-json</code> flag:</p> <p><pre><code>leverage terraform output -json\n</code></pre> <pre><code>...\n\"user_natasha_romanoff_name\": {\n  \"sensitive\": false,\n  \"type\": \"string\",\n  \"value\": \"natasha.romanoff\"\n},\n\"user_natasha_romanoff_login_profile_encrypted_password\": {\n  \"sensitive\": true,\n  \"type\": \"string\",\n  \"value\": \"wcDMAyRZJTaxw5v1AQwAy6c...............2mBIbNFxF1Tp/ilvyk8eEHvAA=\"\n}\n...\n</code></pre></p> <p>Extract the value of the password field form the output and decrypt it.</p> <p>Now, log in the AWS Console using the <code>management</code> account id: <code>000123456789</code>, which can be extracted from the <code>project.yaml</code> or <code>config/common.tfvars</code> files, your IAM user name: <code>natasha.romanoff</code>, and your recently decrypted password. This password should be changed during this procedure.</p> <p>Proceed to enable a virtual MFA device for your user, and generate programmatic keys for it. Make sure to keep these keys in a safe location.</p> <p>As Natasha also has an IAM user for the <code>security</code> account besides the one in <code>management</code>, these steps should be repeated for that account, making sure of logging in the AWS console with the proper account id. Keep in mind that these are two different IAM users in two different accounts, so their credentials are not interchangeable.</p>"},{"location":"first-steps/post-deployment/#configure-the-new-credentials","title":"Configure the new credentials","text":"<p>To be able to use the generated programmatic keys, you need to configure them in your local environment. To do that, run:</p> <pre><code>leverage credentials configure --type MANAGEMENT # or `SECURITY` depending on the credentials to be configured\n</code></pre> <pre><code>[12:28:12.111] INFO     Loading configuration file.\n[12:28:12.132] INFO     Loading project environment configuration file.\n[12:28:12.139] INFO     Loading Terraform common configuration.\n[12:28:13.237] INFO     Configuring management credentials.\n&gt; Select the means by which you'll provide the programmatic keys: Manually\n&gt; Key: AKIAUH0FAB7QVEXAMPLE\n&gt; Secret: ****************************************\n[12:28:30.739] INFO     Management credentials configured in: /home/user/.aws/me/credentials\n[12:28:34.991] INFO     Configuring assumable roles.\n[12:28:39.299] INFO     Backing up account profiles file.\n[12:28:39.941] INFO             Configuring profile me-management-oaar\n[12:28:45.205] INFO             Configuring profile me-security-oaar\n[12:28:50.526] INFO             Configuring profile me-shared-oaar\n[12:28:55.953] INFO     Account profiles configured in: /home/user/.aws/me/config\n[12:28:55.956] INFO     Updating project's Terraform common configuration.\n</code></pre> <p>Note</p> <p>Both of these credentials (management and security) require an MFA device to be enabled. Once either credential is configured, the next step (Enable MFA) becomes mandatory. If MFA is not enabled, any action on the project will be executed using the bootstrap credentials.</p> <p>Note</p> <p>If a layer was already set with BOOTSTRAP credentials, when changing the credential type Terraform has to be reconfigured: <code>leverage tf init -reconfigure</code>.</p>"},{"location":"first-steps/post-deployment/#enable-mfa","title":"Enable MFA","text":"<p>The last step is to enable Multi Factor Authentication locally. The procedure is slightly different for a <code>management</code> IAM user and <code>security</code> IAM user, so we'll walk through both of them.</p>"},{"location":"first-steps/post-deployment/#management-user","title":"Management user","text":"<p>To enable MFA for a <code>management</code> account user, you need to enable this feature individually for the role <code>OrganizationAccountAccessRole</code> in all accounts of the infrastructure. So first, we'll take care of the <code>management</code> account:</p> <p>Move into the account's identities layer:</p> <pre><code>cd management/global/base-identities\n</code></pre> <p>Change the value <code>role_requires_mfa</code> for the role <code>iam_assumable_role_oaar</code> in <code>roles.tf</code> to <code>true</code>. By default this value is <code>false</code>, that is to say, MFA is disabled for the role.</p> <pre><code>module \"iam_assumable_role_oaar\" {\n...\n  #\n  # MFA setup\n  #\nrole_requires_mfa    = false -&gt; true\n...\n}\n</code></pre> <p>And run:</p> <pre><code>leverage terraform apply\n</code></pre> <p>You now should repeat these steps for the remaining accounts, in this guide's case, the <code>security</code> and <code>shared</code> accounts.</p> <p>Once the change is applied in all layers, change the value of <code>profile</code> in <code>management/config/backend.tfvars</code></p> <pre><code>#\n# Backend Configuration\n#\n\n# AWS Profile (required by the backend but also used for other resources)\nprofile = \"me-bootstrap\"\n...\n</code></pre> <p>To <code>&lt;short project name&gt;-management-oaar</code>, which in the case of this guide, would result in:</p> <ul> <li><code>me-bootstrap</code> \u2192 <code>me-management-oaar</code></li> </ul> <p>By doing this, you are effectively switching from using the bootstrap credentials to the management credentials profile for this specific account.</p> <p>Lastly, set <code>MFA_ENABLED</code> in the file <code>build.env</code>, located in the project's root directory, to <code>true</code>.</p>"},{"location":"first-steps/post-deployment/#security-user","title":"Security user","text":"<p>To enable MFA for a <code>security</code> account user, the procedure is simpler but it has to be performed in all accounts but <code>management</code>. In the case of this guide, you need to make changes in the <code>security</code> account as well as in the <code>shared</code> account.</p> <p>Set <code>profile</code> in <code>config/backend.tfvars</code> for each account to <code>&lt;short project name&gt;-&lt;account&gt;-devops</code>. That is:</p> <ul> <li><code>me-security-oaar</code> \u2192 <code>me-security-devops</code> for the <code>security</code> account</li> <li><code>me-shared-oaar</code> \u2192 <code>me-shared-devops</code> for the <code>shared</code> account</li> </ul> <p>Similarly to the management user's MFA enabling step, you are switching from using bootstrap credentials to the respective profile for each account of the security credentials.</p> <p>As a last step you need to make sure that <code>MFA_ENABLED</code> is set to <code>true</code> in the <code>build.env</code> file.</p>"},{"location":"first-steps/post-deployment/#re-configure-profiles-mfa","title":"Re-Configure profiles  MFA","text":"<p>For everything to work as expected, you need to set the aws configuration profiles to the corresponding mfa-device configuration.</p> <p>Then run <code>leverage credentials configure</code> again with the <code>--fetch-mfa-device</code> flag and select the <code>skip credentials configuration</code> option.</p> <p>As an alternative, the flag --skip-access-keys-setup could be used to avoid the interactive step.</p> <pre><code>leverage credentials configure --fetch-mfa-device --type MANAGEMENT\nleverage credentials configure --fetch-mfa-device --type SECURITY\n</code></pre> <pre><code>\n[10:10:11.033] INFO     Loading configuration file.\n[10:10:11.092] INFO     Loading project environment configuration file.\n[10:10:11.093] INFO     Loading Terraform common configuration.\n&gt;  Credentials already configured for ld-management: Skip credentials configuration. Continue on with assumable roles setup.\n[10:10:30.345] INFO     Attempting to fetch organization accounts.\n[10:10:33.928] INFO     Configuring assumable roles.\n[10:10:33.932] INFO     Fetching MFA device serial.\n[10:10:37.473] INFO     Backing up account profiles file.\n[10:10:38.913] INFO             Configuring profile me-management-oaar\n[10:10:53.088] INFO             Configuring profile me-security-oaar\n[10:11:08.229] INFO             Configuring profile me-shared-oaar\n[10:11:23.185] INFO     Account profiles configured in: /home/user/.aws/me/config\n</code></pre> <p>Note</p> <p>If a layer was already set with BOOTSTRAP credentials, when changing the credential type Terraform has to be reconfigured: <code>leverage tf init -reconfigure</code>.</p>"},{"location":"first-steps/post-deployment/#next-steps","title":"Next steps","text":"<p>Now you not only have a fully functional landing zone configuration deployed, but also the users to interact with it are correctly configured in both the AWS and local environment.</p> <p>This concludes this first steps guide for the Leverage Reference Architecture for AWS. For more detailed information, visit the links below.</p> <ul> <li> How it works</li> <li> User guides</li> </ul>"},{"location":"first-steps/security-and-shared-accounts/","title":"Orchestrate the Security and Shared accounts","text":""},{"location":"first-steps/security-and-shared-accounts/#deploy-the-security-accounts-layers","title":"Deploy the Security account's layers","text":"<p>The next account to orchestrate is the security account.</p> <p>This account is intended for centralized user management via a IAM roles based cross organization authentication approach. This means that most of the users for your organization will be defined in this account and those users will access the different accounts through this one.</p> <p>First, place yourself in the <code>security</code> directory.</p> <pre><code>cd security\n</code></pre>"},{"location":"first-steps/security-and-shared-accounts/#terraform-backend-layer","title":"Terraform backend layer","text":"<p>Move into the <code>us-east-1/base-tf-backend</code> directory and run:</p> <pre><code>leverage terraform init --skip-validation\nleverage terraform apply\n</code></pre> <p>More information on <code>terraform init</code> and <code>terraform apply</code></p> <p>Now, to push the local <code>.tfstate</code> to the bucket, uncomment the <code>backend</code> section for the <code>terraform</code> configuration in <code>security/base-tf-backend/config.tf</code></p> <pre><code>  backend \"s3\" {\nkey = \"security/tf-backend/terraform.tfstate\"\n}\n</code></pre> <p>And run again:</p> <pre><code>leverage terraform init\n</code></pre> <p>When prompted, answer <code>yes</code>.</p> <p>Now you can safely remove the <code>terraform.tfstate</code> and <code>terraform.tfstate.backup</code> files created during the <code>apply</code> step.</p>"},{"location":"first-steps/security-and-shared-accounts/#identities-layer","title":"Identities layer","text":"<p>Now, move into the <code>global/base-identities</code> directory, and run:</p> <pre><code>leverage terraform init\n</code></pre> <p>Copy the files fo this accounts' users into the <code>keys</code> subdirectoy. For this guide's case we need the keys files for <code>natasha.romanoff</code>, <code>kit.walker</code>, <code>edward.stark</code> and <code>john.wick</code>.</p> <p>To prevent Terraform from erroring out you need to import the role <code>OrganizationAccountAccessRole</code> that was already created in the <code>management</code>'s account identities layer before deploying this layer.</p> <pre><code>leverage terraform import module.iam_assumable_role_oaar.aws_iam_role.this[0] OrganizationAccountAccessRole\nleverage terraform apply\n</code></pre> <p>zsh globbing</p> <p>Zsh users may need to prepend <code>noglob</code> to the import command for it to be recognized correctly, as an alternative, square brackets can be escaped as <code>\\[\\]</code></p>"},{"location":"first-steps/security-and-shared-accounts/#security-layer","title":"Security layer","text":"<p>The last layer for the <code>security</code> account is the security layer. Move into the <code>us-east-1/security-base</code> directory and run:</p> <pre><code>leverage terraform init\nleverage terraform apply\n</code></pre>"},{"location":"first-steps/security-and-shared-accounts/#deploy-the-shared-accounts-layers","title":"Deploy the Shared account's layers","text":"<p>The last account in this deployment is the <code>shared</code> account.</p> <p>The account's objective is managing infrastructure for shared services and resources like directory services, DNS, VPN, monitoring tools or centralized logging solutions.</p> <p>Place yourself in the <code>shared</code> directory.</p> <pre><code>cd shared\n</code></pre>"},{"location":"first-steps/security-and-shared-accounts/#terraform-backend-layer_1","title":"Terraform backend layer","text":"<p>Move into the <code>us-east-1/base-tf-backend</code> directory and run:</p> <pre><code>leverage terraform init --skip-validation\nleverage terraform apply\n</code></pre> <p>More information on <code>terraform init</code> and <code>terraform apply</code></p> <p>Now, to push the local <code>.tfstate</code> to the bucket, uncomment the <code>backend</code> section for the <code>terraform</code> configuration in <code>shared/base-tf-backend/config.tf</code></p> <pre><code>  backend \"s3\" {\nkey = \"shared/tf-backend/terraform.tfstate\"\n}\n</code></pre> <p>And run a second time:</p> <pre><code>leverage terraform init\n</code></pre> <p>When prompted, answer <code>yes</code>.</p> <p>Now you can safely remove the <code>terraform.tfstate</code> and <code>terraform.tfstate.backup</code> files created during the <code>apply</code> step.</p>"},{"location":"first-steps/security-and-shared-accounts/#identities-layer_1","title":"Identities layer","text":"<p>Now move into the <code>global/base-identities</code> directory and run:</p> <pre><code>leverage terraform init\n</code></pre> <p>You also need to import the role <code>OrganizationAccountAccessRole</code> in this layer.</p> <pre><code>leverage terraform import module.iam_assumable_role_oaar.aws_iam_role.this[0] OrganizationAccountAccessRole\nleverage terraform apply\n</code></pre> <p>zsh globbing</p> <p>Zsh users may need to prepend <code>noglob</code> to the import command for it to be recognized correctly, as an alternative, square brackets can be escaped as <code>\\[\\]</code></p>"},{"location":"first-steps/security-and-shared-accounts/#security-layer_1","title":"Security layer","text":"<p>Next, move into the <code>us-east-1/security-base</code> directory:</p> <pre><code>leverage terraform init\nleverage terraform apply\n</code></pre>"},{"location":"first-steps/security-and-shared-accounts/#network-layer","title":"Network layer","text":"<p>The last layer for the <code>shared</code> account is the network layer, so move into the <code>us-east-1/base-network</code> directory and run:</p> <pre><code>leverage terraform init\nleverage terraform apply\n</code></pre>"},{"location":"first-steps/security-and-shared-accounts/#next-steps","title":"Next steps","text":"<p>You have now a fully deployed landing zone configuration for the Leverage Reference Architecture for AWS, with its three accounts <code>management</code>, <code>security</code> and <code>shared</code> ready to be used.</p> <p>Next, you are going to tackle de last steps configuring the credentials for a user to interact with your Leverage project securely.</p>"},{"location":"how-it-works/read-more/","title":"Read more","text":"<p>Please consider some official AWS docs, blog post and whitepapers we've considered for the current  Reference Solutions Architecture design:</p> <p>AWS Reference Articles</p> <ul> <li> CloudTrail for AWS Organizations: https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html</li> <li> Reserved Instances - Multi Account: https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ec2-on-demand-capacity-reservations-shared-across-multiple-aws-accounts/</li> <li> AWS Multiple Account Security Strategy: https://d0.awsstatic.com/aws-answers/AWS_Multi_Account_Security_Strategy.pdf</li> <li> AWS Multiple Account Billing Strategy: https://aws.amazon.com/answers/account-management/aws-multi-account-billing-strategy/</li> <li> AWS Secure Account Setup: https://aws.amazon.com/answers/security/aws-secure-account-setup/</li> <li> Authentication and Access Control for AWS Organizations: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html</li> <li> AWS Regions: https://www.concurrencylabs.com/blog/choose-your-aws-region-wisely/</li> <li> VPC Peering: https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html</li> <li> Route53 DNS VPC Associations: https://aws.amazon.com/premiumsupport/knowledge-center/private-hosted-zone-different-account/</li> <li> AWS Well Architected Framework: https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/</li> <li> AWS Tagging strategies: https://aws.amazon.com/answers/account-management/aws-tagging-strategies/ </li> <li> Inviting an AWS Account to Join Your Organization: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html</li> </ul>"},{"location":"how-it-works/features/","title":"Overview","text":""},{"location":"how-it-works/features/#aws-reference-architecture-features","title":"AWS Reference Architecture features","text":"Governance | AWS Organizations <ul> <li> AWS Organizations</li> <li> Accounts</li> <li> Consolidated Billing</li> </ul> Identity Management <ul> <li> Identities</li> <li> IAM Roles</li> </ul> Single Sign-On (SSO) <ul> <li> AWS SSO + Jumpcloud IdP</li> </ul> Cost Monitoring &amp; Optimization <ul> <li> Costs</li> </ul> Security <ul> <li> Security Services</li> <li> IAM Access Analyzer</li> <li> VPN | Pritunl</li> <li> Certificates</li> </ul> Networking | VPC, TGW, NFW, DNS and NACLs <ul> <li> Network</li> <li> VPC Addressing</li> <li> VPC Peering</li> <li> Transit Gateway (TGW)</li> <li> Network Firewall &amp; NACLs</li> <li> DNS</li> </ul> Secrets Management <ul> <li> Secrets</li> </ul> Compute <ul> <li> Compute</li> <li> K8s EKS Overview</li> <li> K8s EKS VPC Addressing</li> <li> K8s Kops</li> <li> K8s Service Mesh</li> <li> Serverless</li> </ul> Databases <ul> <li> Databases</li> <li> RDS MySql</li> <li> RDS Postgres</li> </ul> Storage <ul> <li> Storage</li> </ul> Content Delivery Network (CDN) <ul> <li> AWS CloudFront</li> </ul> CI/CD (Continuous Integration / Continuous Delivery) <ul> <li> CI/CD</li> <li> K8s ArgoCD</li> </ul> Monitoring | Metrics, Logs, APM and Tracing <ul> <li> Monitoring</li> <li> Metrics</li> <li> Logs</li> <li> Tracing</li> <li> APM</li> <li> Notifications</li> </ul> Reliability <ul> <li> Bakcups</li> <li> High-Availability</li> <li> Health-Checks</li> <li> Disaster Recovery</li> </ul>"},{"location":"how-it-works/features/cdn/cdn/","title":"CDN","text":"<p> AWS Cloud Front</p> <p>Amazon CloudFront is a fast content delivery network (CDN) service that securely delivers data, videos,  applications, and APIs to customers globally with low latency, high transfer speeds, all within a developer-friendly environment. CloudFront is integrated with AWS \u2013 both physical locations that are directly connected to the AWS global infrastructure, as well as other AWS services. CloudFront works seamlessly with services including AWS Shield for DDoS mitigation,  Amazon S3, Elastic Load Balancing, API Gateway or Amazon EC2 as origins for your applications, and Lambda@Edge to run custom code closer to customers\u2019 users and to customize the user experience. Lastly, if you use AWS origins such as Amazon S3, Amazon EC2 or Elastic Load Balancing, you don\u2019t pay  for any data transferred between these services and CloudFront.</p>"},{"location":"how-it-works/features/cdn/cdn/#load-balancer-alb-nlb-s3-cloudfront-origins","title":"Load Balancer (ALB | NLB) &amp; S3 Cloudfront Origins","text":"Figure: AWS CloudFront with ELB and S3 as origin diagram. (Source: Lee Atkinson,   \"How to Help Achieve Mobile App Transport Security (ATS) Compliance by Using Amazon CloudFront and AWS Certificate Manager\", AWS Security Blog, accessed November 17th 2020)."},{"location":"how-it-works/features/cdn/cdn/#api-gateway-cloudfront-origins","title":"API Gateway Cloudfront Origins","text":"Figure: AWS CloudFront with API Gateway as origin diagram. (Source: AWS,   \"AWS Solutions Library, AWS Solutions Implementations Serverless Image Handler\", AWS Solutions Library Solutions Implementations, accessed November 17th 2020)."},{"location":"how-it-works/features/ci-cd/ci-cd/","title":"Continuous Integration / Continuous Delivery (CI/CD)","text":""},{"location":"how-it-works/features/ci-cd/ci-cd/#opt-1-jenkins-argocd","title":"Opt-1: Jenkins + ArgoCD","text":"Figure: ACI/CD with Jenkins + ArgoCD architecture diagram. (Source: ArgoCD,   \"Overview - What Is Argo CD\", ArgoCD documentation, accessed November 18th 2020)."},{"location":"how-it-works/features/ci-cd/ci-cd/#opt-2-jenkins-spinnaker","title":"Opt-2: Jenkins + Spinnaker","text":"Figure: CI/CD with Jenkins + Spinnaker diagram. (Source: Irshad Buchh,   \"Continuous Delivery using Spinnaker on Amazon EKS\", AWS Open Source Blog, accessed November 18th 2020)."},{"location":"how-it-works/features/ci-cd/k8s-argocd/","title":"ArgoCD","text":""},{"location":"how-it-works/features/ci-cd/k8s-argocd/#argocd","title":"ArgoCD","text":""},{"location":"how-it-works/features/ci-cd/k8s-argocd/#aws-apps-services-k8s-eks-accounts-diagram","title":"AWS Apps &amp; Services K8s EKS accounts diagram","text":"<p>The below diagram is based on our  binbash Leverage Reference Architecture CI-CD official documentation</p> <p></p> Figure: K8S reference architecture CI/CD with ArgoCD diagram. (Source: binbash Leverage Confluence Doc,   \"Implementation Diagrams\", binbash Leverage Doc, accessed August 4th 2021)."},{"location":"how-it-works/features/compute/k8s-kops/","title":"Kubernetes Kops","text":"<p>Kops is an official Kubernetes project for managing production-grade  Kubernetes clusters. Kops is currently the best tool to deploy Kubernetes clusters to Amazon Web Services.  The project describes itself as kubectl for clusters.</p> <p>Core Features</p> <ul> <li> Open-source &amp; supports AWS and GCE</li> <li> Deploy clusters to existing virtual private clouds (VPC) or create a new VPC from scratch</li> <li> Supports public &amp; private topologies</li> <li> Provisions single or multiple master clusters</li> <li> Configurable bastion machines for SSH access to individual cluster nodes</li> <li> Built on a state-sync model for dry-runs and automatic idempotency</li> <li> Direct infrastructure manipulation, or works with CloudFormation and Terraform</li> <li> Rolling cluster updates</li> <li> Supports heterogeneous clusters by creating multiple instance groups</li> </ul> <p></p> Figure: AWS K8s Kops architecture diagram (just as reference). (Source: Carlos Rodriguez,   \"How to deploy a Kubernetes cluster on AWS with Terraform &amp; kops\", Nclouds.com Blog post, accessed November 18th 2020)."},{"location":"how-it-works/features/compute/k8s-service-mesh/","title":"Service Mesh","text":""},{"location":"how-it-works/features/compute/k8s-service-mesh/#overview","title":"Overview","text":"<p>Ultra light, ultra simple, ultra powerful. Linkerd adds security, observability, and  reliability to Kubernetes, without the complexity. CNCF-hosted and 100% open source.</p>"},{"location":"how-it-works/features/compute/k8s-service-mesh/#how-it-works","title":"How it works","text":"<p>How Linkerd works</p> <p>Linkerd works by installing a set of ultralight, transparent proxies next to each service instance. These proxies automatically handle all traffic to and from the service. Because they\u2019re transparent, these proxies act as highly instrumented out-of-process network stacks, sending telemetry to, and receiving control signals from, the control plane. This design allows Linkerd to measure and manipulate traffic to and from your service without introducing excessive latency.</p>"},{"location":"how-it-works/features/compute/k8s-service-mesh/#architecture","title":"Architecture","text":"Figure: Figure: Linkerd v2.10 architecture diagram. (Source: Linkerd official documentation,   \"High level Linkerd control plane and a data plane.\", Linkerd Doc, accessed June 14th 2021)."},{"location":"how-it-works/features/compute/k8s-service-mesh/#dashboard","title":"Dashboard","text":"Figure: Figure: Linkerd v2.10 dashboard. (Source: Linkerd official documentation,   \"Linkerd dashboard\", Linkerd Doc, accessed June 14th 2021)."},{"location":"how-it-works/features/compute/k8s-service-mesh/#read-more","title":"Read more","text":"<p>Related resources</p> <ul> <li> Linkerd vs Istio benchmarks</li> </ul>"},{"location":"how-it-works/features/compute/overview/","title":"Compute","text":""},{"location":"how-it-works/features/compute/overview/#containers-and-serverless","title":"Containers and Serverless","text":"<p>Overview</p> <p>In order to serve Client application workloads we propose to implement Kubernetes, and proceed to containerize all application stacks whenever it\u2019s the best solution (we\u2019ll also consider AWS Lambda for a Serverless approach when it fits better). Kubernetes is an open source container orchestration platform that eases the process of running containers across many different machines, scaling up or down by adding or removing containers when demand changes and provides high availability features. Also, it serves as an abstraction layer that will give Client the possibility, with minimal effort, to move the apps to other Kubernetes clusters running elsewhere, or a managed Kubernetes service such as AWS EKS, GCP GKE or others.</p> <p>Clusters will be provisioned with Kops and/or AWS EKS, which are solutions meant to orchestrate this  compute engine in AWS. Whenever possible the initial version deployed will be the latest stable release.</p> <p></p> Figure: Kubernetes high level components architecture. (Source: Andrew Martin,   \"11 Ways (Not) to Get Hacked\", Kubernetes.io Blog post, accessed November 18th 2020)."},{"location":"how-it-works/features/compute/overview/#kubernetes-addons","title":"Kubernetes addons","text":"<p>Some possible K8s addons could be</p> <p>Security</p> <ul> <li> IAM Authenticator</li> </ul> <p>Networking</p> <ul> <li> Kubernetes Nginx Ingress Controller</li> <li> Linked2 (Service Mesh)</li> </ul> <p>Monitoring &amp; Logs </p> <ul> <li> fluentd daemonset for elasticsearch logs</li> <li> kube-state-metrics</li> <li> prometheus node-exporter</li> </ul> <p>Distributed Tracing</p> <ul> <li> jaeger</li> <li> opencensus</li> </ul> <p>UI Dashboard </p> <ul> <li> kube-ops-view</li> <li> kubernetes-dashboard</li> <li> weave-scope</li> </ul> <p>Availability &amp; Reliability</p> <ul> <li> autoscaler</li> <li> Velero (Backups)</li> </ul> <p>Utilities </p> <ul> <li> onetimesecret </li> </ul>"},{"location":"how-it-works/features/compute/serverless/","title":"Serverless Compute","text":"<p>As stated by AWS Serverless definitions</p> <p>What is serverless?</p> <p>Serverless is the native architecture of the cloud that enables you to shift more of your operational responsibilities to AWS, increasing your agility and innovation. Serverless allows you to build and run applications and services without thinking about servers. It eliminates infrastructure management tasks such as server or cluster provisioning, patching, operating system maintenance, and capacity provisioning. You can build them for nearly any type of application or backend service, and everything required to run and scale your application with high availability is handled for you.</p> <p>Why use serverless?</p> <p>Serverless enables you to build modern applications with increased agility and lower total cost of ownership.  Building serverless applications means that your developers can focus on their core product instead of worrying about managing and operating servers or runtimes, either in the cloud or on-premises. This reduced overhead lets developers reclaim time and energy that can be spent on developing great products which scale and that are reliable.</p> <p></p> Figure: AWS serverless architecture diagram (just as reference). (Source: Nathan Peck,   \"Designing a modern serverless application with AWS Lambda and AWS Fargate\", Containers-on-AWS Medium Blog post, accessed November 18th 2020).  <p>Serverless Compute  Services</p> <ul> <li> AWS Lambda lets you run code without provisioning or managing servers.  You pay only for the compute time you consume - there is no charge when your code is not running. </li> <li> Lambda@Edge allows you to run Lambda functions at AWS Edge locations in response to Amazon CloudFront events.</li> <li> AWS Fargate is a purpose-built serverless compute engine for containers.  Fargate scales and manages the infrastructure required to run your containers.</li> </ul>"},{"location":"how-it-works/features/compute/tools/","title":"Infrastructure Instances Tools","text":""},{"location":"how-it-works/features/compute/tools/#overview","title":"Overview","text":"<p>Apart from the EC2 instances that are part of Kubernetes, there are going to be other instances running tools for  monitoring, logging centralization, builds/tests, deployment, among others. that are to be defined at this point.  Some of them can be replaced by managed services, like: CircleCI, Snyk, etc, and this can have cons and pros that will need to be considered at the time of implementation. Any OS that is provisioned will be completely reproducible as code, in the event of migration to another vendor.</p> <p>Other settings for all EC2 instances</p> <ul> <li> Ubuntu 18.04 based (Latest AMI)</li> <li> EBS volumes encrypted: Yes</li> <li> EBS volume type: gp2 (SSD)</li> <li> Termination protection: Yes</li> </ul> <p>Infrastructure EC2 instances</p> <ul> <li> VPN Server<ul> <li>Pritunl (https://vpn.domain.com) </li> </ul> </li> <li> Monitoring &amp; Alerting<ul> <li>Prometheus (https://prometheus.domain.com)  </li> <li>Grafana (https://grafana.domain.com) </li> </ul> </li> <li> Centralized Logs<ul> <li>Elasticsearch + Kibana (https://kibana.domain.com)  </li> </ul> </li> <li> CI/CD<ul> <li>Jenkins (https://jenkins.domain.com) </li> <li>Spinnaker (https://spinnaker.domain.com)</li> <li>Droneci (https://droneci.domain.com)</li> <li>Webhook (https://webhook.domain.com)  </li> </ul> </li> <li> Secret Mgmt<ul> <li>Hashicorp Vault (https://vault.domain.com) </li> </ul> </li> </ul>"},{"location":"how-it-works/features/compute/k8s-eks/overview/","title":"Kubernetes AWS EKS","text":"<p>Amazon Elastic Kubernetes Services (EKS) is a managed service that makes it easy for you  to run Kubernetes on AWS without needing to install and operate your own Kubernetes control plane or worker nodes. </p> <p>Core Features</p> <ul> <li> Highly Secure: EKS automatically applies the latest security patches to your cluster control plane. </li> <li> Multiple Availability Zones: EKS auto-detects and replaces unhealthy control plane nodes and provides on-demand,  zero downtime upgrades and patching.</li> <li> Serverless Compute: EKS supports AWS Fargate to remove the need to provision and manage servers, improving  security through application isolation by design. </li> <li> Built with the Community: AWS actively works with the Kubernetes community, including making contributions to the  Kubernetes code base helping you take advantage of AWS services.</li> </ul> <p></p> Figure: AWS K8s EKS architecture diagram (just as reference). (Source: Jay McConnell,   \"A tale from the trenches: The CloudBees Core on AWS Quick Start\", AWS Infrastructure &amp; Automation Blog post, accessed November 18th 2020)."},{"location":"how-it-works/features/compute/k8s-eks/overview/#version-support-convention","title":"Version support convention","text":"<p>At Leverage we support the last 3 latest stable  Kubernetes version releases (at best effort) within our Reference Architecture EKS layer  and IaC Library EKS module</p> <p>We think this is a good balance between management overhead and an acceptable level of  supported versions (at best effort). If your project have and older legacy version we could work along your CloudOps team to safely migrate it to a Leverage supported EKS version.</p>"},{"location":"how-it-works/features/compute/k8s-eks/vpc-addressing/","title":"Kubernetes AWS EKS","text":""},{"location":"how-it-works/features/compute/k8s-eks/vpc-addressing/#network-layer-eks-network-requirements","title":"Network Layer: EKS Network Requirements","text":"<p>In this section we detail all the network design related specifications</p> <ul> <li> VPCs CIDR blocks</li> <li> Private &amp; Public Subnets IP Ranges</li> </ul>"},{"location":"how-it-works/features/compute/k8s-eks/vpc-addressing/#considerations","title":"Considerations","text":"<p>Design considerations</p> <ul> <li> AWS EKS: Docker runs in the 172.17.0.0/16 CIDR range in Amazon EKS clusters.   We recommend that your cluster's VPC subnets do not overlap this range. Otherwise, you will   receive the following error:   <pre><code>Error: : error upgrading connection: error dialing backend: dial tcp 172.17.nn.nn:10250:\ngetsockopt: no route to host\n</code></pre>   Read more: AWS EKS network requirements</li> <li> Reserved IP Addresses The first four IP addresses and the last IP address in each subnet CIDR block are not available for you to use, and cannot be assigned to an instance. For example, in a subnet with CIDR block 10.0.0.0/24, the following five IP addresses are reserved. For more AWS VPC Subnets IP addressing</li> </ul>"},{"location":"how-it-works/features/compute/k8s-eks/vpc-addressing/#vpcs-ip-addressing-plan-cidr-blocks-sizing","title":"VPCs IP Addressing Plan (CIDR blocks sizing)","text":"<p>Introduction</p> <p>VPCs can vary in size from 16 addresses (/28 netmask) to 65,536 addresses (/16 netmask).  In order to size a VPC correctly, it is important to understand the number, types, and sizes of workloads  expected to run in it, as well as workload elasticity and load balancing requirements. </p> <p>Keep in mind that there is no charge for using Amazon VPC (aside from EC2 charges), therefore cost  should not be a factor when determining the appropriate size for your VPC, so make sure you size your  VPC for growth.</p> <p>Moving workloads or AWS resources between networks is not a trivial task, so be generous in your  IP address estimates to give yourself plenty of room to grow, deploy new workloads, or change your  VPC design configuration from one to another. The majority of AWS customers use VPCs with a /16  netmask and subnets with /24 netmasks. The primary reason AWS customers select smaller VPC and  subnet sizes is to avoid overlapping network addresses with existing networks. </p> <p>So having AWS single VPC Design we've chosen a Medium/Small VPC/Subnet addressing plan which would probably fit a broad range variety of use cases</p>"},{"location":"how-it-works/features/compute/k8s-eks/vpc-addressing/#networking-ip-addressing","title":"Networking - IP Addressing","text":"<p>Starting CIDR Segment (AWS EKS clusters)</p> <ul> <li> AWS EKS clusters IP Addressing calculation is presented below based on segment <code>10.0.0.0/16</code> (starts at /16 due to AWS VPC limits)</li> <li> We started from <code>10.0.0.0/16</code> and subnetted to <code>/19</code></li> <li> Resulting in Total Subnets: 8</li> <li>Number of available hosts for each subnet: 8190</li> <li>Number of available IPs (AWS) for each subnet: 8187</li> </ul> <p>Individual CIDR Segments (VPCs)</p> <p> Then each of these are /16 to /19</p> <ul> <li> <p> Considering the whole Starting CIDR Segment (AWS EKS clusters) before declared, we'll start at <code>10.0.0.0/16</code></p> <ul> <li>apps-devstg<ul> <li>1ry VPC CIDR: <code>10.0.0.0/16</code></li> <li>1ry VPC DR CIDR: <code>10.20.0.0/16</code></li> </ul> </li> <li>apps-prd<ul> <li>1ry VPC CIDR: <code>10.10.0.0/16</code></li> <li>1ry VPC DR CIDR: <code>10.30.0.0/16</code></li> </ul> </li> </ul> </li> <li> <p> Resulting in Subnets: 4 x VPC</p> <ul> <li>VPC Subnets with Hosts/Net: 16.</li> <li>Eg: apps-devstg account \u2192 us-east-1 w/ 3 AZs \u2192 3 x Private Subnets /az + 3 x Public Subnets /az<ul> <li>1ry VPC CIDR: <code>10.0.0.0/16</code>Subnets:<ul> <li>Private <code>10.0.0.0/19, 10.0.32.0/19 and 10.0.64.0/19</code></li> <li>Public <code>10.0.96.0/19, 10.0.128.0/19 and 10.0.160.0/19</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"how-it-works/features/compute/k8s-eks/vpc-addressing/#planned-subnets-per-vpc","title":"Planned Subnets per VPC","text":"<p>Having defined the initial VPC that will be created in the different accounts that were defined, we are going to create subnets in each of these VPCs defining Private and Public subnets split among different availability zones:</p> Subnet address Range of addresses Hosts Assignment 10.0.0.0/19 10.0.0.0 - 10.0.31.255 8190 1ry VPC: apps-devstg AZ: us-east-1a 10.0.32.0/19 10.0.32.0 - 10.0.63.255 8190 1ry VPC: apps-devstg AZ: us-east-1b 10.0.64.0/19 10.0.64.0 - 10.0.95.255 8190 1ry VPC: apps-devstg AZ: us-east-1c 10.0.96.0/19 10.0.96.0 - 10.0.127.255 8190 1ry VPC: apps-devstg AZ: us-east-1a 10.0.128.0/19 10.0.128.0 - 10.0.159.255 8190 1ry VPC: apps-devstg AZ: us-east-1b 10.0.160.0/19 10.0.160.0 - 10.0.191.0/255 8190 1ry VPC: apps-devstg AZ: us-east-1c 10.0.192.0/19 10.0.192.0 - 10.0.223.255 8190 1ry VPC: apps-devstg AZ: us-east-1 10.0.224.0/19 10.0.224.0 - 10.0.224.255 8190 1ry VPC: apps-devstg AZ: us-east-1 <p>Note: Additional clusters can use their own available VPC space under 10.x.0.0/16.</p> <ul> <li> <p>Subnetting reference #1 | Visual Subnet Calculator (https://www.davidc.net/)</p> </li> <li> <p>Subnetting reference #2 | IP Calculator / IP Subnetting (https://jodies.de/)</p> </li> </ul>"},{"location":"how-it-works/features/compute/k8s-eks/vpc-addressing/#read-more","title":"Read More","text":"<p>EKS Reference Architecture Specs</p> <p>In case you would like to further understand the different tech specs and configs for this Ref Arch you could find some details like at the Features/Compute/K8s EKS</p>"},{"location":"how-it-works/features/costs/costs/","title":"Cost Estimation &amp; Optimization","text":""},{"location":"how-it-works/features/costs/costs/#opportunity-to-optimize-resources","title":"Opportunity to optimize resources","text":"<p> Compute</p> <ul> <li>Usage of reserved EC2 instances for stable workloads (AWS Cost Explorer Reserved Optimization | Compute  Optimizer - get a -$ of up to 42% vs On-Demand)</li> <li>Usage of Spot EC2 instances for fault-tolerant workloads (-$ by up to 90%).</li> <li>Use ASG to allow your EC2 fleet to \u00b1 based on demand.</li> <li>Id EC2 w/ low-utiliz and -$ by stop / rightsize them.</li> <li>Compute Savings Plans to reduce EC2, Fargate and Lambda $ (Compute Savings Plans OK regardless of EC2 family,  size, AZ, reg, OS or tenancy, OK for Fargate / Lambda too).</li> </ul> <p> Databases</p> <ul> <li>Usage of reserved RDS instances for stable workload databases.</li> </ul> <p> Monitoring &amp; Automation</p> <ul> <li>AWS billing alarms + AWS Budget (forecasted account cost / RI Coverage) Notifications to Slack</li> <li>Activate AWS Trusted Advisor cost related results<ul> <li>Id EBS w/ low-utiliz and -$ by snapshotting and then rm them</li> <li>Check underutilized EBS to be possibly shrunk or removed.</li> <li>Networking -&gt; deleting idle LB -&gt; Use LB check w/ RequestCount of &gt; 100 past 7d.</li> </ul> </li> <li>Setup Lambda nuke to automatically clean up AWS account resources.</li> <li>Setup lambda scheduler for stop and start resources on AWS (EC2, ASG &amp; RDS)</li> </ul> <p> Storage &amp; Network Traffic</p> <ul> <li>Check S3 usage and -$ by leveraging lower $ storage tiers.</li> <li>Use S3 Analytics, or automate mv for these objects into lower $ storage tier w/ Life Cycle Policies or w/ S3 Intelligent-Tiering.</li> <li>If DataTransferOut from EC2 to the public internet is significant $, consider implementing CloudFront.</li> </ul>"},{"location":"how-it-works/features/costs/costs/#consideration","title":"Consideration","text":"<p>Reserved Instances</p> <ul> <li>  Stable workloads will always run on reserved instances, the following calculation only considers 1yr. No Upfront mode, in which Client will not have to pay in advance but commits to this monthly usage and will be billed so, even if the instance type is not used. More aggressive Reservation strategies can be implemented to further reduce costs, these will have to be analyzed by business in conjunction with operations.</li> </ul>"},{"location":"how-it-works/features/costs/costs/#read-more","title":"Read more","text":"<p>Reference links</p> <p>Consider the following extra links as reference:</p> <ul> <li> AWS Ramp-Up Guide: Cost Management</li> <li> How is the pricing benefit of a RI applied across an organization's consolidated bill?</li> <li> A Guide to Cloud Cost Optimization with HashiCorp Terraform</li> <li> FinOps: How Cloud Finance Management Can Save Your Cloud Programme From Extinction</li> </ul>"},{"location":"how-it-works/features/database/database/","title":"Databases","text":""},{"location":"how-it-works/features/database/database/#overview","title":"Overview","text":"<p>Will implement AWS RDS databases matching the requirements of the current application stacks.  If the region selected is the same you're actually using for your legacy AWS RDS instances we will be able to create a peering connection to existing databases in order to migrate the application stacks first, then databases. </p> <p>AWS RDS Specs</p> <ul> <li> RDS Instance Size</li> <li> Multi AZ</li> <li> Encryption: Yes</li> <li> Auto Minor version update</li> <li> Automated snapshots</li> <li> Snapshot retention</li> </ul>"},{"location":"how-it-works/features/database/mysql/","title":"RDS | MySQL","text":""},{"location":"how-it-works/features/database/postgres/","title":"RDS | PostgresSQL","text":""},{"location":"how-it-works/features/identities/identities/","title":"Identity and Access Management (IAM) Layer","text":""},{"location":"how-it-works/features/identities/identities/#summary","title":"Summary","text":"<p>Having this official AWS resource  as reference  we've define a security account structure for managing multiple accounts.</p> <p>User Management Definitions  </p> <ul> <li> IAM users will strictly be created and centralized in the Security account (member accounts IAM Users could be exceptionally created for very specific tools that still don\u2019t support IAM roles for cross-account auth). </li> <li> All access to resources within the Client organization will be assigned via policy documents attached to IAM roles or groups.</li> <li> All IAM roles and groups will have the least privileges required to properly work.</li> <li> IAM AWS and Customer managed policies will be defined, inline policies will be avoided whenever possible.</li> <li> All user management will be maintained as code and will reside in the DevOps repository.</li> <li> All users will have MFA enabled whenever possible (VPN and AWS Web Console).</li> <li> Root user credentials will be rotated and secured. MFA for root will be enabled. </li> <li> IAM Access Keys for root will be disabled.</li> <li> IAM root access will be monitored via CloudWatch Alerts.</li> </ul> <p>Why multi account IAM strategy?</p> <p>Creating a security relationship between accounts makes it even easier for companies to assess the security  of AWS-based deployments, centralize security monitoring and management, manage identity and access, and provide  audit and compliance monitoring services</p> <p></p> Figure: AWS Organization Security account structure for managing multiple accounts (just as reference). (Source: Yoriyasu Yano,   \"How to Build an End to End Production-Grade Architecture on AWS Part 2\", Gruntwork.io Blog, accessed November 18th 2020)."},{"location":"how-it-works/features/identities/identities/#iam-groups-roles-definition","title":"IAM Groups &amp; Roles definition","text":"<p>AWS Org member accounts IAM groups :</p> Account Name AWS Org Member Accounts IAM Groups Admin Auditor DevOps DeployMaster project-management x     project-security x     x     x     x     <p>AWS Org member accounts IAM roles :</p> Account Name AWS Org Member Accounts IAM Roles Admin Auditor DevOps DeployMaster OrganizationAccountAccessRole project-management x     project-security x     x     x     x     project-shared x     x     x     x     x     project-legacy x     x     x     project-apps-devstg x     x     x     x     x     project-apps-prd x     x     x     x     x"},{"location":"how-it-works/features/identities/roles/","title":"IAM roles","text":"<p>What are AWS IAM Roles?  </p> <p>For the Leverage AWS Reference Architecture we heavily depend on AWS IAM roles, which is a standalone IAM entity  that:</p> <ul> <li>Allows you to attach IAM policies to it, </li> <li>Specify which other IAM entities to trust, and then </li> <li>Those other IAM entities can assume the IAM role to be temporarily get access to the permissions in those IAM     policies. </li> </ul> <p>The two most common use cases for IAM roles are</p> <ul> <li> Service roles: Whereas an IAM user allows a human being to access AWS resources, one of the most common use cases for an IAM  role is to allow a service\u2014e.g., one of your applications, a CI server, or an AWS service\u2014to access specific  resources in your AWS account. For example, you could create an IAM role that gives access to a specific S3 bucket  and allow that role to be assumed by one of your EC2 instances or Lambda functions. The code running on that AWS compute service will then be able to access that S3 bucket (or any other service you granted through this IAM roles) without you having to manually copy AWS credentials (i.e., access keys) onto that instance.</li> <li> Cross account access: Allow to grant an IAM entity in one AWS account access to specific resources in another AWS account. For example, if you have an IAM user in AWS account A, then by default, that IAM user cannot access anything in AWS account B. However, you could create an IAM role in account B that gives access to a specific S3 bucket (or any necessary AWS services) in  AWS account B and allow that role to be assumed by an IAM user in account A. That IAM user will then be able to access the contents of the S3 bucket by assuming the IAM role in account B. This ability to assume IAM roles across different  AWS accounts is the critical glue that truly makes a multi AWS account structure possible.</li> </ul>"},{"location":"how-it-works/features/identities/roles/#how-iam-roles-work","title":"How IAM roles work?","text":"Figure: Example of AWS cross-account AWS access. (Source: Kai Zhao,   \"AWS CloudTrail Now Tracks Cross-Account Activity to Its Origin\", AWS Security Blog, accessed November 17th 2020).  <p>Main IAM Roles related entities</p>"},{"location":"how-it-works/features/identities/roles/#iam-policies","title":"IAM policies","text":"<p>Just as you can attach IAM policies to an IAM user and IAM group, you can attach IAM policies to an IAM role.</p>"},{"location":"how-it-works/features/identities/roles/#trust-policy","title":"Trust policy","text":"<p>You must define a trust policy for each IAM role, which is a JSON document (very similar to an IAM policy) that  specifies who can assume this IAM role. For example, we present below a trust policy that allows this IAM role to be  assumed by an IAM user named John in AWS account 111111111111: <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": \"sts:AssumeRole\",\n\"Principal\": {\"AWS\": \"arn:aws:iam::111111111111:user/John\"}\n}\n]\n}\n</code></pre> Note that a trust policy alone does NOT automatically give John permissions to assume this IAM role.  Cross-account access always requires permissions in both accounts (2 way authorization). So, if John is in AWS account 111111111111 and you want him to have access to an IAM role called <code>DevOps</code> in account B ID 222222222222, then you need to configure permissions in both accounts:  1. In account 222222222222, the <code>DevOps</code> IAM role must have a trust policy that gives <code>sts:AssumeRole</code> permissions to  AWS account A ID 111111111111 (as shown above). 2. 2nd, in account A 111111111111, you also need to attach an IAM policy to John\u2019s IAM user that allows him to assume  the <code>DevOps</code> IAM role, which might look like this:</p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": \"sts:AssumeRole\",\n\"Resource\": \"arn:aws:iam::222222222222:role/DevOps\"\n}\n]\n}\n</code></pre>"},{"location":"how-it-works/features/identities/roles/#assuming-an-aws-iam-role","title":"Assuming an AWS IAM role","text":"<p>How does it work?</p> <p>IAM roles do not have a user name, password, or permanent access keys. To use an IAM role, you must assume it by  making an <code>AssumeRole</code> API call (v\u00eda SDKs API,  CLI or  Web Console, which will return temporary access keys you can use in follow-up API calls to authenticate as the IAM role. The temporary  access keys will be valid for 1-12 hours (depending on your current validity expiration config), after which you must call <code>AssumeRole</code> again to fetch new temporary keys. Note that to make the <code>AssumeRole</code> API call, you must first authenticate to AWS using some other mechanism. </p> <p>For example, for an IAM user to assume an IAM role, the workflow looks like this: </p> Figure: Assuming an AWS IAM role. (Source: Gruntwork.io,   \"How to configure a production-grade AWS account structure using Gruntwork AWS Landing Zone\", Gruntwork.io Production deployment guides, accessed November 17th 2020).  <p>Basic AssumeRole workflow</p> <ol> <li>Authenticate using the IAM user\u2019s permanent AWS access keys</li> <li>Make the AssumeRole API call</li> <li>AWS sends back temporary access keys</li> <li>You authenticate using those temporary access keys</li> <li>Now all of your subsequent API calls will be on behalf of the assumed IAM role, with access to whatever     permissions are attached to that role</li> </ol> <p>IAM roles and AWS services</p> <p>Most AWS services have native support built-in for assuming IAM roles. </p> <p>For example: </p> <ul> <li>You can associate an IAM role directly with an EC2 instance (instance profile), and that instance will  automatically assume the IAM role every few hours, making the temporary credentials available in EC2 instance metadata. </li> <li>Just about every AWS CLI and SDK tool knows how to read and periodically update temporary credentials from EC2  instance metadata, so in practice, as soon as you attach an IAM role to an EC2 instance, any code running on that  EC2 instance can automatically make API calls on behalf of that IAM role, with whatever permissions are attached to that role. This allows you to give code on your EC2 instances IAM permissions without having to manually figure out how to copy credentials (access keys) onto that instance. </li> <li>The same strategy works with many other AWS services: e.g., you use IAM roles as a secure way to give your Lambda  functions, ECS services, Step Functions, and many other AWS services permissions to access specific resources in   your AWS account.</li> </ul>"},{"location":"how-it-works/features/identities/roles/#read-more","title":"Read more","text":"<p>AWS reference links</p> <p>Consider the following AWS official links as reference:</p> <ul> <li> AWS Identities | Roles terms and concepts</li> <li> AWS Identities | Common scenarios</li> </ul>"},{"location":"how-it-works/features/monitoring/apm/","title":"Application Performance Monitoring (APM) and Business Performance","text":"<p>Custom Prometheus BlackBox Exporter + Grafana &amp;  Elastic Application performance monitoring (APM)   delivers real-time and trending data about your web application's performance and the level of satisfaction that your end users experience. With end to end transaction tracing and a variety of color-coded charts and reports, APM visualizes your data, down to the deepest code levels. Your DevOps teams don't need to guess whether a performance blocker comes from the app itself, CPU availability, database loads, or something else entirely unexpected. With APM, you can quickly identify potential problems before they affect your end users.</p> <p>APM's user interface provides both current and historical information about memory usage, CPU utilization, database query performance, web browser rendering performance, app availability and error analysis, external services,  and other useful metrics.</p>"},{"location":"how-it-works/features/monitoring/apm/#slis-kpis","title":"SLIs / KPIs","text":"<p>Service Level Indicators (SLIs)</p> <ul> <li> latency</li> <li> throughput</li> <li> availability</li> <li> error rate</li> </ul> <p>KPI for business performance</p> <ul> <li> General <ul> <li>DOM readiness </li> <li>Page render </li> <li>Apdex </li> <li>Mobile crash rate</li> </ul> </li> <li> Web <ul> <li>Session count</li> <li>Session duration</li> <li>Page views </li> <li>Error % </li> </ul> </li> <li> Mobile <ul> <li>App launches</li> <li>User counts</li> <li>Load time</li> <li>Crash rates</li> <li>Crash locations </li> <li>Error rates </li> <li>API errors</li> </ul> </li> </ul> <p>KPI for app and infrastructure teams</p> <ul> <li> App/Infra <ul> <li>Availability</li> <li>Throughput </li> <li>App/Api/Db </li> <li>Response time </li> <li>Memory footprint </li> <li>CPU workload</li> </ul> </li> <li> DevOps <ul> <li>Builds </li> <li>Commits </li> <li>Deploys </li> <li>Errors </li> <li>Support incidents </li> <li>MTTR </li> </ul> </li> </ul>"},{"location":"how-it-works/features/monitoring/apm/#read-more","title":"Read More","text":"<ul> <li> NewRelic | Optimize customer experience (KPIs)</li> </ul>"},{"location":"how-it-works/features/monitoring/logs/","title":"Logs","text":""},{"location":"how-it-works/features/monitoring/logs/#overview","title":"Overview","text":"<p>Centralized Logs Solution</p> <p>For this purpose we propose the usage of Elasticsearch + Kibana for database and visualization respectively.  By deploying the Fluentd daemonset on the Kubernetes clusters we can send all logs from running pods to Elasticsearch,  and with \u2018beat\u2019 we can send specific logs for resources outside of Kubernetes. There will be many components across the environment generating different types of logs: ALB access logs, s3 access logs, cloudfront access logs, application request logs, application error logs. Access logs on AWS based resources can be stored in a centralized bucket for that purpose, on the security account and given the need these can be streamed to Elasticsearch as well if needed.</p> <p></p> Figure: Monitoring metrics and log architecture diagram (just as reference). (Source: binbash Leverage,   \"AWS Well Architected Reliability Report example\", binbash Leverage Doc, accessed November 18th 2020).  <p>Alerting based on Logs</p> <p>Certain features that were only available under licence were recently made available by Elastic, and included in the open source project of Elasticsearch. Elastalert allow us to generate alerts based on certain log entries or even after counting a certain amount of a type of entry, providing great flexibility.</p> <p>--</p>"},{"location":"how-it-works/features/monitoring/logs/#alternatives-comparison-table","title":"Alternatives Comparison Table","text":"<p>Leverage Confluence Documentation</p> <p>You'll find here a detailed comparison table between EC2 Self-hosted and AWS ElasticSearch Elastic-Kibana Stack.</p>"},{"location":"how-it-works/features/monitoring/metrics/","title":"Metrics","text":"<p>There are metrics  that are going to be of interest both in the infrastructure itself (CPU, Memory, disk) and also on  application level (amount of non 200 responses, latency, % of errors) and we will have two key sources for this:  Prometheus and AWS CloudWatch metrics.</p> <p>Metric collectors</p> <ul> <li> CloudWatch metrics: Is where amazon stores a great number of default metrics for each of its services. Useful data here can be interpreted and alerts can be generated with Cloudwatch alerts and can also be used as a source for Grafana. Although this is a very good offering, we have found it to be incomplete and highly bound to AWS services but not integrated enough with the rest of the ecosystem.</li> <li> Prometheus: This is an open source tool (by Soundcloud) that is essentially a time-series database. It stores metrics, and it has the advantage of being highly integrated with all Kubernetes things. In fact, Kubernetes is already publishing various metrics in Prometheus format \u201cout of the box\u201d. It\u2019s alerting capabilities are also remarkable, and it can all be kept as code in a repository.  It has a big community behind it, and it\u2019s not far fetched at this point to include a library in your own application that provides you with the ability to create an endpoint that publishes certain metrics about your own application, that we can graph or alert based on them.</li> </ul> <p></p> Figure: Monitoring metrics and log architecture diagram (just as reference). (Source: binbash Leverage,   \"AWS Well Architected Reliability Report example\", binbash Leverage Doc, accessed November 18th 2020).  <p>Graphing metrics</p> <p>Grafana is the standard open source visualization tool which can be used on top of a variety of different data stores. It can use prometheus as a source, and there are many open source dashboards and plugins available that provide great visualization of how things are running, and we can also build our own if necessary. If something is left out of prometheus and already available in Cloudwatch metrics we can easily integrate it as a source for Grafana as well, and build dashboards that integrate these metrics and even do some intelligence on them coming from multiple origins.</p> <p></p> Figure: Grafana K8s cluster metrics monitoring dashboard reference screenshot. (Source: DevOpsProdigy,   \"Grafana DevOpsProdigy KubeGraf Plugin\", Grafana plugins, accessed November 18th 2020).  <p></p> Figure: Grafana K8s cluster metrics monitoring dashboard reference screenshot. (Source: DevOpsProdigy,   \"Grafana DevOpsProdigy KubeGraf Plugin\", Grafana plugins, accessed November 18th 2020).  <p>Alerting based on metrics</p> <p>Although Grafana already has alerting capabilities built in, we rather (most of the times) have Prometheus alerting engine configured, because we can have really customize and specify alerts. We can have them as code in their extremely readable syntax. Example:</p> <p></p> Figure: Prometheus Alert Manager `CriticalRamUsage` alert screenshot (just as reference). (Source: binbash Leverage)."},{"location":"how-it-works/features/monitoring/monitoring/","title":"SRE &amp; Monitoring: Metrics, Logs &amp; Tracing","text":""},{"location":"how-it-works/features/monitoring/monitoring/#overview","title":"Overview","text":"<p>There are two key approaches that we will cover with the proposed tools, Logs based monitoring and Metrics based monitoring. </p> <p>Monitoring tools</p> <p> Metrics: Prometheus     - node-exporter      - blackbox-exporter     - alert-manager </p> <p> Metrics Dashboard: Grafana</p> <ul> <li> Data Sources<ul> <li>Prometheus </li> <li>CloudWatch</li> </ul> </li> <li> Plugins <ul> <li>piechart-panel </li> <li>devopsprodigy-kubegraf-app</li> </ul> </li> </ul> <p> Centralized Logs: Elasticsearch-Fluent-Kibana (EFK) </p> <ul> <li> Query Logs </li> <li> Dashboards </li> <li> Alerts based on logs</li> </ul> <p> Distributed Tracing: Jaeger + Opensensus</p>"},{"location":"how-it-works/features/monitoring/notification_escalation/","title":"Notification &amp; Escalation Procedure","text":""},{"location":"how-it-works/features/monitoring/notification_escalation/#overview","title":"Overview","text":"Urgency Service Notification Setting Use When Response High 24/7     High-priority PagerDuty Alert 24/7/365     <ul> <li>  Issue is in Production  <li>Or affects the applications/services and in turn affects the normal operation of the clinics  <li>Or prevents clinic patients to interact with the applications/services </li> <ul> <li>  Requires immediate human action  <li>Escalate as needed  <li>The engineer should be woken up </li> High during support hours     High-priority Slack Notifications during support hours     <ul> <li>  Issue impacts development team productivity  <li>Issue impacts the normal business operation </li> <ul> <li>  Requires immediate human action ONLY during business hours </li> </ul> Low     Low Priority Slack Notification     <ul> <li>  Any issue, on any environment, that occurs during working hours </li> </ul> <ul> <li>  Requires human action at some point  <li>Do not escalate  <li>An engineer should not be woken up </li>"},{"location":"how-it-works/features/monitoring/notification_escalation/#service-notification-settings","title":"Service Notification Settings","text":"Service Notification Setting Description High-priority PagerDuty Alert 24/7/365     <ul> <li> Notify on-call engineers --- At first, notify via SMS/Push --- Notify via Phone Call if after 10 minutes the previous has not acknowledged  <li>Notify person X (this is a person who needs to be aware of any of these issues always)  <li>Notify to Slack =&gt; engineering-urgent-alerts channel </li> High-priority Slack Notifications during support hours     <ul> <li> Notify to Slack =&gt; engineering-alerts channel </li> </ul> Low Priority Slack Notification     <ul> <li> Notify to Slack =&gt; engineering-alerts channel </li> </ul>"},{"location":"how-it-works/features/monitoring/notification_escalation/#alert-types","title":"Alert Types","text":"<p>UpTimeRobot (black box)</p> <ul> <li>https://uptimerobot.com/</li> <li>Sites or APIs are down</li> </ul> <p>Prometheus Alert Manager (black box, metrics-based)</p> <ul> <li>http://prometheus.aws.domain.com/</li> <li>Clusters issues (masters/nodes high resources usage)</li> <li>Instance issues (Pritunl VPN, Jenkins, Spinnaker, Grafana, Kibana, etc)</li> <li>Alerts from Prometheus Blackbox Exporter</li> </ul> <p>Kibana ElastAlert (black box, logs-based)</p> <ul> <li>Intended for applications/services logs</li> <li>Applications/services issues (frontends, backend services)</li> <li>Cluster components issues (nginx-ingress, cert-manager, linkerd, etc)</li> </ul> <p>PagerDuty</p> <ul> <li>https://domain.pagerduty.com/</li> <li>Incident management</li> </ul>"},{"location":"how-it-works/features/monitoring/notification_escalation/#implementation-reference-example","title":"Implementation Reference Example","text":"<p>Slack</p> <p>All alerts are sent to #engineering-urgent-alerts channel. Members that are online can have visibility from there. AlertManager takes care of sending such alerts according to the rules defined here: TODO</p> <p>Note: there is a channel named <code>engineering-alerts</code> but is used for Github notifications. It didn\u2019t make sense to mix real alerts with that, that is why a new <code>engineering-urgent-alerts</code> channel was created. As a recommendation, Github notifications should be sent to a channel named like #engineering-notifications and leave <code>engineering-alerts</code> for real alerts.</p> <p>PagerDuty</p> <p>AlertManager only sends to PagerDuty alerts that are labeled as severity: critical. PagerDuty is configured to  turn these into incidents according to the settings defined here for the Prometheus Critical Alerts service. The aforementioned service uses HiPriorityAllYearRound escalation policy to define who gets notified and how.</p> <p>Note: currently only the TechOwnership role gets notified as we don\u2019t have agreements or rules about on-call  support but this can be easily changed in the future to accommodate business decisions.</p> <p>UpTimeRobot</p> <p>We are doing basic http monitoring on the following sites: *   www.domain_1.com *   www.domain_2.com *   www.domain_3.com</p> <p>Note: a personal account has been set up for this. As a recommendation, an new account should be created using  an email account that belongs to your project.</p>"},{"location":"how-it-works/features/monitoring/tracing/","title":"Distributed Tracing","text":"<p>Solution Design</p> <p>Distributed tracing, also called distributed request tracing, is a method used to profile and monitor applications, especially those built using a microservices architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance.</p> <p></p> Figure: Figure: Distributed tracing architecture diagram (just as reference). (Source: binbash Leverage,   \"AWS Well Architected Reliability Report example\", binbash Leverage Doc, accessed November 18th 2020)."},{"location":"how-it-works/features/monitoring/tracing/#read-more","title":"Read more","text":"<p>Related resources</p> <ul> <li> Jaeger </li> <li> Opensensus</li> </ul>"},{"location":"how-it-works/features/network/dns/","title":"Route53 DNS hosted zones","text":"<p>  Route53 Considerations</p> <ul> <li> Route53 private hosted zone will have associations with VPCs on different AWS organization accounts</li> <li> Route53 should ideally be hosted in the Shared account, although sometimes Route53 is already deployed in a Legacy     account where it can be imported and fully supported as code.</li> <li> Route53 zero downtime migration      (active-active hosted zones) is completely possible and achievable with Leverage terraform code    </li> </ul> <p></p> Figure: AWS Organization shared account Route53 DNS diagram. (Source: Cristian Southall,   \"Using CloudFormation Custom Resources to Configure Route53 Aliases\", Abstractable.io Blog post, accessed November 18th 2020)."},{"location":"how-it-works/features/network/tgw-topology/","title":"Network Topology with AWS Transit Gateway","text":""},{"location":"how-it-works/features/network/tgw-topology/#transit-gateway","title":"Transit Gateway","text":""},{"location":"how-it-works/features/network/tgw-topology/#dedicated-tgw-network-account-architecture","title":"Dedicated TGW Network Account Architecture","text":"Figure: Multi-account dedicated network transit gateway architecture diagram. (Source: binbash Leverage, \"Leverage Reference Architecture dedicated network account TGW implementation\", binbash Leverage Doc, accessed August 4th 2021)."},{"location":"how-it-works/features/network/vpc-addressing/","title":"Network Layer","text":"<p>In this section we detail all the network design related specifications</p> <ul> <li> VPCs CIDR blocks</li> <li> VPC Gateways:  Internet, NAT, VPN.</li> <li> VPC Peerings</li> <li> VPC DNS Private Hosted Zones Associations.</li> <li> Network ACLS (NACLs)</li> </ul>"},{"location":"how-it-works/features/network/vpc-addressing/#vpcs-ip-addressing-plan-cidr-blocks-sizing","title":"VPCs IP Addressing Plan (CIDR blocks sizing)","text":"<p>Introduction</p> <p>VPCs can vary in size from 16 addresses (/28 netmask) to 65,536 addresses (/16 netmask).  In order to size a VPC correctly, it is important to understand the number, types, and sizes of workloads  expected to run in it, as well as workload elasticity and load balancing requirements. </p> <p>Keep in mind that there is no charge for using Amazon VPC (aside from EC2 charges), therefore cost  should not be a factor when determining the appropriate size for your VPC, so make sure you size your  VPC for growth.</p> <p>Moving workloads or AWS resources between networks is not a trivial task, so be generous in your  IP address estimates to give yourself plenty of room to grow, deploy new workloads, or change your  VPC design configuration from one to another. The majority of AWS customers use VPCs with a /16  netmask and subnets with /24 netmasks. The primary reason AWS customers select smaller VPC and  subnet sizes is to avoid overlapping network addresses with existing networks. </p> <p>So having AWS single VPC Design we've chosen a Medium/Small VPC/Subnet addressing plan which would probably fit a broad range variety of use cases</p>"},{"location":"how-it-works/features/network/vpc-addressing/#networking-ip-addressing","title":"Networking - IP Addressing","text":"<p>Starting CIDR Segment (AWS Org)</p> <ul> <li> AWS Org IP Addressing calculation is presented below based on segment <code>172.16.0.0/12</code></li> <li> We started from <code>172.16.0.0/12</code> and subnetted to <code>/20</code></li> <li> Resulting in Total Subnets: 256<ul> <li>2 x AWS Account with Hosts/SubNet: 4094</li> <li>1ry VPC + 2ry VPC</li> <li>1ry VPC DR + 2ry VPC DR</li> </ul> </li> </ul> <p>Individual CIDR Segments (VPCs)</p> <p> Then each of these are /20 to /24</p> <ul> <li> <p> Considering the whole Starting CIDR Segment (AWS Org) before declared, we'll start at <code>172.18.0.0/20</code></p> <ul> <li>shared<ul> <li>1ry VPC CIDR: <code>172.18.0.0/24</code></li> <li>2ry VPC CIDR: <code>172.18.16.0/24</code></li> <li>1ry VPC DR CIDR: <code>172.18.32.0/24</code></li> <li>2ry VPC DR CIDR: <code>172.18.48.0/24</code></li> </ul> </li> <li>apps-devstg<ul> <li>1ry VPC CIDR: <code>172.18.64.0/24</code></li> <li>2ry VPC CIDR: <code>172.18.80.0/24</code></li> <li>1ry VPC DR CIDR: <code>172.18.96.0/24</code></li> <li>2ry VPC DR CIDR: <code>172.18.112.0/24</code></li> </ul> </li> <li>apps-prd<ul> <li>1ry VPC CIDR: <code>172.18.128.0/24</code></li> <li>2ry VPC CIDR: <code>172.18.144.0/24</code></li> <li>1ry VPC DR CIDR: <code>172.18.160.0/24</code></li> <li>2ry VPC DR CIDR: <code>172.18.176.0/24</code></li> </ul> </li> </ul> </li> <li> <p> Resulting in Subnets: 16 x VPC</p> <ul> <li>VPC Subnets with Hosts/Net: 256.</li> <li>Eg: apps-devstg account \u2192 us-east-1 w/ 3 AZs \u2192 3 x Private Subnets /az + 3 x Public Subnets /az<ul> <li>1ry VPC CIDR: <code>172.18.64.0/24</code>Subnets:<ul> <li>Private <code>172.18.64.0/24, 172.18.66.0/24 and 172.18.68.0/24</code></li> <li>Public <code>172.18.65.0/24, 172.18.67.0/24 and 172.18.69.0/24</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"how-it-works/features/network/vpc-addressing/#planned-subnets-per-vpc","title":"Planned Subnets per VPC","text":"<p>Having defined the initial VPC that will be created in the different accounts that were defined, we are going to create subnets in each of these VPCs defining Private and Public subnets split among different availability zones:</p> Subnet address Range of addresses Hosts Assignment 172.18.0.0/20 172.18.0.0 - 172.18.15.255 4094 1ry VPC: shared 172.18.16.0/20 172.18.16.0 - 172.18.31.255 4094 2ry VPC: shared 172.18.32.0/20 172.18.32.0 - 172.18.47.255 4094 1ry VPC DR: shared 172.18.48.0/20 172.18.48.0 - 172.18.63.255 4094 2ry VPC DR: shared 172.18.64.0/20 172.18.64.0 - 172.18.79.255 4094 1ry VPC: apps-devstg 172.18.80.0/20 172.18.80.0 - 172.18.95.255 4094 2ry VPC: apps-devstg 172.18.96.0/20 172.18.96.0 - 172.18.111.255 4094 1ry VPC DR: apps-devstg 172.18.112.0/20 172.18.112.0 - 172.18.127.255 4094 2ry VPC DR: apps-devstg 172.18.128.0/20 172.18.128.0 - 172.18.143.255 4094 1ry VPC: apps-prd 172.18.144.0/20 172.18.144.0 - 172.18.159.255 4094 2ry VPC: apps-prd 172.18.160.0/20 172.18.160.0 - 172.18.175.255 4094 1ry VPC DR: apps-prd 172.18.176.0/20 172.18.176.0 - 172.18.191.255 4094 2ry VPC DR: apps-prd"},{"location":"how-it-works/features/network/vpc-addressing/#considerations","title":"Considerations","text":"<ul> <li>Kubernetes on EKS General Requirements for Network Layer: K8s EKS Networking |\u00a0VPC Adressing</li> </ul>"},{"location":"how-it-works/features/network/vpc-peering/","title":"Diagram: Network Service (cross-account VPC peering)","text":"Figure: AWS multi account Organization VPC peering diagram. (Source: AWS,   \"Amazon Virtual Private Cloud VPC Peering\", AWS Documentation Amazon VPC User Guide, accessed November 18th 2020).  Figure: AWS multi account Organization peering detailed diagram. (Source: AWS,   \"Amazon Virtual Private Cloud VPC Peering\", AWS Documentation Amazon VPC User Guide, accessed November 18th 2020)."},{"location":"how-it-works/features/network/vpc-topology/","title":"Network Layer","text":""},{"location":"how-it-works/features/network/vpc-topology/#network-topology","title":"Network Topology","text":"<p>VPC with public and private subnets (NAT)</p> <ul> <li> <p> The configuration for this scenario includes a virtual private cloud (VPC) with public subnets and a private  subnets (it's number will change depending on our specific needs). We recommend this scenario if you want  to run a public-facing web application, while maintaining back-end servers that aren't publicly accessible.  A common example is a multi-tier website, with a Load Balancer (ALB | NLB) in a public subnet, or other public facing routing service like AWS CloudFront or Api Gateway, and our web servers (Lambda, EKS, ECS, EC2) and  database (RDS, DynamoDB, etc) servers in private subnets. You can set up security (SGs, ACLs, WAF) and routing  so that the web servers can communicate internally (even between VPC accounts or VPN Endpoints) with all necessary  services and components such as databases, cache, queues, among others.</p> </li> <li> <p> The services running in the public subnet, like an ALB or NLB can send outbound traffic directly to the Internet,  whereas the instances in the private subnet can't. Instead, the instances in the private subnet can access the  Internet by using a network address translation (NAT) gateway that resides in the public subnet. The database  servers can connect to the Internet for software updates using the NAT gateway (if using RDS this is transparently provided by AWS), but the Internet cannot establish connections to the database servers.</p> </li> <li> <p> So, whenever possible all our AWS resources like EC2, EKS, RDS, Lambda, SQS will be deployed in VPC private  subnets and we'll use a NAT device (Nat Gateway) to enable instances in a private subnet to connect to the   internet (for example, for software updates) or other AWS services, but prevent the internet from initiating  connections with the instances. </p> </li> <li> <p> A NAT device forwards traffic from the instances in the private subnet to the internet (via the VPC Internet Gateway) or other AWS services, and then sends the response back to the instances. When traffic goes to the  internet, the source IPv4 address is replaced with the NAT device\u2019s address and similarly, when the response traffic goes to those instances, the NAT device translates the address back to those instances\u2019 private IPv4 addresses.</p> </li> </ul> <p></p> Figure: VPC topology diagram. (Source: AWS,   \"VPC with public and private subnets (NAT)\", AWS Documentation Amazon VPC User Guide, accessed November 18th 2020).  <p></p> Figure: VPC topology diagram with multiple Nat Gateways for HA. (Source: Andreas Wittig,   \"Advanced AWS Networking: Pitfalls That You Should Avoid\", Cloudonaut.io Blog, accessed November 18th 2020)."},{"location":"how-it-works/features/network/vpc-topology/#read-more","title":"Read more","text":"<p>AWS reference links</p> <p>Consider the following AWS official links as reference:</p> <ul> <li> VPC with public and private subnets (NAT)</li> <li> AWS Elastic Load Balancing</li> </ul>"},{"location":"how-it-works/features/network/vpc-traffic-out/","title":"Network Security","text":""},{"location":"how-it-works/features/network/vpc-traffic-out/#control-internet-access-outbound-traffic","title":"Control Internet access outbound traffic","text":""},{"location":"how-it-works/features/network/vpc-traffic-out/#goals","title":"Goals","text":"<ul> <li> Review and analyse available alternatives for controlling outbound traffic in VPCs.</li> <li> All possible candidates need to offer a reasonable balance between features and pricing.</li> </ul> <p>Solutions</p>"},{"location":"how-it-works/features/network/vpc-traffic-out/#leverage-currently-supports","title":"Leverage currently supports","text":"<ul> <li>Network ACL (Subnet firewall)</li> <li>Security Groups (Instance firewall)</li> </ul>"},{"location":"how-it-works/features/network/vpc-traffic-out/#what-alternatives-do-we-have","title":"What alternatives do we have?","text":""},{"location":"how-it-works/features/network/vpc-traffic-out/#pre-considerations","title":"Pre-considerations","text":"<p>First of all, keep in mind the following points before and while you go through the data in the table:</p> <ul> <li>1 EBS pricing at the moment of this writing:</li> <li>GP2: $0.10 per GB-month</li> <li> <p>GP3: $0.08 per GB-month)</p> </li> <li> <p>2 DataTransfer costs will be incurred in all options</p> </li> </ul>"},{"location":"how-it-works/features/network/vpc-traffic-out/#dedicated-network-nat-gw-network-firewall-account","title":"Dedicated Network NAT-GW + Network Firewall Account","text":"<p>Centralized Network Firewall deployment model, North-South: Centralized internet egress (VPC to internet via Transit Gateway) and NAT gateway.</p> <p></p> Figure: Multi-account dedicated network transit gateway + network firewall architecture diagram. (Source: binbash Leverage, \"Leverage Reference Architecture dedicated network account TGW + NFW implementation\", binbash Leverage Doc, accessed August 4th 2021)."},{"location":"how-it-works/features/network/vpc-traffic-out/#comparison-of-the-alternatives-analysed","title":"Comparison of the alternatives analysed","text":"<p>Leverage Confluence Documentation</p> <p>You'll find here  a detailed comparison table including the alternative product and solution types, pricing model, features, pros &amp; cons.</p>"},{"location":"how-it-works/features/organization/accounts/","title":"AWS Organization Accounts description","text":"<p>Our default AWS Organizations terraform layout solution includes <code>5 accounts + 1</code> or N Accts (if you invite pre-existing AWS Account/s).</p> Account Description Management (Root) Used to manage configuration and access to AWS Org managed accounts. The AWS Organizations account provides the ability to create and financially manage member accounts, it contains AWS Organizations Service Control Policies(SCPs). Shared Services / Resources Reference for creating infrastructure shared services such as directory services, DNS, VPN Solution, Monitoring tools like Prometheus and Grafana, CI/CD server (Jenkins, Drone, Spinnaker, etc), centralized logging solution like ELK  and Vault Server (Hashicorp Vault) Security Intended for centralized user management via IAM roles based cross-org auth approach (IAM roles per account to be assumed still needed. Also to centralize AWS CloudTrail and AWS Config logs, and used as the master AWS GuardDuty Account Network Intended for centralized networking management via Transit Gateway (TGW), supports a centralized outbound traffic setup and the integration of AWS Network Firewall (NFW) Legacy Your pre existing AWS Accounts to be invited as members of the new AWS Organization, probably several services and workloads are going to be progressively migrated to your new Accounts. Apps DevStg Host your DEV, QA and STG environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues &amp; Servers, Data, Storage, CDN Apps Prod Host your PROD environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues &amp; Servers, Data, Storage, CDN"},{"location":"how-it-works/features/organization/billing/","title":"AWS Organizations Billing","text":""},{"location":"how-it-works/features/organization/billing/#overview","title":"Overview","text":"<p>Each month AWS charges your payer Root Account for all the linked accounts in a consolidated bill.  The following illustration shows an example of a consolidated bill.</p> <p></p> Figure: AWS Organization Multi-Account structure (just as reference). (Source: Andreas Wittig,   \"AWS Account Structure: Think twice before using AWS Organizations\", Cloudonaut.io Blog, accessed November 18th 2020).  <p></p> Figure: AWS Organization Multi-Account billing structure (just as reference). (Source: AWS,   \"Consolidated billing process\", AWS Documentation AWS Billing and Cost Management User Guide, accessed November 18th 2020).  <p>Reference Architecture AWS Organizations features</p> <ul> <li> AWS Multiple Account Billing Strategy: consolidated billing for all your accounts within organization, enhanced per account cost  filtering and RI usage </li> <li> A single monthly bill accumulates the spending among many AWS accounts.</li> <li> Benefit from volume pricing across more than one AWS account. </li> </ul> <p>AWS Organizations Billing FAQs</p> <ul> <li> <p> What does AWS Organizations cost?</p> <p>AWS Organizations is offered at no additional charge.</p> </li> <li> <p> Who pays for usage incurred by users under an AWS member account in my organization?</p> <p>The owner of the master account is responsible for paying for all usage, data, and resources used by the  accounts in the organization.</p> </li> <li> <p> Will my bill reflect the organizational unit structure that I created in my organization?</p> <p>No. For now, your bill will not reflect the structure that you have defined in your organization.  You can use cost allocation tags in individual AWS accounts to categorize and track your AWS costs, and this allocation will be visible in the consolidated bill for your organization.</p> </li> </ul> <p> Source | AWS Organizations FAQs</p>"},{"location":"how-it-works/features/organization/billing/#read-more","title":"Read more","text":"<p>Reference links</p> <p>Consider the following extra links as reference:</p> <ul> <li> Cloudnout.io | AWS Account Structure</li> <li> AWS Ramp-Up Guide: Cost Management</li> </ul>"},{"location":"how-it-works/features/organization/organization/","title":"Reference Architecture: Terraform AWS Organizations Account Baseline","text":""},{"location":"how-it-works/features/organization/organization/#overview","title":"Overview","text":"<p>This repository contains all Terraform configuration files used to create binbash Leverage Reference  AWS Organizations Multi-Account baseline layout.</p> <p>Why AWS Organizations?</p> <p>This approach allows it to have a hierarchical structure of AWS accounts, providing additional security isolation and the ability to separate resources into Organizational Units with it associated Service Control Policies (SCP). </p> <p>Considering that a current AWS account/s was/were  already active (Client AWS Legacy Account), this one will then be invited to be a \u201cmember  account\u201d of the AWS Organization architecture. In the future, once all Client\u2019s Legacy dev,  stage, prod and other resources for the Project applications are running in the new accounts  architecture, meaning a full AWS Organizations approach, all the already migrated assets from  the \u2018Legacy\u2019 account should be decommissioned. This account will remain with the necessary  services, such as DNS, among others. </p>"},{"location":"how-it-works/features/organization/organization/#aws-organization-accounts-layout","title":"AWS Organization Accounts Layout","text":"<p>The following block provides a brief explanation of the chosen AWS Organization Accounts layout:</p> MyExample project file structure <pre><code>    +\ud83d\udcc2 management/      (resources for the management account)\n    ...\n    +\ud83d\udcc2 security/        (resources for the security + users account)\n    ...\n    +\ud83d\udcc2 shared/          (resources for the shared account)\n    ...\n    +\ud83d\udcc2 network/         (resources for the centralized network account)\n    ...\n    +\ud83d\udcc2 apps-devstg/     (resources for apps dev &amp; stg account)\n    ...\n    +\ud83d\udcc2 apps-prd/        (resources for apps prod account)\n    ...\n</code></pre> <p></p> Figure: AWS Organization multi-account architecture diagram (just as reference). (Source: binbash Leverage, \"Leverage Reference Architecture components\", binbash Leverage Doc, accessed August 4th 2021).  <p>Benefits of AWS Organizations</p> <ul> <li> Billing: Consolidated billing for all your accounts within organization, enhanced per account cost  filtering and RI usage </li> <li> Security I: Extra security layer: You get fully isolated infrastructure for different organizations  units in your projects, eg: Dev, Prod, Shared Resources, Security, Users, BI, etc.</li> <li> Security II: Using AWS Organization you may use Service Control Policies (SCPs) to control which  AWS services are available within different accounts.</li> <li> Networking: Connectivity and access will be securely setup via VPC peering + NACLS + Sec Groups  everything with private endpoints only accessible v\u00eda Pritunl VPN significantly reducing the surface of attack.</li> <li> User Mgmt: You can manage all your IAM resources (users/groups/roles) and policies in one  place (usually, security/users account) and use AssumeRole to works with org accounts.</li> <li> Operations: Will reduce the blast radius to the maximum possible.   </li> <li> Compatibility: Legacy accounts can (probably should) be invited       as a member of the new Organization       and afterwards even imported into your terraform code.</li> <li> Migration: After having your baseline AWS Org reference cloud solutions architecture deployed     (IAM, VPC, NACLS, VPC-Peering, DNS Cross-Org,     CloudTrail, etc) you're ready to start progressively orchestrating new resources in order to segregate different     Environment and Services per account.     This approach will allow you to start a 1 by 1 Blue/Green (Red/Black) migration without affecting any of your      services at all. You would like to take advantage of an Active-Active DNS switchover approach (nice as DR exercise too). <ul> <li> EXAMPLE: Jenkins CI Server Migration steps:<ol> <li>Let's say you have your EC2_A (<code>jenkins.aws.domain.com</code>) in Account_A (Legacy), so you could deploy a      brand new EC2_B Jenkins Instance in Account_B (Shared Resources).</li> <li>Temporally associated with <code>jenkins2.aws.domain.com</code></li> <li>Sync it's current data (<code>/var/lib/jenkins</code>)</li> <li>Test and fully validate every job and pipeline works as expected.</li> <li>In case you haven't finished your validations we highly recommend to declare everything as code and      fully automated so as to destroy and re-create your under development env on demand to save costs.</li> <li>Finally switch <code>jenkins2.aws.domain.com</code> -&gt; to -&gt; <code>jenkins.aws.domain.com</code></li> <li>Stop your old EC2_A.</li> <li>If everything looks fine after after 2/4 weeks you could terminate your EC2_A (hope everything is as      code and just <code>terraform destroy</code>)</li> <li>Considering the previously detailed steps plan your roadmap to move forward with every other component     to be migrated.</li> </ol> </li> </ul> </li> </ul>"},{"location":"how-it-works/features/organization/organization/#read-more","title":"Read more","text":"<p>AWS reference links</p> <p>Consider the following AWS official links as reference:</p> <ul> <li> Why should I set up a multi-account AWS environment? </li> <li> AWS Multiple Account User Management Strategy</li> <li> AWS Muttiple Account Security Strategy</li> <li> AWS Multiple Account Billing Strategy</li> <li> AWS Secure Account Setup</li> <li> Authentication and Access Control for AWS Organizations (keep in mind EC2 and other services can also use AWS IAM Roles to get secure cross-account access)</li> </ul>"},{"location":"how-it-works/features/reliability/backups/","title":"Backups","text":""},{"location":"how-it-works/features/reliability/backups/#aws-backup","title":"AWS Backup","text":"<p>As defined by AWS</p> <p>AWS Backup is a fully managed backup service that makes it easy to centralize and automate the backup of data across AWS services. Using AWS Backup, you can centrally configure backup policies and monitor backup activity for AWS resources, such as:</p> <ul> <li> Amazon EBS volumes, </li> <li> Amazon EC2 instances, </li> <li> Amazon RDS databases, </li> <li> Amazon DynamoDB tables, </li> <li> Amazon EFS file systems,</li> <li> and AWS Storage Gateway volumes. </li> </ul> <p>AWS Backup automates and consolidates backup tasks previously performed service-by-service, removing the need to  create custom scripts and manual processes.  With just a few clicks in the AWS Backup console, you can create backup policies that automate backup schedules and retention management. AWS Backup provides a fully managed, policy-based backup solution, simplifying your backup management, enabling you to meet your business and regulatory backup compliance requirements.</p> <p></p> Figure: AWS Backup service diagram (just as reference). (Source: AWS,  \"AWS Backup - Centrally manage and automate backups across AWS services\", AWS Documentation, accessed November 18th 2020)."},{"location":"how-it-works/features/reliability/backups/#s3-bucket-region-replication","title":"S3 bucket region replication","text":"<ul> <li> Buckets that hold data critical to business or to application operation can be replicated to another region almost  synchronously. </li> <li> This can be setup on request to increase durability and along with database backup can constitute the base for a  Business Continuity strategy.</li> </ul>"},{"location":"how-it-works/features/reliability/backups/#comparison-of-the-backup-and-retention-policies-strategies","title":"Comparison of the backup and retention policies strategies","text":"<p>In this sub-section you'll find the resources to review and adjust your backup retention policies to  adhere to compliance rules that govern your specific institutions regulations. This post is a summarised write-up of how we approached this sensitive task, the alternatives we analysed and the recommended  solutions we provided in order to meet the requirements. We hope it can be useful for others as well.</p> <p>Leverage Confluence Documentation</p> <p>You'll find here a detailed comparison including the alternative product and solution types, pricing model, features, pros &amp; cons.</p>"},{"location":"how-it-works/features/reliability/dr/","title":"Disaster Recovery &amp; Business Continuity Plan","text":""},{"location":"how-it-works/features/reliability/dr/#overview","title":"Overview","text":"<p>Applications that are business critical should always have a plan in place to recover in case of a catastrophic failure or disaster. There are many strategies that can be implemented to achieve this, and deciding between them is a matter of analyzing how much is worth to invest based on calculation of damages suffered if the application is not available for a given period of time. It is based on this factor (time) that disaster recovery plans are based on. Factors that need to be determined per application are:</p> <p>RTO and RPO</p> <ul> <li> Recovery time objective (RTO): This represents the time it takes after a disruption to restore a business process to its service level. For example, if a disaster occurs at 12:00 PM (noon) and the RTO is eight hours, the DR process should restore the business process to the acceptable service level by 8:00 PM. </li> <li> Recovery point objective (RPO): This is the acceptable amount of data loss measured in time. For example, if a  disaster occurs at 12:00 PM (noon) and the RPO is one hour, the system should recover all data that was in the   system before that hour.</li> </ul>"},{"location":"how-it-works/features/reliability/dr/#high-availability-configuration-strategies","title":"High Availability Configuration Strategies","text":"<p>After deciding RTO and RPO we have options available to achieve the time objectives:</p> <p>HA Strategies</p> <ul> <li> Backup and restore: In most traditional environments, data is backed up to tape and sent off-site regularly.  The equivalent in AWS would be to take backups in the form of snapshots and copy them to another region for RDS  instances, EBS volumes, EFS and S3 buckets. The plan details the step-by-step procedure to recover a fully working  production environment based on these backups being restored on freshly provisioned infrastructure, and how to  rollback to a regular production site once the emergency is over.</li> <li> Pilot Light Method: The term pilot light is often used to describe a DR scenario in which a minimal version of  an environment is always running in AWS. Very similar to \u201cBackup and restore\u201d except a minimal version of key  infrastructure components is provisioned in a separate region and then scaled up in case of disaster declaration.</li> <li> Warm standby active-passive method: The term warm-standby is used to describe a DR scenario in which a  scaled-down version of a fully-functional environment is always running in the cloud. Enhancement of Pilot Light  in which a minimal version is created of all components, not just critical ones.</li> <li> Multi-Region active-active method: By architecting multi region applications and using DNS to balance  between them in normal production status, you can adjust the DNS weighting and send all traffic to the AWS region  that is available, this can even be performed automatically with Route53 or other DNS services that provide health  check mechanisms as well as load balancing.</li> </ul> <p></p> Figure: 2 sets of app instances, each behind an elastic load balancer in two separate regions (just as reference). (Source: Randika Rathugamage,   \"High Availability with Route53 DNS Failover\", Medium blogpost, accessed December 1st 2020).  <p></p> Figure: AWS calculated \u2014 or parent \u2014 health check, we can fail on any number of child health checks (just as reference). (Source: Simon Tabor,   \"How to implement the perfect failover strategy using Amazon Route53\", Medium blogpost, accessed December 1st 2020)."},{"location":"how-it-works/features/reliability/dr/#read-more","title":"Read more","text":"<p>AWS reference links</p> <p>Consider the following AWS official links as reference:</p> <ul> <li> AWS Documentation Amazon Route 53 Developer Guide | Configuring DNS failover</li> </ul>"},{"location":"how-it-works/features/reliability/high-availability/","title":"High Availability &amp; Helthchecks","text":""},{"location":"how-it-works/features/reliability/high-availability/#recovery-from-failures","title":"Recovery from Failures","text":"<p>Automatic recovery from failure</p> <p>It keeps an AWS environment reliable. Using logs and metrics from CloudWatch, designing a system where the failures themselves trigger recovery is the way to move forward.</p> <p></p> Figure: AWS HA architecture diagrams (just as reference)."},{"location":"how-it-works/features/reliability/high-availability/#recovery-procedures","title":"Recovery Procedures","text":"<p>Test recovery procedures</p> <p>The risks faced by cloud environment and systems, the points of failure for systems and ecosystems, as well as details about the most probable attacks are known and can be simulated. Testing recovery procedures are something that can be done using these insights. Real points of failure are exploited and the way the environment reacts to the emergency shows just how reliable the system it.</p> <p></p> Figure: AWS HA architecture diagrams (just as reference)."},{"location":"how-it-works/features/reliability/high-availability/#scalability-and-availability","title":"Scalability and Availability","text":"<p>Scale horizontally to increase aggregate system availability</p> <p>The cloud environment needs to have multiple redundancies and additional modules as added security measures. Of course, multiple redundancies require good management and maintenance for them to remain active through the environment\u2019s lifecycle.</p> <p></p> Figure: AWS HA scalable architecture diagrams (just as reference)."},{"location":"how-it-works/features/reliability/high-availability/#healthchecks-self-healing","title":"Healthchecks &amp; Self-healing","text":""},{"location":"how-it-works/features/reliability/high-availability/#k8s-and-containers","title":"K8s and containers","text":"<p>K8s readiness and liveness probes</p> <p>Distributed systems can be hard to manage. A big reason is that there are many moving parts that all need to work for the system to function. If a small part breaks, the system has to detect it, route around it, and fix it.  And this all needs to be done automatically! Health checks are a simple way to let the system know if an instance of your app is working or not working. </p> <p>If an instance of your app is not working, then other services should not access it or send a request to it.  Instead, requests should be sent to another instance of the app that is ready, or re-tried at a later time. The  system should also bring your app back to a healthy state.</p> <p>By default, Kubernetes starts to send traffic to a pod when all the containers inside the pod start, and restarts containers when they crash. While this can be \u201cgood enough\u201d when you are starting out, you can make your deployments more robust by creating custom health checks. Fortunately, Kubernetes make this relatively straightforward, so there is no excuse not to!\u201d    </p> <p>So aside from the monitoring and alerting that underlying infrastructure will have, application container will have   their own mechanisms to determine readiness and liveness. These are features that our scheduler of choice Kubernetes  natively allows, to read more click here.</p>"},{"location":"how-it-works/features/secrets/secrets/","title":"Secret and password mgmt tools","text":""},{"location":"how-it-works/features/secrets/secrets/#overview","title":"Overview","text":"<p>Ensure scalability, availability and persistence, as well as secure, hierarchical storage to manage configuration and secret data for:</p> <p>Secret Managers</p> <ul> <li> AWS KMS</li> <li> AWS SSM Parameter Store</li> <li> Ansible Vault</li> <li> Hashicorp Vault</li> </ul> <p>Strengths</p> <ul> <li> Improve the level of security by validating separation of environment variables and code secrets.</li> <li> Control and audit granular access in detail</li> <li> Store secure chain and configuration data in hierarchies and track versions.</li> <li> Configure integration with AWS KMS, Amazon SNS, Amazon CloudWatch, and AWS CloudTrail to notify, monitor, and audit functionality.</li> </ul>"},{"location":"how-it-works/features/secrets/secrets/#read-more","title":"Read more","text":"<p>Related articles</p> <ul> <li> A Comparison of Secrets Managers for AWS</li> <li> Clean Up Your Secrets &amp; Credential Management</li> </ul>"},{"location":"how-it-works/features/security/audit-cloudtrail/","title":"Audit | CloudTrail","text":""},{"location":"how-it-works/features/security/audit-cloudtrail/#feature-overview","title":"Feature Overview","text":"<p>AWS CloudTrail monitors and records account activity across your AWS infrastructure,  giving you control over storage, analysis, and remediation actions.</p> <p>AWS CloudTrail overview</p> <p>This service will be configured to enable auditing of all AWS services in all accounts. Once enabled, as shown in the below presented figure, CloudTrail will deliver all events  from all accounts to the Security account in order to have a centralized way to audit  operations on AWS resources. Audit events will be available from CloudTrail for 90 days but a longer retention  time will be available through a centralized S3 bucket.</p> <p> Figure: AWS CloudTrail components architecture diagram (just as reference).     (Source: binbash Leverage diagrams, accessed July 6th 2022).     </p> <p> IaC Terraform Codebase &lt;&gt;</p> <ul> <li> <code>binbash-management</code> account | Audit: Cloudtrail<ul> <li>Code: management/us-east-1/security-audit</li> </ul> </li> <li> <code>binbash-security</code> account | Audit: Cloudtrail &amp; S3 Bucket<ul> <li>Code: security/us-east-1/security-audit</li> </ul> </li> <li> <code>binbash-shared</code> account | Audit: Cloudtrail<ul> <li>Code: shared/us-east-1/security-audit</li> </ul> </li> <li> <code>binbash-apps-devstg</code> account | Audit: Cloudtrail<ul> <li>Code: apps-devstg/us-east-1/security-audit</li> </ul> </li> <li> <code>binbash-apps-prd</code> account | Audit: Cloudtrail<ul> <li>Code: apps-prd/us-east-1/security-audit</li> </ul> </li> <li> <code>binbash-network</code> account | Audit: Cloudtrail<ul> <li>Code: network/us-east-1/security-audit</li> </ul> </li> </ul>"},{"location":"how-it-works/features/security/audit-cloudtrail/#read-more","title":"Read more","text":"<p>AWS reference links</p> <p>Consider the following AWS official links as reference:</p> <ul> <li> AWS Cloudtrail Overview</li> </ul>"},{"location":"how-it-works/features/security/certificates/","title":"Certificate Management","text":""},{"location":"how-it-works/features/security/certificates/#aws-certificate-manager","title":"AWS Certificate Manager","text":"<p>Why AWS Certificate Manager (ACM)\u2753</p> <p>As stated at the official AWS website</p> <p>\"AWS Certificate Manager is a service that lets you easily provision, manage, and deploy public and  private Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS services and your internal connected resources. SSL/TLS certificates are used to secure network communications and establish the identity of websites over the Internet as well as resources on private networks.  AWS Certificate Manager removes the time-consuming manual process of purchasing, uploading, and renewing SSL/TLS certificates.\"</p> <p>\"With AWS Certificate Manager, you can quickly request a certificate, deploy it on  ACM-integrated AWS resources,  such as:</p> <ul> <li>Elastic Load Balancers, </li> <li>Amazon CloudFront distributions, </li> <li>and APIs on API Gateway,</li> </ul> <p>and let AWS Certificate Manager handle certificate renewals. It also enables you to create private  certificates for your internal resources and manage the certificate lifecycle centrally.  Public and private certificates provisioned through AWS Certificate Manager for use with ACM-integrated services are free. You pay only for the AWS resources you create to run your application.  With AWS Certificate Manager Private Certificate Authority, you pay monthly for the operation of the private CA and for the private certificates you issue.\"</p> <p></p> Figure: AWS certificate manager (ACM) service integration diagram. (Source: AWS,   \"Amazon Certificate Manager intro diagram\", AWS Documentation Amazon ACM User Guide, accessed August 4th 2021)."},{"location":"how-it-works/features/security/certificates/#cert-manager-lets-encrypt","title":"Cert-manager + Let's Encrypt","text":"<p>Why Cert-manager + Let's Encrypt\u2753</p> <ul> <li> <p> cert-manager adds certificates and certificate issuers as resource types in Kubernetes clusters, and  simplifies the process of obtaining, renewing and using those certificates.</p> </li> <li> <p> It can issue certificates from a variety of supported sources, including Let\u2019s Encrypt, HashiCorp Vault, and Venafi as well as private PKI.</p> </li> <li> <p> It will ensure certificates are valid and up to date, and attempt to renew certificates at a configured time before expiry.</p> </li> <li> <p> It is loosely based upon the work of kube-lego and has borrowed some wisdom from other similar projects such as kube-cert-manager.</p> </li> </ul> <p></p> Figure: Certificate manager high level components architecture diagram. (Source: Cert-manager official documentation,   \"Cert-manager manager intro overview\", Cert-manager Documentation main intro section, accessed August 4th 2021)."},{"location":"how-it-works/features/security/iam-access-analyzer/","title":"IAM Access Analyzer","text":""},{"location":"how-it-works/features/security/iam-access-analyzer/#overview","title":"Overview","text":"<p>Access Analyzer analyzes the resource-based policies that are applied to AWS resources in the  Region where you enabled Access Analyzer. Only resource-based policies are analyzed. </p> <p>Supported resource types:</p> <ul> <li> Amazon Simple Storage Service buckets</li> <li> AWS Identity and Access Management roles</li> <li> AWS Key Management Service keys</li> <li> AWS Lambda functions and layers</li> <li> Amazon Simple Queue Service queues</li> <li> AWS Secrets Manager secrets</li> </ul> <p></p> Figure: AWS IAM access analysis features. (Source: AWS,   \"How it works - monitoring external access to resources\", AWS Documentation, accessed June 11th 2021)."},{"location":"how-it-works/features/security/iam-access-analyzer/#aws-organizations","title":"AWS Organizations","text":"<p>CONSIDERATION: AWS Organization integration</p> <p>In order to enable AccessAnalyzer with the Organization at the zone of of trust in the Security account, this account needs to be set as a delegated administrator. </p> <p>Such step cannot be performed by Terraform yet so it was set up manually as described below: https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-settings.html</p> <p>If you're configuring AWS IAM Access Analyzer in your AWS Organizations management account,  you can add a member account in the organization as the delegated administrator to manage  Access Analyzer for your organization. The delegated administrator has permissions to create  and manage analyzers with the organization as the zone of trust. Only the management account  can add a delegated administrator.</p>"},{"location":"how-it-works/features/security/iam-access-analyzer/#reference-architecture-implementation-code","title":"Reference Architecture implementation code","text":"<p>Reference Architecture Code: le-tf-infra-aws/security/security-base/iam_access_analizer.tf</p> <p> <pre><code>resource \"aws_accessanalyzer_analyzer\" \"default\" {\n    analyzer_name = \"ConsoleAnalyzer-bc3bc4d6-09cb-XXXX-XXXX-XXXXXXXXXX\"\n    type          = \"ORGANIZATION\"\n    tags          = local.tags\n}\n</code></pre></p>"},{"location":"how-it-works/features/security/iam-access-analyzer/#aws-web-console","title":"AWS Web Console","text":"Figure: AWS Web Console screenshot. (Source: binbash, \"IAM access analyzer service\", accessed June 11th 2021)."},{"location":"how-it-works/features/security/overview/","title":"Overview","text":""},{"location":"how-it-works/features/security/overview/#aws-reference-architecture-security-features","title":"AWS Reference Architecture security features","text":"VPN <ul> <li> VPN</li> </ul> Services <ul> <li> Services</li> </ul> Certificates <ul> <li> Certificates</li> </ul> Audit <ul> <li> CloudTrail</li> </ul> Monitoring <ul> <li> IAM Access Analyzer</li> </ul>"},{"location":"how-it-works/features/security/services/","title":"AWS Security &amp; Compliance Services","text":"<p>Security Directives</p> <p>There will not be any instance port or service port open to general access, unless justified by business reasons,  and we\u2019ll take alternative means of security to mitigate any possible risk.</p> <p>Every account will have a set of active services that will allow for administrative users (SecOps) to audit all  actions and track potentially dangerous behavior. All services will be enabled via IaC (Terraform or SDK and tracked in the proper git repo).</p> <p>AWS Managed Security Services</p> <ul> <li> AWS IAM Access Analyzer: Generates comprehensive findings that identify resources policies for public or      cross-account accessibility, monitors and helps you refine permissions. Provides the highest levels of security assurance.</li> <li> AWS Config: Tracks changes made to AWS resources over time, making possible to return to a previous state.      Monitors and records your AWS resource configurations and allows you to automate the evaluation of recorded       configurations against desired compliance rule set. Adds accountability factor.</li> <li> AWS Cloudtrail: Stores logs over all calls made to AWS APIs, coming from web console, command line or any      other. Allowing us to monitor it via CW Dashboards and notifications.</li> <li> AWS VPC Flow Logs: Enables us to examine individual Network Interfaces logs, to address network issues and      also monitor suspicious behavior.</li> <li> AWS Web Application Firewall: Optional but if not used, it is recommended that a similar service is used,      such as Cloudflare. When paired to an Application Load Balancer or Cloudfront distribution, it checks incoming       requests to detect and block OWASP Top10 attacks, such as SQL injection, XSS and others. </li> <li> AWS Inspector:  Is an automated security assessment service that helps improve the security and compliance      of infrastructure and applications deployed on AWS. </li> <li> AWS Guard Duty: Is a managed threat detection service that      continuously monitors for malicious or unauthorized behavior to help you protect your AWS accounts and       workloads. Detects unusual API calls or potentially unauthorized deployments (possible account compromise)        and potentially compromised instances or reconnaissance by attackers.</li> <li> AWS Security Logs Other access logs from client-facing resources will be stored in the Security account.</li> <li> AWS Firewall Manager Is a security management service which allows you to centrally configure and manage firewall rules across your accounts and applications in AWS Organizations. This service lets you build firewall rules, create security policies, and enforce them in a consistent, hierarchical manner across your entire infrastructure, from a central administrator account.</li> </ul>"},{"location":"how-it-works/features/security/services/#security-layer","title":"Security Layer","text":""},{"location":"how-it-works/features/security/services/#aws-firewall-manager","title":"AWS Firewall Manager","text":"<p>Scenarios</p> <ul> <li> Network Firewall rules: Security administrators will be able to deploy firewall rules for AWS Network Firewall to control traffic leaving and entering your network across accounts and Amazon VPCs, from the Security account.</li> <li> WAF &amp; WAF v2: Your security administrators will able to deploy WAF and WAF v2 rules, and Managed rules for WAF to be used on Application Load Balancers, API Gateways and Amazon CloudFront distributions.</li> <li> Route 53 Resolver DNS Firewall rules: Deploy Route 53 Resolver DNS Firewall rules from the Security account to enforce firewall rules across your organization.</li> <li> Audit Security Groups: You can create policies to set guardrails that define what security groups are allowed/disallowed across your VPCs. AWS Firewall Manager continuously monitors security groups to detect overly permissive rules, and helps improve firewall posture. You can get notifications of accounts and resources that are non-compliant or allow AWS Firewall Manager to take action directly through auto-remediation.</li> <li> Security Groups: Use AWS Firewall Manager to create a common primary security group across your EC2 instances in your VPCs.</li> </ul> <p></p>"},{"location":"how-it-works/features/security/services/#read-more","title":"Read More","text":"<ul> <li> AWS Firewall Manager</li> </ul>"},{"location":"how-it-works/features/security/vpn/","title":"VPN Server","text":""},{"location":"how-it-works/features/security/vpn/#to-securely-and-scalable-privately-access-aws-cross-organization-resources-well-implement-pritunl-vpn-server","title":"To securely and scalable privately access AWS Cross Organization resources we\u2019ll implement Pritunl VPN Server","text":"<p>Security Directives</p> <ol> <li>Private HTTP endpoints for Applications (FrontEnd + APIs), SSH, monitoring &amp; logging (UI / Dashboards) among others. Eg: Jenkins, DroneCI, EFK, Prometheus, Spinnaker, Grafana.</li> <li>K8s API via kubectl private endpoint eg: avoiding emergency K8s API vulnerability patching. </li> <li> <p>Limit exposure: Limit the exposure of the workload to the internet and internal networks by only allowing minimum required access -&gt; Avoiding exposure for Dev/QA/Stg http endpoints</p> <ol> <li>The Pritunl OpenVPN Linux instance is hardened and only runs this VPN solution. All other ports/access is restricted.</li> <li>Each VPN user can be required to use MFA to connect via VPN (as well as strong passwords). This combination makes almost impossible for an outsider to gain access via VPN.</li> <li>Centralized access and audit logs.</li> </ol> </li> </ol> <p></p> Figure: Securing access to a private network with Pritunl diagram. (Source: Pritunl,   \"Accessing a Private Network\", Pritunl documentation v1 Guides, accessed November 17th 2020)."},{"location":"how-it-works/features/security/vpn/#read-more","title":"Read More","text":"<ul> <li> Pritunl - Open Source Enterprise Distributed OpenVPN, IPsec and WireGuard Server Specifications </li> </ul>"},{"location":"how-it-works/features/sso/sso/","title":"AWS SSO","text":""},{"location":"how-it-works/features/sso/sso/#single-sign-on-sso","title":"Single Sign-On (SSO)","text":"<p>JumpCloud will be configured as the Identity Provider (IdP) that we will integrate with AWS SSO in order to grant users access to AWS resources from a centralized service. Users will be able to log in to JumpCloud in order to access AWS accounts, using specific permission sets that will in turn determine what kind of actions they are allowed on AWS resources.</p> <p></p> Figure: AWS Organization with SSO + JumpCloud IdP diagram. (Source: binbash Leverage, \"Leverage Reference Architecture components\", binbash Leverage Doc, accessed January 4th 2022)."},{"location":"how-it-works/features/sso/sso/#sso-strengths","title":"SSO Strengths","text":"<ul> <li> 100% cloud-based</li> <li> Secure directory services</li> <li> Unified device management</li> <li> SSO and user lifecycle management</li> <li> Secure app and server authentication with cloud LDAP</li> <li> Event logging, reporting, and monitoring</li> </ul>"},{"location":"how-it-works/features/sso/sso/#sso-users","title":"SSO Users","text":"<p>Users will be defined in JumpCloud and used for deploying AWS resources with scoped permissions.</p>"},{"location":"how-it-works/features/sso/sso/#sso-groups","title":"SSO Groups","text":"Account / Groups Administrators DevOps FinOps SecurityAuditors Management x x x x <p>Consideration<p>This definition could be fully customized based on the project specific needs</p> </p>"},{"location":"how-it-works/features/sso/sso/#sso-permission-sets-w-account-associations","title":"SSO Permission Sets (w/ Account Associations)","text":"Account / Permission Sets Administrator DevOps FinOps SecurityAuditors Management x x Security x x x Shared x x x Network x x x Apps-DevStg x x x Apps-Prd x x x <p>Considerations</p> <ol> <li>Devops Engineers will assume this permission set through JumpCloud + AWS SSO.</li> <li>Developers could have their specific SSO Group + Permission Set policy association.</li> <li>This definition could be fully customized based on the project specific needs</li> </ol>"},{"location":"how-it-works/features/storage/storage/","title":"Storage","text":"<p>We will review all S3 buckets in the existing account to determine if it\u2019s necessary to copy over to the new account,  evaluate existing bucket policy and tightening permissions to be absolutely minimum required for users and applications. As for EBS volumes, our recommendation is to create all encrypted by default. Overhead created by this process is negligible. </p>"},{"location":"how-it-works/features/storage/storage/#s3-buckets","title":"S3 buckets","text":"<p>Tech specs</p> <ul> <li> Encryption: Yes (by default)</li> <li> Object versioning: TBD per bucket</li> <li> Access logs enabled: TBD per bucket</li> <li> MFA delete: Yes on critical buckets</li> <li> Replication to another region: TBD per bucket</li> </ul> Storage class Designed for Durability (designed for) Availability (designed for) Availability Zones Min storage duration Min billable object size Other considerations S3 Standard Frequently accessed data 99.999999999% 99.99% &gt;= 3 None None None S3 Standard-IA Long-lived, infrequently accessed data 99.999999999% 99.9% &gt;= 3 30 days 128 KB Per GB retrieval fees apply. S3 Intelligent-Tiering Long-lived data with changing or unknown access patterns 99.999999999% 99.9% &gt;= 3 30 days None Monitoring and automation fees per object apply. No retrieval fees. S3 One Zone-IA Long-lived, infrequently accessed, non-critical data 99.999999999% 99.5% 1 30 days 128 KB Per GB retrieval fees apply. Not resilient to the loss of the Availability Zone. S3 Glacier Long-term data archiving with retrieval times ranging from minutes to hours 99.999999999% 99.99% (after you restore objects) &gt;= 3 90 days 40 KB Per GB retrieval fees apply. You must first restore archived objects before you can access them. For more information, see Restoring archived objects. S3 Glacier Deep Archive Archiving rarely accessed data with a default retrieval time of 12 hours 99.999999999% 99.99% (after you restore objects) &gt;= 3 180 days 40 KB Per GB retrieval fees apply. You must first restore archived objects before you can access them. For more information, see Restoring archived objects. RRS (Not recommended) Frequently accessed, non-critical data 99.99% 99.99% &gt;= 3 None None None"},{"location":"how-it-works/features/storage/storage/#ebs-volumes","title":"EBS Volumes","text":"<p>Tech specs</p> <ul> <li> Backups: Periodic EBS snapshots with retention policy</li> <li> Encryption: Yes (by default)</li> <li> Type: SSD (gp2) by default, Throughput Optimized HDD (st1) for some database workloads, if needed.</li> </ul>"},{"location":"how-it-works/features/storage/storage/#read-more","title":"Read more","text":"<p>Reference links</p> <p>Consider the following extra links as reference:</p> <ul> <li> Amazon S3 FAQs</li> <li> Amazon S3 storage classes - Developer Guide</li> <li> Amazon S3 Storage Classes</li> </ul>"},{"location":"how-it-works/infra-as-code-library/","title":"Leverage Infrastructure as Code (IaC) Library","text":""},{"location":"how-it-works/infra-as-code-library/#overview","title":"Overview","text":"<p>A collection of reusable, tested, production-ready E2E infrastructure as code solutions, leveraged by modules written in Terraform, Ansible, Dockerfiles, Helm charts and Makefiles.</p>"},{"location":"how-it-works/infra-as-code-library/#model","title":"Model","text":"<p>Our development model is strongly based on code reusability. </p>"},{"location":"how-it-works/infra-as-code-library/#reusability","title":"Reusability","text":"<p>High level summary of the the code reusability efficiency. </p> <p>Considerations</p> <p> Above detailed <code>%</code> are to be seen as estimates: </p> <ul> <li> AWS PCI-DSS Reference article</li> <li> AWS HIPAA Reference article</li> <li> AWS GDPR Reference article</li> </ul>"},{"location":"how-it-works/infra-as-code-library/#modules","title":"Modules","text":"<p>Infrastructure as Code (IaC) Library development and implementation workflow. </p>"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library-forks/","title":"Leverage Open Source Modules management.","text":"<p>We\u2019ll fork every Infrastructure as Code (IaC) Library dependency repo, why?</p> <p>Grant full governance over the lib repositories</p> <ul> <li> Availability: Because our project resilience and continuity (including the clients) depends on these repositories (via requirement files or imports) and we want and need total control over the repository used as a dependency. NOTE: There could be few exceptions when using official open source modules makes sense, e.g. the ones shared and maintained by Nginx, Weave, Hashiport, etc.</li> <li> Reliability (Avoid unforeseen events): in the event that the original  project becomes discontinued while we are still working or depending on it (the owners, generally individual maintainers of the original repository, might decide to move from github, ansible galaxy, etc. or even close their repo for personal reasons).</li> <li> Stability: Our forks form modules (ansible roles / terraform / dockerfiles, etc.) are always going to be locked to fixed versions for every client so no unexpected behavior will occur.</li> <li> Projects that don't tag versions: having the fork protects us against breaking changes.</li> <li> Write access: to every Leverage library component repository ensuring at all times that we can support, update, maintain, test, customize and release a new version of this component.</li> <li> Centralized Org source of truth: for improved customer experience and keeping dependencies consistently imported from binbash repos at Leverage Github</li> <li> Scope: binbash grants and responds for all these dependencies.</li> <li> Metrics:  Dashboards w/ internal measurements.</li> <li> Automation: We\u2019ll maintain all this workflow cross-tech as standardized and automated as possible, adding any extra validation like testing, security check, etc., if needed -&gt; Leverage dev-tools</li> <li> Licence &amp; Ownership: Since we fork open-source and commercially reusable components w/ MIT and Apache 2.0 license.  We keep full rights to all commercial, modification, distribution, and private use of the code (No Lock-In w/ owners) through forks inside our own Leverage Project repos.  As a result, when time comes, we can make our libs private at any moment if necessary. (for the time being Open Source looks like the best option)</li> </ul> <p>Collaborators considerations</p> <ul> <li>We look forward to have every binbash Leverage repo open sourced favoring the  collaboration of the open source community. </li> <li>Repos that are still private must not be forked by our internal collaborators till we've done a detailed and rigorous review in order to open source them.</li> <li>As a result any person looking forward to use, extend or update Leverage public repos, could also fork them in its personal or company Github account and create an upstream PR to contribute.</li> </ul>"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library-specs/","title":"Tech Specifications","text":"As Code: Hundred of thousands lines of code <p>Written in:</p> <ul> <li> Terraform</li> <li> Groovy (Jenkinsfiles)</li> <li> Ansible</li> <li> Makefiles + Bash </li> <li> Dockerfiles</li> <li> Helm Charts</li> </ul> Stop reinventing the wheel, automated and fully as code <ul> <li> automated (executable from a single source).</li> <li> as code.</li> <li> parameterized<ul> <li>variables</li> <li>input parameters</li> <li>return / output parameters</li> </ul> </li> <li> \"Stop reinventing the wheel\"<ul> <li>avoid re-building the same things more than X times.</li> <li>avoid wasting time.</li> <li>not healthy, not secure and slows us down.</li> </ul> </li> </ul> DoD of a highly reusable, configurable, and composable sub-modules <p>Which will be 100%</p> <ul> <li> modular <ul> <li>equivalent to other programming languages functions - Example for terraform -  https://www.terraform.io/docs/modules/usage.html (but can be propagated for other languages and tools):<ol> <li>inputs, outputs parameters.</li> <li>code reuse (reusable): consider tf modules and sub-modules approach.</li> <li>testable by module / function.<ol> <li>Since TF is oriented to work through 3rd party API calls, then tests are more likely to be  <code>integration tests</code> rather than <code>unit tests</code>. If we don't allow integration for terraform then we   can't work at all.<ol> <li>This has to be analyzed for every language we'll be using and how we implement it (terraform,  cloudformation, ansible, python, bash, docker, kops and k8s kubeclt cmds)</li> </ol> </li> </ol> </li> <li>composition (composable): have multiple functions and use them together<ol> <li>eg: <code>def_add(x,y){return x+y} ; def_sub(x,y){return x-y}; sub(add(3,4), add(7,5))</code></li> </ol> </li> <li>abstraction (abstract away complexity): we have a very complex function but we only expose it's  definition to the API, eg: <code>def_ai_processing(data_set){very complex algorithm here};   ai_processing([our_data_set_here])</code></li> <li>avoid inline blocks: The configuration for some Terraform resources can be defined either as  inline blocks or as separate resources. For example, the aws_route_table    resource allows you to define routes via inline blocks. But by doing so, your module become less    flexible and configurable. Also, if a mix of both, inline blocks and separate resources, is used,    errors may arise in which they conflict and overwrite each other. Therefore, you must use one or     the other (ref: https://blog.gruntwork.io/how-to-create-reusable-infrastructure-with-terraform-modules-25526d65f73d)     As a rule of thumb, when creating a module, separate resources should always be used.</li> <li>use module-relative paths: The catch is that the used file path has to be relative  (since you could run Terraform on many different computers)\u200a\u2014\u200abut relative to what? By default,   Terraform interprets the path as relative to the working directory. That\u2019s a good default for normal    Terraform templates, but it won\u2019t work if the file is part of a module.     To solve this issue, always use a path variable     in file paths.     eg:      <pre><code>resource \"aws_instance\" \"example\" {\n  ami = \"ami-2d39803a\"\n  instance_type = \"t2.micro\"\n  user_data = \"${file(\"${path.module}/user-data.sh\")}\"\n}\n</code></pre></li> </ol> </li> </ul> </li> </ul> Solutions must be versioned <p>So as to be able to manage them as a software product with releases and change log.  This way we'll be able to know which version is currently deployed in a given client and consider upgrading it.</p> Env Parity <p>Promote immutable, versioned infra modules based across envs. </p> Updated <p>Continuously perform updates, additions, and fixes to libraries and modules. </p> Orchestrated in automation <p>We use the leverage-cli for this purpose </p> Proven &amp; Tested <p>Every commit goes through a suite of automated tests to grant code styling and functional testing.</p> <ul> <li> Develop a wrapper/jobs together with specific testing tools in order to grant the modules are working as expected.</li> <li> Ansible: <ul> <li>Testing your ansible roles w/ molecule</li> <li>How to test ansible roles with molecule on ubuntu</li> </ul> </li> <li> Terraform:<ul> <li>gruntwork-io/terratest</li> </ul> </li> </ul> Cost savings by design <p>The architecture for our Library / Code Modules helps an organization to analyze its current IT and DevSecOps Cloud strategy and identify areas where changes could lead to cost savings. For instance, the architecture may show that multiple database systems could be changed so only one product is used, reducing software and support costs. Provides a basis for reuse. The process of architecting can support both the use and creation of reusable assets. Reusable assets are beneficial for an organization, since they can reduce the overall cost of a system and also improve its quality, since a reusable asset has already been proven.</p> Full Code Access &amp; No Lock-In <p>You get access to 100% of the code under Open Source license, if you choose to discontinue the direct support of the binbash Leverage team, you keep rights to all the code.</p> Documented <p>Includes code examples, use cases and thorough documentation, such as README.md,  --help command, doc-string and in line comments.</p> Supported  &amp; Customizable <p>Commercially maintained and supported by binbash.</p>"},{"location":"how-it-works/infra-as-code-library/modules-library-per-tech/","title":"Infrastructure as Code (IaC) library modules","text":""},{"location":"how-it-works/infra-as-code-library/modules-library-per-tech/#open-source-modules-repos","title":"Open Source Modules Repos","text":"Category URLs Ansible Galaxy Roles bb-leverage-ansible-roles-list Dockerfiles bb-leverage-dockerfiles-list Helm Charts bb-leverage-helm-charts-list Terraform Modules bb-leverage-terraform-modules-list"},{"location":"how-it-works/infra-as-code-library/modules-library-per-tech/#open-source-private-modules-repos-via-github-teams","title":"Open Source + Private Modules Repos (via GitHub Teams)","text":"Repositories Details Reference Architecture Most of the AWS resources are here, divided by account. Dockerfiles These are Terraform module we created/imported to build reusable resources / stacks. Ansible Playbooks &amp; Roles Playbooks we use for provisioning servers such as Jenkins, Spinnaker, Vault, and so on. Helm Charts Complementary Jenkins pipelines to clean docker images, unseal Vault, and more. Also SecOps jobs can be found here. Terraform Modules Jenkins pipelines, docker images, and other resources used for load testing."},{"location":"how-it-works/leverage-cli/","title":"Overview","text":""},{"location":"how-it-works/leverage-cli/#leverage-cli","title":"Leverage CLI","text":"<p>Leverage CLI is the tool used to manage and interact with any Leverage project.</p> <p>It transparently handles the most complex and error prone tasks that arise from working with a state-of-the-art infrastructure definition like our Leverage Reference Architecture. Leverage CLI uses a dockerized approach to encapsulate the tools needed to perform such tasks and to free the user from having to deal with the configuration and management of said tools.</p> <p> Leverage CLI Documentation</p>"},{"location":"how-it-works/leverage-cli/#sources","title":"Sources","text":"<ul> <li> leverage-cli github</li> <li> leverage-cli pypi</li> </ul>"},{"location":"how-it-works/leverage-cli/#how-leverage-cli-came-about","title":"How Leverage CLI came about","text":"<p>The multiple tools and technologies required to work with a Leverage project were initially handled through a Makefiles system. Not only to automate and simplify the different tasks, but also to provide a uniform user experience during the management of a project.</p> <p>As a result of more and more features being added and the Leverage Reference Architecture becoming broader and broader, our Makefiles were growing large and becoming too repetitive, and thus, harder to maintain. Also, some limitations and the desire for a more friendly and flexible language than that of Makefiles made evident the need for a new tool to take their place.</p> <p>Python, a language broadly adopted for automation due to its flexibility and a very gentle learning curve seemed ideal. Even more so, Pynt, a package that provides the ability to define and manage tasks as simple Python functions satisfied most of our requirements, and thus, was selected for the job. Some gaps still remained but with minor modifications these were bridged.</p> <p>Gradually, all capabilities originally implemented through Makefiles were migrated to Python as libraries of tasks that still resided within the Leverage Reference Architecture. But soon, the need to deliver these capabilities pre-packaged in a tool instead of embedded in the infrastructure definition became apparent, and were re-implemented in the shape of built-in commands of Leverage CLI.</p> <p>Currently, the core functionality needed to interact with a Leverage project is native to Leverage CLI but a system for custom tasks definition and execution heavily inspired in that of Pynt is retained.</p>"},{"location":"how-it-works/ref-architecture/","title":"Overview","text":""},{"location":"how-it-works/ref-architecture/#how-it-works","title":"How it works","text":"<p>The objective of this document is to explain how the binbash Leverage Reference Architecture for AWS works, in particular how the Reference Architecture model is built and why we need it.</p>"},{"location":"how-it-works/ref-architecture/#overview","title":"Overview","text":"<p>This documentation contains all the guidelines to create binbash  Leverage Reference Architecture for AWS that will be implemented on the  Projects\u2019 AWS infrastructure.</p> <p>We're assuming you've already have in place your AWS Landing Zone based on the First Steps guide. </p> <p>Our Purpose</p> <ul> <li> Democratize advanced technologies: As complex as it may sound, the basic idea behind this design principle is  simple. It is not always possible for a business to maintain a capable in-house IT department while staying up to date. It is entirely feasible to set up your own cloud computing ecosystem from scratch without experience, but that would take a considerable amount of resources; it is definitely not the most efficient way to go. </li> <li> An efficient business-minded way to go is to employ AWS as a service allows organizations to benefit from the advanced technologies integrated into AWS without learning, researching, or creating teams specifically for those technologies.</li> </ul> <p>Info</p> <p>This documentation will provide a detailed reference of the tools and techs used,  the needs they address and how they fit with the multiple practices we will be implementing.</p>"},{"location":"how-it-works/ref-architecture/considerations/","title":"Considerations","text":""},{"location":"how-it-works/ref-architecture/considerations/#important-considerations","title":"Important Considerations","text":"<p>Assumptions</p> <ul> <li> AWS Regions: Multi Region setup \u2192 1ry: us-east-1 (N. Virginia) &amp; 2ry: us-west-2 (Oregon).</li> <li> Repositories &amp; Branching Strategy <ul> <li>DevOps necessary repositories will be created. Consultant will use a trunk-based branching strategy with short-lived feature branches (<code>feature/ID-XXX</code> -&gt; `master), and members from either the Consultant or the Client will be reviewers of every code delivery to said  repositories (at least 1 approver per Pull Request). </li> <li>Infra as code deployments should run from the new <code>feature/ID-XXX</code> or <code>master</code> branch. <code>feature/ID-XXX</code> branch must be merged immediately (ASAP) via PR to the <code>master</code> branch.</li> <li> Consideration: validating that the changes within the code will only affect the desired target resources is the responsibility of the executor (to ensure everything is OK please consider exec after review/approved PR).  </li> </ul> </li> <li> Infra as Code + GitOps <ul> <li>After deployment via IaC (Terraform, Ansible &amp; Helm) all subsequent changes will be performed via versioned controlled code, by modifying the corresponding repository and running the proper IaC Automation execution. </li> <li>All AWS resources will be deployed via Terraform and rarely occasional CloudFormation, Python SDK &amp; AWS CLI when the resource is not defined by Terraform (almost none scenario). All code and scripts will be included in the repository. We'll start the process via Local Workstations. Afterwards full exec automation will be considered via: Github Actions,  ,Gitlab Pipelines or equivalent preferred service. </li> <li> Consideration: Note that any change manually performed will generate inconsistencies on the deployed resources    (which left them out of governance and support scope).</li> </ul> </li> <li> Server OS provisioning: Provisioning via Ansible for resources that need to be provisioned on an OS.</li> <li> Containers Orchestration: Orchestration via Terraform + Helm Charts for resources that need to be      provisioned in Kubernetes (with Docker as preferred container engine).</li> <li> Pre-existing AWS Accounts: All resources will be deployed in several new AWS accounts created inside the Client AWS Organization.      Except for the AWS Legacy Account invitation to the AWS Org and OrganizationAccountAccessRole creation in it,      there will be no intervention whatsoever in Client Pre-existing accounts, unless required by Client      authority and given a specific requirement.</li> </ul> <p>Info</p> <p>We will explore the details of all the relevant Client application stacks, CI/CD processes,  monitoring, security, target service level objective (SLO) and others in a separate document.</p>"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/","title":"Reference Architecture | AWS","text":""},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#reference-architecture","title":"Reference Architecture","text":"<p>Overview</p> <p>Reference Architecture for AWS has been designed under optimal configs for the most popular modern web and mobile applications needs.  Its design is fully based on AWS \u201cWell Architected Framework\u201d.</p> <p>Reusing the Leverage Infrastructure as Code (IaC) Library via Leverage CLI to rapidly implement it.</p> <p>It will solve your entire infrastructure and will grant you complete control of the source code and of course you'll be able to run it without us.</p>"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#structural-concepts","title":"Structural concepts","text":"<p>The Reference Architecture is designed with modularity in mind. A multi-accounts approach is leveraged in order to improve security isolation and resources separation. Furthermore each account infrastructure is divided in smaller units that we call layers. Each layer contains all the required resources and definitions for a specific service or feature to function.</p> <p>Each individual configuration of the Reference Architecture is referred to as a project. A Leverage project is comprised of all the relevant accounts and layers.</p>"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#reference-architecture-model","title":"Reference Architecture Model","text":"<p>Strengths</p> <ul> <li> Faster updates (new features and bug fixes).</li> <li> Better code quality and modules maturity (proven and tested).</li> <li> Supported by binbash, and public modules even by 1000's of top talented Open Source community      contributors.</li> <li> Increase development cost savings.</li> <li> Clients keep full rights to all commercial, modification, distribution, and private use of the code      (No Lock-In) through forks inside their own projects' repositories (open-source and commercially reusable via license MIT and Apache 2.0.</li> </ul>"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#reference-architecture-design","title":"Reference Architecture Design","text":""},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#aws-organizations-multi-account-diagram","title":"AWS Organizations multi-account diagram","text":"Figure: AWS Organization multi-account reference architecture diagram. (Source: binbash Leverage, \"Leverage Reference Architecture components\", binbash Leverage Doc, accessed August 4th 2021)."},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#read-more","title":"Read More","text":"<p>Related articles</p> <ul> <li> Don't get locked up into avoiding lock-in</li> <li> AWS Managed Services</li> </ul>"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/","title":"Reference Architecture | EKS","text":""},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#aws-eks-reference-architecture","title":"AWS EKS Reference Architecture","text":""},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#amazon-eks-resources","title":"Amazon EKS Resources","text":""},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#control-plane-aka-master-nodes","title":"Control Plane (aka. Master Nodes)","text":"<p>This is the primary resource which defines the cluster. We will create one cluster on each account:</p> <ul> <li> apps-devstg/us-east-1/k8s-eks</li> <li> apps-prd/us-east-1/k8s-eks</li> </ul> <p>Important</p> <p>In case of multiple environments hosted in the same cluster as for the one with Apps Dev and Stage, the workload isolation will be achieved through Kubernetes features such as namespaces, network policies, RBAC, and others.</p>"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#data-plane-worker-nodes","title":"Data Plane (Worker Nodes)","text":"<p>We have 3 options here: </p> <ul> <li>Managed Nodes</li> <li>Fargate</li> <li>Fargate Spot </li> </ul> <p>Considerations</p> <p>Each option has its pros and cons with regard to cost, operation complexity, extensibility, customization capabilities, features, and management.</p> <p>In general we implement Managed Nodes. The main reasons being:</p> <ol> <li>They allow a high degree of control in terms of the components we can deploy and the features those components can provide to us. For instance we can run ingress controllers and service mesh, among other very customizable resources.</li> <li>AWS takes care of provisioning and lifecycle management of nodes which is one less task to worry about.</li> <li>Upgrading Kubernetes versions becomes much simpler and quicker to perform.</li> <li>We still can, at any time, start using Fargate and Fargate Spot by simply creating a profile for one or both of them, then we only need to move the workloads that we want to run on Fargate profiles of our choice.</li> </ol>"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#amazon-eks-architecture-diagram","title":"Amazon EKS Architecture Diagram","text":""},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#higl-level-components-diagram","title":"Higl-Level components diagram","text":"Figure: K8S EKS reference architecture components diagram. (Source: binbash Leverage Confluence Doc,   \"Implementation Diagrams\", binbash Leverage Doc, accessed January 5th 2022)."},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#detailed-components-diagram","title":"Detailed components diagram","text":"Figure: K8S EKS reference architecture detailed components diagram. (Source: binbash Leverage Confluence Doc,   \"Implementation Diagrams\", binbash Leverage Doc, accessed January 5th 2022)."},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/","title":"Why Leverage?","text":""},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#the-problem","title":"The problem","text":"Figure: Why Leverage? The problem. (Source: binbash, \"Leverage Presentation: Why you should use Leverage?\", accessed June 15th 2021)."},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#our-solution","title":"Our solution","text":"Figure: Why Leverage? The solution. (Source: binbash, \"Leverage Presentation: Why you should use Leverage?\", accessed June 15th 2021)."},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#the-problem-our-solution-intro-video","title":"The problem &amp; our solution intro video","text":""},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#why-leverage-for-cios-ctos-and-vps-of-engineering","title":"Why Leverage for CIOs, CTOs and VPs of Engineering?","text":"Accelerate development and optimize costs <p>Annual cost savings are a new standard and best practice. Profits are being targeted to business development, regulatory and compliance needs. Resulting in a reduction of pressure on IT and development budgets, granting the opportunity to focus in new features and boost innovation.</p> Modernize applications architecture (loosely coupled and modular) <p>Strategically decompose the monolith into a fine-grained, loosely coupled modular architecture to increase both  development and business agility. When the system architecture is designed to allow teams to test, deploy and change systems without relying on other teams, they require little communication to get the job done.  In other words, both the architecture and the teams are loosely coupled.</p> Innovation - Rapidly adopt new technologies and reduce development time <p>Use Leverage Reference Architecture and for AWS + our libraries to provide a collection of cloud application architecture components to build and deploy faster in the cloud. Building a cloud Landing Zone is complex,  especially since most companies have little or no expertise in this area. And it can take a significant amount  of time to get it right. Leverage a reference architecture to give you an AWS Landing Zone that provides a  consistent and solid \"foundations\" to bootstrap your project in the cloud. The code solution implements the best  AWS Well-Architected Framework practices as well as the battle-tested tech experience and years of knowledge of our contributors.</p> Hours or days, not weeks or months <p>Leverage implements infrastructure as code at all times. We have rolled this out using Terraform, and has been fully proven in AWS and other Terraform providers that are part of our reference architecture like Kubernetes, Helm and Hashicorp Vault. By using the <code>Leverage CLI</code>, our binary will help you to quickly bootstrap your AWS Landing Zone in a matter of hours (or at most a few days).</p> It's not just a pile of scripts <p>It's not just another layer of untested, one time and stand-alone developed scripts. The code is modularized and well designed under best practices, our <code>Leverage CLI</code> has both unit and integration tests. While our Terraform code has been extensively E2E tested. Moreover, 100% of the code is yours (to modify, extend, reuse, etc), with no vendor locking and vendor licensing fees. We use the MIT license, so you can take the code, modify it and use it as your private code. All we ask in return is a friendly greeting and that (if possible) consider contributing to binbash Leverage project. Implement Leverage yourself or we  can deploy it for you!</p> DevOps culture and methodologies <p>Team agility and continuous improvements based on feedback loops are some of the main drivers of cloud adoption, and IAC's goal of reducing the frequency of deployment of both infrastructure and applications are some of the most important aspects of DevOps practices. We continue to apply these methodologies to achieve a DevOps first culture. We have experienced and demonstrated their potential and have practiced them in dozens of projects over the past 5 years. The Leverage reference architecture for AWS combines a set of application best practices, technology patterns and a common CI/CD deployment approach through <code>Leverage CLI</code> for all your application environments. As a result, we are pursuing a world-class software delivery performance through optimized collaboration, communication, reliability, stability, scalability and security at ever-decreasing cost and effort.</p> Repeatable, composable and extensible immutable infrastructure <p>The best high-performance development teams create and recreate their development and production environments using infrastructure as code (IaC) as part of their daily development processes. The <code>Leverage CLI</code> allows to build repeatable and immutable infrastructure. So your cloud development, staging and production environments will consistently be the same.</p>"},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#why-leverage-for-devops-engineers-cloud-architects-and-software-engineers","title":"Why Leverage for DevOps Engineers, Cloud Architects and Software Engineers?","text":"Provisioning infrastructure as code (Iac) <p>Instead of manually provisioning infrastructure, the real benefits of cloud adoption come from orchestrating infrastructure through code. However, this is really challenging to achieve, there are literally thousands of tiny things and configs to consider and they all seem to take forever. Our experience is that it can take teams up to 24 months to achieve a desired infra state in AWS. By using Leverage you could get your AWS Landing-Zone in few weeks, or your entire AWS Well-Architected based cloud solution within 1 to 3 months (depending on your project complexity needs).</p> We've done it before (don't reinvent the wheel) <p>Often, development teams have similar and recurring requests such as: iam, networking, security, storage,  databases, compute and secret management, etc. binbash Leverage has been proven in dozen of project to create software-defined (IaC) AWS environments.</p> Best practices baked in the code <p>Leverage provides IaC reference architecture for AWS hosted applications infrastructure. This is baked into the code as a combination of the best AWS Well-Architected framework practices and the experience of having successfully orchestrated many customers to AWS cloud.</p> On-demand infra deployment <p>Leverage provides your DevOps, Cloud, SRE and Development teams with the ability to provision on-demand infrastructure, granting that it will meet the rigorous security requirements of modern cloud native best practices.  It fully implements AWS Well-Architected Framework (WAF) and best DevOps practices, including practices, including collaboration, version control, CI/CD, continuous testing, cloud infrastructure and losely couple architectures.</p> Easier to support and maintain <p>Leverage IaC approach significantly reduce your AWS infra deployment, config and support burden and reduce risk.  Our code backed provisioning has been rigorously tested many times, eliminating the possibility of manual errors.  Because the entire infrastructure is deployed from the same proven code, the consistency your cloud environments will simplify your setup and maintenance. Use the versioned code to iterate and improve, extend or compose your internal processes as your cloud operating model evolves.</p> There is no vendor lock-in. You own the solution <p>With Leverage you own 100% of the code with no lock-in clauses. If you choose to leave Leverage, you will still  have your entire AWS cloud infrastructure that you can access and manage. If you drop Leverage, you will still have your entire cloud native infrastructure code (Terraform, Helm, Ansible, Python). It\u2019s 100% Open Source on GitHub and is free to use with no strings attached under MIT license  (no licensing fees), and you are free to commercially and privately use, distribute and modify.</p> Consistent environments (Dev/prod parity) <p>Keep development, staging, and production cloud envs parity. Infrastructure as code allow us to define and provisioning all infrastructure components (think networks, load  balancers, databases, security, compute and storage, etc.) using code. Leverage uses Terraform as the IaC language, to deploy and setup all the AWS, Kubernetes and Hashicorp Vault resources (it has support for multiple cloud and technology providers). Backed by code, your cloud environments are built exactly the identical way all the time.  Finally, this will result in no differences between development, staging and production.</p> Development in production like envs <p>IaC allows your development team to deploy and test the AWS infrastructure as if it were application code.  Your development is always done in production-like environments. Provision your cloud test and sandbox  environments on demand and tear them down when all your testing is complete. Leverage takes all the pain out of maintaining production-like environments, with stable infra releases. It eliminates the unpredictability of wondering if what actually worked in your development envs will work in production.</p>"},{"location":"how-it-works/ref-architecture/general-concepts/why-tech-stack/","title":"Why our stack?","text":""},{"location":"how-it-works/ref-architecture/general-concepts/why-tech-stack/#why-we-choose-our-tech-stack","title":"Why we choose our tech stack","text":"Why AWS\u2753 <p>Amazon Web Services (AWS) is the world\u2019s most comprehensive and broadly adopted  cloud platform, offering over 200 fully featured services from data centers globally. Millions of customers\u2014including the fastest-growing startups, largest enterprises, and leading government agencies\u2014are using AWS to lower costs, become more agile, and innovate faster.</p> <p>Build, Deploy, and Manage Websites, Apps or Processes On AWS' Secure, Reliable Network. AWS is Secure, Reliable, Scalable Services. HIPAA Compliant. Easily Manage Clusters. Global Infrastructure. Highly Scalable.</p> <p> Read More: What is AWS</p> Why WAF (Well Architected Framework)\u2753 <p>AWS Well-Architected helps cloud architects to build secure, high-performing, resilient, and efficient infrastructure for their applications and workloads. Based on five pillars \u2014 operational excellence, security, reliability, performance efficiency, and cost optimization \u2014 AWS Well-Architected provides a consistent approach for customers and partners to evaluate architectures, and implement designs that can scale over time.</p> <p> Read More: AWS Well-architected</p> Why Infra as Code (IaC) &amp; Terraform\u2753 <ul> <li> <p> Confidence: A change breaks the env? Just roll it back. Still not working? Build a whole new env with a few keystrokes. IaC enables this.</p> </li> <li> <p> Repeatability: Allows your infra to be automatically instantiated, making it easy to build multiple identical envs.</p> </li> <li> <p> Troubleshooting: Check source control and see exactly what changed in the env.  As long as you are diligent and don\u2019t make manual envs changes, then IaC can be a game changer.</p> </li> <li> <p> DR: Require the ability to set up an alternate env in a different DC or Region. IaC makes this a much more manageable prospect.</p> </li> <li> <p> Auditability: You will need to be able to audit both changes and access to an env, IaC gives you this right out of the box.</p> </li> <li> <p> Visibility: As an env expands over time, is challenging to tell what has been provisioned. In the #cloud this can be a huge #cost issue. IaC allows tracking your resources.</p> </li> <li> <p> Portability: Some IaC techs are #multicloud. Also, translating #Terraform from one cloud provider to another is considerably more simple than recreating your entire envs in a cloud-specific tool.</p> </li> <li> <p> Security: See history of changes to your SG rules along with commit messages can do wonders for being confident about the security configs of your envs.</p> </li> </ul> <p>Terraform allows to codify your application infrastructure, reduce human error and  increase automation by provisioning infrastructure as code. With TF we can manage infrastructure across clouds and provision infrastructure  across 300+ public clouds and services using a single workflow. Moreover it helps to create reproducible infrastructure and provision consistent testing, staging, and production environments with the same configuration.</p> <p>Terraform has everything we expect from a IaC framework: open source, cloud-agnostic provisioning tool that supported immutable infrastructure, a declarative language, and a client-only architecture.</p> <p> Read More</p> <ul> <li>Why Infrastructure as Code</li> <li>Why Terraform by Gruntwork</li> </ul> Why Organizations\u2753 <p>AWS Organizations helps you centrally manage and govern your environment as you grow and scale your AWS resources. Using AWS Organizations, you can programmatically create new AWS accounts and allocate resources, group accounts to organize your workflows, apply policies to accounts or groups for governance, and simplify billing by using a  single payment method for all of your accounts.</p> <p> Read More </p> <ul> <li>How it works: AWS Organizations</li> <li>AWS Organizations</li> </ul> Why AIM and roles\u2753 <p>AWS Identity and Access Management (IAM) enables you to manage access to AWS services and resources securely. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources.</p> <ul> <li>Integration and Fine-grained access control with almost every AWS service and its resources.</li> <li>Multi-factor authentication for highly privileged users.</li> <li>Analyze, monitor and audit access.</li> </ul> <p> Read More </p> <ul> <li>How it works: AWS IAM</li> <li>AWS Identity and Access Management (IAM)</li> </ul> Security | Why Web Application Firewall (WAF), Cloud Trail, Config, Guarduty\u2753 <p>Raise your security posture with AWS infrastructure and services. Using AWS, you will gain the control and confidence you need to securely run your business with the most flexible and secure cloud computing environment available today. As an AWS customer, you will benefit from AWS data centers and a network architected to protect your information, identities, applications, and devices. With AWS, you can improve your ability to meet core security and compliance requirements, such as data locality, protection, and confidentiality with our comprehensive services and features.</p> <p> Read More </p> <ul> <li>How it works: AWS Security</li> <li>AWS Cloud Security</li> </ul> Why VPC\u2753 <p>Amazon Virtual Private Cloud (Amazon VPC) is a service that lets you launch AWS resources in a logically isolated virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways. You can use both IPv4 and IPv6 for most resources in your virtual private cloud, helping to ensure secure and easy access to resources and applications.</p> <p> Read More </p> <ul> <li>How it works: AWS Networking</li> <li>AWS Virtual Private Cloud</li> </ul> Why Kubernetes (K8s) &amp; AWS EKS\u2753 <p>Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications. It groups containers that make up an application into logical units for easy management and discovery. Kubernetes builds upon 15 years of experience of running production workloads at Google, combined with best-of-breed ideas and practices from the community.</p> <p>Amazon Elastic Kubernetes Service (Amazon EKS) gives you the flexibility to start, run, and scale Kubernetes applications in the AWS cloud or on-premises. Amazon EKS helps you provide highly-available and secure clusters and automates key tasks such as patching, node provisioning, and updates. Customers such as Intel, Snap, Intuit, GoDaddy, and Autodesk trust EKS to run their most sensitive and mission critical applications.</p> <p>EKS runs upstream Kubernetes and is certified Kubernetes conformant for a predictable experience. You can easily migrate any standard Kubernetes application to EKS without  needing to refactor your code.</p> <p> Read More </p> <ul> <li>How it works: AWS EKS</li> <li>AWS EKS</li> <li>Kubernetes</li> </ul> Why S3\u2753 <p>Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance.  This means customers of all sizes and industries can use it to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics. Amazon S3 provides easy-to-use management features so you can organize your data and configure finely-tuned access controls to meet your specific business, organizational, and compliance requirements. Amazon S3 is designed for 99.999999999% (11 9's) of durability, and stores data for millions of applications for companies all around the world.</p> <p> Read More </p> <ul> <li>How it works: AWS Storage</li> <li>AWS S3</li> </ul> Why RDS\u2753 <p>Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational database in the cloud. It provides cost-efficient and resizable capacity while automating time-consuming administration tasks such as hardware provisioning, database setup, patching and backups. It frees you to focus on your applications so you can give them the fast performance, high availability, security and compatibility they need.</p> <p>Amazon RDS is available on several database instance types - optimized for memory, performance or I/O - and provides you with six familiar database engines to choose from, including Amazon Aurora, PostgreSQL, MySQL, MariaDB, Oracle Database, and SQL Server. You can use the AWS Database Migration Service to easily migrate or replicate your existing databases to Amazon RDS.</p> <p> Read More </p> <ul> <li>How it works: AWS Databases</li> <li>AWS RDS</li> </ul> Why Hashicorp Vault\u2753 <p>As many organizations migrate to the public cloud, a major concern has been how to best secure data, preventing it from unauthorized access or exfiltration.</p> <p>Deploying a product like HashiCorp Vault gives you better control of your sensitive credentials and helps you meet cloud security standards.</p> <p>HashiCorp Vault is designed to help organizations manage access to secrets and transmit them safely within an organization. Secrets are defined as any form of sensitive credentials that need to be tightly controlled and monitored and can be used to unlock sensitive information. Secrets could be in the form of passwords, API keys, SSH keys, RSA tokens, or OTP.</p> <p>HashiCorp Vault makes it very easy to control and manage access by providing you with a unilateral interface to manage every secret in your infrastructure. Not only  that, you can also create detailed audit logs and keep track of who accessed what.</p> <p>Manage Secrets and Protect Sensitive Data. Secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets and other sensitive data using a UI, CLI, or HTTP API.</p> <p> Read More </p> <ul> <li>How it works: Secrets</li> <li>Hashicorp Vault Project</li> </ul>"},{"location":"user-guide/","title":"Pre-requisites","text":""},{"location":"user-guide/#overview","title":"Overview","text":""},{"location":"user-guide/#pre-requisites","title":"Pre-requisites","text":"<p>Local env pre-required packages</p> <ul> <li> Docker engine <code>&gt;= 20.x.y</code>(check via <code>docker --version</code>)</li> <li> Python <code>&gt;= 3.8</code> (check via <code>python3 --version</code> || <code>python3.8 --version</code>)</li> <li> leverage cli <code>&gt;= 1.0.0</code> (check via <code>leverage --version</code>)`</li> </ul>"},{"location":"user-guide/#configurations-workflow","title":"Configurations &amp; Workflow","text":"<ul> <li> le-tf-infra-aws</li> <li> le-tf-vault</li> <li> le-ansible-infra</li> </ul>"},{"location":"user-guide/features/features-overview/","title":"Overview","text":""},{"location":"user-guide/features/features-overview/#aws-reference-architecture-features","title":"AWS Reference Architecture features","text":"Governance | AWS Organizations <ul> <li> AWS Organizations Initialization</li> <li> Invite pre-exiting accounts to AWS Organizations</li> </ul> Identity Management <ul> <li> GPG Keys</li> <li> Identities</li> <li> AWS Credentials</li> <li> Hashicorp Vault Credentials</li> </ul> Single Sign-On (SSO) <ul> <li> AWS SSO + Jumpcloud IdP</li> </ul> Cost Monitoring &amp; Optimization <ul> <li> Costs</li> </ul> Security <ul> <li> Security Services</li> <li> VPN | Pritunl</li> </ul> Networking | VPC, TGW, NFW, DNS and NACLs <ul> <li> VPC Addressing</li> <li> VPC Peering</li> <li> DNS</li> </ul> Secrets Management <ul> <li> Secrets</li> </ul> Compute <ul> <li> Compute</li> <li> K8s EKS</li> <li> K8s Kops</li> <li> Serverless</li> </ul> Databases <ul> <li> Databases</li> <li> RDS MySql</li> <li> RDS Postgres</li> </ul> Storage <ul> <li> Storage</li> </ul> Content Delivery Network (CDN) <ul> <li> AWS CloudFront</li> </ul> CI/CD (Continuous Integration / Continuous Delivery) <ul> <li> CI/CD</li> </ul> Monitoring | Metrics, Logs, APM and Tracing <ul> <li> Monitoring</li> <li> Metrics</li> <li> Logs</li> <li> Tracing</li> <li> APM</li> </ul> Reliability <ul> <li> Bakcups</li> <li> Health-Checks</li> <li> Disaster Recovery</li> </ul>"},{"location":"user-guide/features/compute/k8s-kops/","title":"AWS Kubernetes Kops Cluster","text":""},{"location":"user-guide/features/compute/k8s-kops/#kops-pre-requisites","title":"Kops Pre-requisites","text":"<p>Important consideration</p> <p>K8s clusters provisioned by Kops have a number of resources that need to be available before the cluster is created. These are Kops pre-requisites and they are defined in the <code>1-prerequisites</code> directory which includes all Terraform files used to create/modify these resources.</p> <p> The current code has been fully tested with the AWS VPC Network Module</p> <p>OS pre-req packages</p> <p>Ref Link: https://github.com/kubernetes/kops/blob/master/docs/install.md)</p> <ul> <li>kops &gt;= 1.14.0 <pre><code>\u2570\u2500\u25cb kops version                                                                                      \nVersion 1.15.0 (git-9992b4055)\n</code></pre></li> <li>kubectl &gt;= 1.14.0 <pre><code>\u2570\u2500\u25cb kubectl version --client\n+ kubectl version --client\nClient Version: version.Info{Major:\"1\", Minor:\"14\", GitVersion:\"v1.14.0\", GitCommit:\"641856db18352033a0d96dbc99153fa3b27298e5\", GitTreeState:\"clean\", BuildDate:\"2019-03-25T15:53:57Z\", GoVersion:\"go1.12.1\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n</code></pre></li> <li>terraform &gt;= 0.12.0 <pre><code>\u2570\u2500\u25cb terraform version\nTerraform v0.12.24\n</code></pre></li> <li>NOTE1: Regarding Terraform versions please also consider https://github.com/binbashar/bb-devops-tf-aws-kops#todo</li> <li> <p>NOTE2: These dependencies will me mostly covered via <code>Makefile</code> w/ terraform dockerized cmds (https://hub.docker.com/repository/docker/binbash/terraform-awscli)</p> </li> <li> <p>jq &gt;= 1.5.0 <pre><code>\u2570\u2500\u25cb jq --version\njq-1.5-1-a5b5cbe\n</code></pre></p> </li> </ul>"},{"location":"user-guide/features/compute/k8s-kops/#resulting-solutions-architecture","title":"Resulting Solutions Architecture","text":"Figure: AWS K8s Kops architecture diagram (just as reference)."},{"location":"user-guide/features/compute/k8s-kops/#why-this-workflow","title":"Why this workflow","text":"<p>The workflow follows the same approach that is used to manage other terraform resources in your AWS accounts. E.g. network, identities, and so on.</p> <p>So we'll use existing AWS resources to create a <code>cluster-template.yaml</code> containing all the resource IDs that Kops needs to create a Kubernetes cluster.</p> <p>Why not directly use Kops CLI to create the K8s cluster as well as the VPC and its other dependencies?</p> <ol> <li> <p>While this is a valid approach, we want to manage all these building blocks independently and be able to fully customize any AWS component without having to alter our Kubernetes cluster definitions and vice-versa.</p> </li> <li> <p>This is a fully declarative coding style approach to manage your infrastructure so being able to declare the state of our cluster in YAML files fits 100% as code &amp; GitOps based approach.</p> </li> </ol> <p></p> Figure: [Workflow diagram](https://medium.com/bench-engineering/deploying-kubernetes-clusters-with-kops-and-terraform-832b89250e8e)."},{"location":"user-guide/features/compute/k8s-kops/#kops-cluster-management","title":"Kops Cluster Management","text":"<p>The <code>2-kops</code> directory includes helper scripts and Terraform files in order to template our Kubernetes cluster definition. The idea is to use our Terraform outputs from <code>1-prerequisites</code> to construct a cluster definition.</p>"},{"location":"user-guide/features/compute/k8s-kops/#overview","title":"Overview","text":"<p>Cluster Management via Kops is typically carried out through the kops CLI. In this case, we use a <code>2-kops</code> directory that contains a Makefile, Terraform files and other helper scripts that reinforce the workflow we use to create/update/delete the cluster.</p>"},{"location":"user-guide/features/compute/k8s-kops/#workflow","title":"Workflow","text":"<p>This workflow is a little different to the typical Terraform workflows we use. The full workflow goes as follows:</p> <p>Cluster: Creation &amp; Update</p> <ol> <li>Modify files under <code>1-prerequisites</code></li> <li>Main files to update probably are <code>locals.tf</code> and <code>outputs.tf</code></li> <li>Mostly before the cluster is created but could be needed afterward</li> <li>Modify <code>cluster-template.yml</code> under <code>2-kops</code> folder</li> <li>E.g. to add or remove instance groups, upgrade k8s version, etc</li> <li>At <code>2-kops/</code> context run <code>make cluster-update</code> will follow the steps below</li> <li>Get Terraform outputs from <code>1-prerequisites</code></li> <li>Generate a Kops cluster manifest -- it uses <code>cluster-template.yml</code> as a template and the outputs from the point above as replacement values</li> <li>Update Kops state -- it uses the generated Kops cluster manifest in previous point (<code>cluster.yml</code>)</li> <li>Generate Kops Terraform file (<code>kubernetes.tf</code>) -- this file represents the changes that Kops needs to apply on the cloud provider.</li> <li>Run <code>make plan</code></li> <li>To preview any infrastructure changes that Terraform will make.</li> <li>If desired we could submit a PR, allowing you and the rest of the team to understand and review what changes would    be made to the Kubernetes cluster before executing <code>make apply</code> (<code>terraform apply</code>). This brings the huge benefit    of treating changes to our Kubernetes clusters with a GitOps oriented approach, basically like we treat any other    code &amp; infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, integration    testing, replicate environments and so on.</li> <li>Run <code>make apply</code></li> <li>To apply those infrastructure changes on AWS.</li> <li>Run <code>make cluster-rolling-update</code></li> <li>To determine if Kops needs to trigger some changes to happen right now (dry run)</li> <li>These are usually changes to the EC2 instances that won't get reflected as they depend on the autoscaling</li> <li>Run <code>make cluster-rolling-update-yes</code></li> <li>To actually make any changes to the cluster masters/nodes happen</li> </ol> <p>Cluster: Deletion</p> <p>To clean-up any resources created for your K8s cluster, you should run:</p> <ol> <li>At <code>2-kops</code> folder context run <code>make destroy</code></li> <li>This will execute a <code>terraform destroy</code> of all the <code>kubernets.tf</code> declared AWS resources.</li> <li>At <code>2-kops</code> folder context run <code>cluster-destroy</code></li> <li>Will run Kops <code>destroy cluster</code> -- only dry run, no changes will be applied</li> <li>Exec <code>cluster-destroy-yes</code><ul> <li>Kops will effectively destroy all the remaining cluster resources.</li> </ul> </li> <li>Finally if at <code>1-prerequisites</code> exec <code>make destroy</code><ul> <li>This will remove Kops state S3 bucket + any other extra resources you've provisioned for your cluster.</li> </ul> </li> </ol>"},{"location":"user-guide/features/compute/k8s-kops/#typical-workflow","title":"Typical Workflow","text":"<p>The workflow may look complicated at first but generally it boils down to these simplified steps: 1. Modify <code>cluster-template.yml</code> 2. Run <code>make cluster-update</code> 3. Run <code>make apply</code> 4. Run <code>make cluster-rolling-update-yes</code></p> <p>What about persistent and stateful K8s resources?</p> <p>This approach will work better the more stateless your Kubernetes workloads are. Treating Kubernetes clusters as ephemeral and replaceable infrastructure requires to consider not to use persistent volumes or the drawback of difficulties when running workloads such as databases on K8s. We feel pretty confident that we can recreate our workloads by applying each of our service definitions, charts and manifests to a given Kubernetes cluster as long as we keep the persistent storage separately on AWS RDS, DynamoDB, EFS and so on. In terms of the etcd state persistency, Kops already provisions the etcd volumes (AWS EBS) independently to the master instances they get attached to. This helps to persist the etcd state after rolling update your master nodes without any user intervention. Moreover simplifying volume backups via EBS Snapshots (consider https://github.com/binbashar/terraform-aws-backup-by-tags). We also use a very valuable backup tool named Velero (formerly Heptio Ark - https://github.com/vmware-tanzu/velero) to o back up and restore our Kubernetes cluster resources and persistent volumes.</p> <p>TODO</p> <ol> <li>IMPORTANT: Kops terraform output (<code>kops update cluster --target terraform</code>) is still generated for Terraform <code>0.11.x</code>       (https://github.com/kubernetes/kops/issues/7052) we'll take care of the migration when <code>tf-0.12</code> gets fully supported.</li> <li>Create a binbash Leverage public Confluence Wiki entry detailing some more info about etcd, calico and k8s versions compatibilities</li> </ol>"},{"location":"user-guide/features/costs/costs/","title":"Cost Management Layer","text":"<p>How it works</p> <p> documentation: Costs</p>"},{"location":"user-guide/features/costs/costs/#user-guide","title":"User guide","text":"<p>TODO</p>"},{"location":"user-guide/features/costs/costs/#next-steps","title":"Next Steps","text":"<p>TODO</p>"},{"location":"user-guide/features/identities/credentials-vault/","title":"Hashicorp Vault credentials","text":""},{"location":"user-guide/features/identities/credentials-vault/#hashicorp-vault-private-api-endpoint","title":"Hashicorp Vault private API endpoint","text":"<p>If you are on HCP, you can get this from the Admin UI. Otherwise, it will depend on how you set up DNS, TLS and port settings for your self-hosted installation. We always favours a private endpoint deployment only accessible from the VPN.</p>"},{"location":"user-guide/features/identities/credentials-vault/#aws-self-hosted-vault-instance-endpoint","title":"AWS Self Hosted Vault Instance Endpoint","text":"<p><code>vault_address = \"https://vault.aws.binbash.com.ar:8200\"</code></p>"},{"location":"user-guide/features/identities/credentials-vault/#hcp-vault-private-api-endpoint","title":"HCP Vault private API endpoint","text":"<p><code>vault_address = \"https://bb-le-shared-vault-cluster.private.vault.xxxxxxxxxx.aws.hashicorp.cloud:8200\"</code></p>"},{"location":"user-guide/features/identities/credentials-vault/#hashicorp-vault-token","title":"Hashicorp Vault token","text":"<p>We'll need to setup this Vault auth token in our [/config/common.config] file whenever we run the  Terraform Leverage Reference architecture for:</p> <ul> <li> le-tf-infra-aws</li> <li> le-tf-vault</li> </ul> <p>Vault token generation and authentication</p> <p>Vault token that will be used by Terraform, or vault cli to perform calls to Vault API. During the initial setup, you will have to use a root token. If you are using a self-hosted installation you will get such token after you initialize Vault; if you are using Hashicorp Cloud Platform you can get the token from HCP Admin UI.</p> <p>After the initial setup, and since we recommend integrating Vault to Github for authentication, you will have to follow these steps:</p> <ol> <li>Generate a GitHub Personal Access Token: https://github.com/settings/tokens</li> <li>Click \u201cGenerate new token\u201c</li> <li>Under scopes, only select <code>\"read:org\"</code>, under <code>\"admin:org\"</code></li> </ol>"},{"location":"user-guide/features/identities/credentials-vault/#get-vault-token-from-your-gh-auth-token","title":"Get vault token from your GH auth token","text":"<ol> <li>Run vault cli v\u00eda docker: <code>docker run -it vault:1.7.2 sh</code></li> <li>Vault ENV vars setup ( NOTE: this will change a little bit between AWS self-hosted vs HCP vault deployment)       <pre><code>export VAULT_ADDR=\"https://vault-cluster.private.vault.XXXXXX.aws.hashicorp.cloud:8200\"; \\\nexport VAULT_NAMESPACE=\"admin\"\n</code></pre></li> <li><code>vault login -method=github</code> <pre><code>\u256d\u2500 \uf179 \ue0b1 \uf015 ~ \ue0b0\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\ue0b2 \u2714 \ue0b3 at 14:21:27 \uf017\n\u2570\u2500 docker run -it vault:1.7.2 sh\n/ # export VAULT_ADDR=\"https://bb-le-shared-vault-cluster.private.vault.xxxxxxx.a\nws.hashicorp.cloud:8200\"; export VAULT_NAMESPACE=\"admin\"\n\n/ # vault login -method=github\nGitHub Personal Access Token (will be hidden):\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  s.PNAXXXXXXXXXXXXXXXXXXX.hbtct\ntoken_accessor         KTqKKXXXXXXXXXXXXXXXXXXX.hbtct\ntoken_duration         1h\n...\n</code></pre></li> <li>input your GH personal access token</li> <li>Set the returned <code>token</code> in step 4) into <code>/config/common.config</code> -&gt; <code>vault_token=\"s.PNAXXXXXXXXXXXXXXXXXXX.hbtct\"</code></li> </ol> <p> NOTE: the admin token from https://portal.cloud.hashicorp.com/ will always work but it's use is discouraged for the nominated GH personal access token for security audit trail reasons</p>"},{"location":"user-guide/features/identities/credentials-vault/#hashicorp-vault-ui-auth","title":"Hashicorp Vault UI Auth","text":"<p>You can also manage your Vault instance via its UI. We'll present below screenshot  to show an example using the Github personal access token, one of our supported auth methods. </p> <ol> <li>Generate a GitHub Personal Access Token: https://github.com/settings/tokens</li> <li>Click \u201cGenerate new token\u201c</li> <li>Under scopes, only select <code>\"read:org\"</code>, under <code>\"admin:org\"</code></li> </ol> <p>Open your preferred web browser choose Github auth method and paste your GH token and you'll be able to login to your instance.</p> <p></p> Figure: Vault HCP UI user authentication screen. (Source: binbash Leverage, \"Leverage Vault Reference Architecture auth method\", binbash Leverage Doc, accessed August 5th 2021)."},{"location":"user-guide/features/identities/credentials/","title":"AWS Credentials","text":"<p>Three main sets of credentials are used to interact with the AWS environment. We called them <code>bootstrap</code>, <code>management</code> and <code>security</code> credentials.</p>"},{"location":"user-guide/features/identities/credentials/#bootstrap-credentials","title":"<code>bootstrap</code> credentials","text":"<p>These are temporary credentials used for the initial deployment of the architecture, and they should only be used for this purpose. Once this process is finished, <code>management</code> and <code>security</code> users should be the ones managing the environment.</p>"},{"location":"user-guide/features/identities/credentials/#management-credentials","title":"<code>management</code> credentials","text":"<p><code>management</code> credentials are meant to carry the role of making all important administrative tasks in the environment (e.g. billing adjustments). They should be tied to a physical user in your organization.</p> <p>A user with these credentials will assume the role <code>OrganizationAccountAccessRole</code> when interacting the environment.</p>"},{"location":"user-guide/features/identities/credentials/#security-credentials","title":"<code>security</code> credentials","text":"<p>These credentials are the ones to be used for everyday maintenance and interaction with the environment. Users in the role of DevOps | SecOps | Cloud Engineer in your organization should use these credentials.</p> <p>A user with these credentials will assume te role <code>DevOps</code> when interacting with the environment.</p>"},{"location":"user-guide/features/identities/credentials/#read-more","title":"Read More","text":"<p>AWS reference links</p> <p>Consider the following AWS official links as reference:        </p> <ul> <li> Best practices for managing AWS access keys</li> <li> Cloud.gov | Secret key management - AWS credentials </li> </ul>"},{"location":"user-guide/features/identities/gpg/","title":"GPG keys helper","text":""},{"location":"user-guide/features/identities/gpg/#why-to-use-gpg","title":"Why to use GPG?","text":"<p>By default our Leverage Reference Architectre base-identities layer  approach is to use IAM module  to manage AWS IAM Users credentials with encryption to grant strong security. </p> <p>This module outputs commands and GPG messages which can be decrypted either using command line to get AWS Web Console user's password and user's secret key.   </p> <p>Notes for keybase users</p> <p>If possible, always use GPG encryption to prevent Terraform from keeping unencrypted password and access secret key  in state file.</p> <p>Keybase pre-requisites</p> <p>When <code>gpg_key</code> is specified as <code>keybase:username</code>, make sure that the user public key has already been uploaded to  the Reference Architecture base-identities layer <code>keys</code> folder </p>"},{"location":"user-guide/features/identities/gpg/#how-to-manage-your-gpg-keys","title":"How to manage your GPG keys?","text":"<p>Create a key pair</p> <ul> <li>NOTE: the user for whom this account is being created needs to do this</li> <li>Install <code>gpg</code></li> <li>Run <code>gpg --version</code> to confirm</li> <li>Run <code>gpg --gen-key</code> and provide \"Your Name\" and \"Your Email\" as instructed -- you must also provide a passphrase</li> <li>Run <code>gpg --list-keys</code> to check that your key was generated</li> </ul> <p>Delete a key pair</p> <ul> <li>Run <code>gpg --list-keys</code> to check your key id</li> <li>Run <code>gpg --delete-secret-keys \"Your Name\"</code> to delete your private gpg key</li> <li>Run <code>gpg --delete-key \"Your Name\"</code> to delete your public gpg key</li> </ul> <p>Export your public key</p> <ul> <li>NOTE: the user must have created a key pair before doing this</li> <li>Run <code>gpg --export \"Your Name\" | base64</code></li> <li>Now the user can share her/his public key for creating her/his account</li> </ul> <p>Decrypt your encrypted password</p> <ol> <li>The user should copy the encrypted password from whatever media it was provided to her/him</li> <li>Run <code>echo \"YOUR ENCRYPTED STRING PASSWORD HERE\" | base64 --decode &gt; a_file_with_your_pass</code> <pre><code>$ echo \"wcBMA/ujy1wF7UPcAQgASLL/x8zz7OHIP+EHU7IAZfa1A9qD9ScP5orK1M473WlXVgPrded0iHpyZRwsJRS8Xe38AHZ65O6CnywdR522MbD\\\nRD6Yz+Bfc9NwO316bfSoTpyROXvMi+cfMEcihInHaCIP9YWBaI3eJ6VFdn90g9of00HYehBux7E2VitMuWo+v46W1p8/pw0b0H5qcppnUYYOjjSbjzzAuMF\\\nyNB5M1K8av61bPQPQTxBH3SFaM0B4RNmUl1bHKDIcdESYyIP/PRLQ45Rs5MzGgALIxBy24qdPNjHJQR48/5QV4nzB9qeEe4eWDB4ynSEfLsXggiz8fsbajV\\\ngSLNsdpqP9lYaueFdLgAeR6a+EjvqZfq0hZAgoiymsb4Qtn4A7gmeGmNeDE4td1mVfgzuTZ9zhnSbAYlXNIiM4b0MeX4HrjFkT/Aq+A/rvgBeKhszWD4Ibh\\\nA4PgC+QPiJRb5kQ/mX8DheQfAHJ24iUZk1jh6AsA\" | base64 --decode &gt; encrypted_pass\n</code></pre></li> <li>Run <code>gpg --decrypt a_file_with_your_pass</code> (in the path you've executed 2.) to effectively decrypt your pass using  your gpg key and its passphrase <pre><code>$ gpg --decrypt encrypted_pass\n\nYou need a passphrase to unlock the secret key for\nuser: \"Demo User (AWS org project-user acct gpg key w/ passphrase) &lt;username.lastname@domain.com&gt;\"\n2048-bit RSA key, ID 05ED43DC, created 2019-03-15 (main key ID D64DD59F)\n\ngpg: encrypted with 2048-bit RSA key, ID 05ED43DC, created 2019-03-15\n      \"Demo User (AWS org project-user acct gpg key w/ passphrase) &lt;username.lastname@domain.com&gt;\"\nVi0JA|c%fP*FhL}CE-D7ssp_TVGlf#%\n</code></pre>  Depending on your shell version an extra <code>%</code> character could appear as shown below, you must disregard this character since it's not part of the Initial (one time) AWS Web Console password. </li> <li>If all went well, the decrypted password should be there</li> </ol>"},{"location":"user-guide/features/identities/gpg/#workaround-for-mac-users","title":"Workaround for Mac users","text":"<p>There are some situations where gpg keys generated on Mac don't work properly, generating errors like the following:</p> <pre><code>\u2577\n\u2502 Error: error encrypting password during IAM User Login Profile (user.lastname) creation: Error encrypting Password: error parsing given PGP key: openpgp: unsupported feature: unsupported oid: 2b060104019755010501\n\u2502 \n\u2502   with module.user[\"user.lastname\"].aws_iam_user_login_profile.this[0],\n\u2502   on .terraform/modules/user/modules/iam-user/main.tf line 12, in resource \"aws_iam_user_login_profile\" \"this\":\n\u2502   12: resource \"aws_iam_user_login_profile\" \"this\" {\n\u2502\n</code></pre> <p> Docker is required for this workaround.</p> <p>If you don't have docker on your PC, don't worry. You can easily install it following the steps on the official page.</p> <p>In these cases, execute the following steps:</p> <ol> <li> <p>Run an interactive console into an ubuntu container mounting your gpg directory. <pre><code>docker run --rm -it --mount type=bind,src=/Users/username/.gnupg,dst=/root/.gnupg ubuntu:latest\n</code></pre></p> </li> <li> <p>Inside the container, install required packages. <pre><code>apt update\napt install gnupg\n</code></pre></p> </li> <li> <p>Generate the key as described in previous sections, running <code>gpg --gen-key</code> at the interactive console in the ubuntu container.</p> </li> <li> <p>To fix permissions in your gpg directory, run these commands at the interactive console in the ubuntu container. <pre><code>find ~/.gnupg -type f -exec chmod 600 {} \\;\nfind ~/.gnupg -type d -exec chmod 700 {} \\;\n</code></pre></p> </li> <li> <p>Now you should be able to export the gpg key and decode the password from your mac, running <code>gpg --export \"Your Name\" | base64</code>.</p> </li> <li> <p>Finally, decrypt the password in your mac, executing: <pre><code>echo \"YOUR ENCRYPTED STRING PASSWORD HERE\" | base64 --decode &gt; a_file_with_your_pass\ngpg --decrypt a_file_with_your_pass\n</code></pre></p> </li> </ol>"},{"location":"user-guide/features/identities/identities/","title":"Identity and Access Management (IAM) Layer","text":"<p>How it works</p> <p> documentation: identities</p>"},{"location":"user-guide/features/identities/identities/#user-guide","title":"User guide","text":"<p>Please follow the steps below to orchestrate your <code>base-identities</code> layer 1st in your <code>project-root</code> AWS account and afterwards in your <code>project-security</code> account.</p> <p>IAM user standard creation workflow</p> <ol> <li>Pre-requisite add Public PGP Key following the documentation </li> <li>For steps 3. and 4. consider following  Leverage's Terraform workflow</li> <li>Update (add | remove) your IAM Users associated code and deploy  security/global/base-identities/users.tf<ul> <li> Consider customizing your account Alias and Password Policy</li> </ul> </li> <li>Update (add | remove | edit) your IAM Groups associated code and deploy  security/global/base-identities/groups.tf</li> <li>Get and share the IAM Users AWS Console user id and its OTP associated password from the  <code>make apply</code> outputs<ul> <li> temporally set <code>sensitive   = false</code> to get the encrypted outputs in your prompt output.</li> </ul> </li> <li>Each user will need to decrypt its AWS Console Password, you could share the associated documentation with them.</li> <li>Users must login to the AWS Web Console (https://project-security.signin.aws.amazon.com/console) with their  decrypted password and create new pass </li> <li>Activate MFA for Web Console (Optional but strongly recommended)</li> <li>User should  create his AWS ACCESS KEYS  if needed </li> <li>User could optionally set up\u00a0<code>~/.aws/project/credentials</code>\u00a0+\u00a0<code>~/.aws/project/config</code> following the immediately  below AWS Credentials Setup sub-section</li> <li>To allow users to  Access AWS Organization member account  consider repeating step 3. but for the corresponding member accounts:<ul> <li>shared/global/base-identities</li> <li>apps-devstg/global/base-identities</li> <li>app-prd/global/base-identities</li> </ul> </li> </ol>"},{"location":"user-guide/features/identities/identities/#recommended-post-task","title":"Recommended post-task","text":"<p>Deactivating AWS STS in not in use AWS Region</p> <p>When you activate STS endpoints for a Region, AWS STS can issue temporary credentials to users and roles in your account that make an AWS STS request. Those credentials can then be used in any Region that is enabled by default or is manually enabled. You must activate the Region in the account where the temporary credentials are generated.  It does not matter whether a user is signed into the same account or a different account when they make the request.</p> <p>To activate or deactivate AWS STS in a Region that is enabled by default (console)</p> <ol> <li>Sign in as a root user or an IAM user with permissions to perform IAM administration tasks.</li> <li>Open the IAM console and in the navigation pane choose Account settings.</li> <li>If necessary, expand Security Token Service (STS), find the Region that you want to activate, and then choose  Activate or Deactivate. For Regions that must be enabled, we activate STS automatically when you enable the Region.  After you enable a Region, AWS STS is always active for the Region and you cannot deactivate it. To learn how to  enable a Region, see Managing AWS Regions in the AWS General Reference.</li> </ol> <p> Source |  AWS Documentation IAM User Guide | Activating and deactivating AWS STS in an AWS Region</p> <p></p> <p>Figure: Deactivating AWS STS in not in use AWS Region. Only in used Regions must have STS activated.</p>"},{"location":"user-guide/features/identities/identities/#next-steps","title":"Next Steps","text":"<p> Setup your AWS Credentials</p>"},{"location":"user-guide/features/monitoring/apm/","title":"Application Performance Monitoring (APM) and Business Performance","text":"<p>How it works</p> <p> documentation: APM</p>"},{"location":"user-guide/features/monitoring/apm/#user-guide","title":"User guide","text":"<p>TODO</p>"},{"location":"user-guide/features/network/dns/","title":"Route53 DNS hosted zones","text":"<p>How it works</p> <p> documentation: DNS</p>"},{"location":"user-guide/features/network/dns/#user-guide","title":"User guide","text":"<p>pre-requisites</p> <ul> <li> Review &amp; update configs </li> <li> Review &amp; understand the workflow </li> </ul> <p>Steps</p> <ol> <li>DNS service has to be orchestrated from  <code>/shared/global/base-dns</code> layer  following the standard workflow</li> </ol>"},{"location":"user-guide/features/network/dns/#migrated-aws-route53-hosted-zones-between-aws-accounts","title":"Migrated AWS Route53 Hosted Zones between AWS Accounts","text":"<p>We'll need to setup the Route53 DNS service with an active-active config to avoid any type of service disruption and  downtime. This would then allow the Name Servers of both AWS Accounts to be added to your domain provider (eg: namecheap.com) and have for example: </p> <ul> <li>4 x ns (<code>project-legacy</code> Route53 Account) </li> <li>4 x ns (<code>project-shared</code> Route53 Account) </li> </ul> <p>After the records have propagated and everything looks OK we could remove the <code>project-legacy</code> Route53 ns from your domain provider (eg: namecheap.com) and leave only the of <code>project-shared</code> ones.</p> <p>This official Migrating a hosted zone to a different AWS account - Amazon Route 53 article  explains this procedure step by step:</p> <p>AWS Route53 hosted zone migration steps</p> <ol> <li>Create records in the new hosted zone (bb-shared)</li> <li>Compare records in the old and new hosted zones (bb-legacy)</li> <li>Update the domain registration to use name servers for the new hosted zone (NIC updated to use both  bb-legacy + bb-shared)</li> <li>Wait for DNS resolvers to start using the new hosted zone</li> <li>(Optional) delete the old hosted zone (bb-legacy), remember you'll need to delete the ns delegation  records from your domain registration (NIC) too.</li> </ol>"},{"location":"user-guide/features/network/vpc-addressing/","title":"Network Layer","text":"<p>How it works</p> <p> documentation: Networking</p>"},{"location":"user-guide/features/network/vpc-addressing/#user-guide","title":"User guide","text":"<p>Please follow the steps below to orchestrate your <code>base-network</code> layer, 1st in your <code>project-shared</code> AWS account and afterwards in the necessary member accounts which will host network connected resources (EC2, Lambda, EKS, RDS, ALB, NLB, etc):  </p> <ul> <li> <code>project-apps-devstg</code> account.</li> <li> <code>project-apps-prd</code> account.</li> </ul> <p>Network layer standard creation workflow</p> <ol> <li>Please follow  Leverage's Terraform workflow for each of your accounts.</li> <li>We'll start by <code>project-shared</code> AWS Account Update (add | remove | customize) your VPC associated code before  deploying this layer shared/base-network     Main files<ul> <li> network.tf</li> <li> locals.tf</li> </ul> </li> <li>Repeat for every AWS member Account that needs its own VPC  Access AWS Organization member account  consider repeating step 3. but for the corresponding member accounts.</li> </ol>"},{"location":"user-guide/features/network/vpc-addressing/#next-steps","title":"Next Steps","text":"<p> AWS VPC Peering</p>"},{"location":"user-guide/features/network/vpc-peering/","title":"Diagram: Network Service (cross-account VPC peering)","text":""},{"location":"user-guide/features/network/vpc-peering/#how-it-works","title":"How it works","text":"<p>TODO</p>"},{"location":"user-guide/features/network/vpc-peering/#user-guide","title":"User guide","text":"<p>TODO</p>"},{"location":"user-guide/features/organization/organization-init/","title":"Reference Architecture: Terraform AWS Organizations account baseline","text":"<p>How it works</p> <p> documentation: organization</p> <p> documentation: organization accounts</p>"},{"location":"user-guide/features/organization/organization-init/#user-guide","title":"User guide","text":""},{"location":"user-guide/features/organization/organization-init/#pre-requisites","title":"Pre-requisites","text":"<p>You'll need an email to create and register your AWS Organization Root Account. For this purpose we recommend to avoid using a personal email account.  Instead, whenever possible, it should ideally be associated, with a distribution list email such as a  GSuite Group to ensure the proper admins member's team  (DevOps | SecOps | Cloud Engineering Team) to manage its notifications avoiding a single point of contact (constraint).</p>"},{"location":"user-guide/features/organization/organization-init/#email-setup-example","title":"Email setup example","text":"<p>GSuite Group Email address: <code>aws@domain.com</code> (to which admins / owners belong), and then using the <code>+</code> we generate the aliases automatically implicitly when running Terraform's Leverage code.</p> <ul> <li> <code>aws+security@binbash.com.ar</code></li> <li> <code>aws+shared@binbash.com.ar</code></li> <li> <code>aws+network@binbash.com.ar</code></li> <li> <code>aws+apps-devstg@binbash.com.ar</code></li> <li> <code>aws+apps-prd@binbash.com.ar</code></li> </ul> <p>Reference Code as example</p> <pre><code>#\n# Project Prd: services and resources related to production are placed and\n#  maintained here.\n#\nresource \"aws_organizations_account\" \"apps_prd\" {\nname      = \"apps-prd\"\nemail     = \"aws+apps-prd@doamin.ar\"\nparent_id = aws_organizations_organizational_unit.apps_prd.id\n}\n</code></pre>"},{"location":"user-guide/features/organization/organization-init/#reference-aws-organization-init-workflow","title":"Reference AWS Organization init workflow","text":"<p>Steps for initial AWS Organization setup</p> <ol> <li> <p>Create a brand new AWS Account,  intended to be our AWS Organization Management (root) Account</p> <ul> <li> Name: <code>project_name-management</code>, eg: <code>leverage-management</code></li> <li> MFA: Enable MFA for your root user</li> <li> Billing: review billing setup as pre-requisite to deploy the AWS Org.    At your Management account billing setup    check<ul> <li>Activate IAM User and Role Access to Billing Information</li> <li>If needed Update Alternate Contacts </li> </ul> </li> </ul> </li> <li> <p>Via AWS Web Console: in <code>project_name-management</code> previously created account (eg, name: <code>leverage-management</code>, email: <code>aws@binbash.com.ar</code>) create the <code>mgmt-org-admin</code> IAM user with Admin privileges (admin IAM policy attached), which will be use for the initial AWS Org bootstrapping.</p> <ul> <li> NOTE: After it\u2019s 1st execution only nominated Org admin users will persist in the <code>project-management</code> account.</li> </ul> </li> <li> <p>Via AWS Web Console: in <code>project-management</code> account create <code>mgmt-org-admin</code> IAM user AWS ACCESS KEYS</p> <ul> <li> NOTE: This could be created all in one in the previous step (N\u00ba 2).</li> </ul> <p> Figure: AWS Web Console screenshot. (Source: binbash, \"AWs Organization management account init IAM admin user\", accessed June 16th 2021). </p> <p> Figure: AWS Web Console screenshot. (Source: binbash, \"AWs Organization management account init IAM admin user\", accessed June 16th 2021). </p> </li> <li> <p>Set your IAM credentials in the machine your're going to exec the <code>Leverage CLI</code> (remember this are the <code>mgmt-org-admin</code> temporary user credentials shown in the screenshot immediately above).</p> </li> <li> <p>Set up your Leverage reference architecture configs in order to work with your new account and  `org-mgmt-admin IAM user</p> <ul> <li>common config</li> <li>account configs</li> </ul> </li> <li> <p>Setup and create the terraform remote state for the new AWS Org Management account</p> <ul> <li> terraform remote state config </li> <li> terraform remote state workflow</li> <li> terraform remote state ref code</li> <li> You'll 1st get a local state and then you'll need to move your tf state to s3; validate it and finally delete local state files</li> </ul> </li> <li> <p>The AWS Organization from the Reference Architecture /le-tf-infra-aws/root/global/organizations will be orchestrated using the <code>Leverage CLI</code> following the standard workflow.</p> <ul> <li> the Management account has to be imported into de the code.</li> </ul> </li> <li> <p>Verify your Management account email address in order to invite existing (legacy) AWS accounts to  join your organization.</p> </li> </ol>"},{"location":"user-guide/features/organization/organization-init/#organization-setup-post-steps","title":"Organization setup post-steps","text":"<p>AWS Organization setup post-steps</p> <ol> <li> <p>Following the doc orchestrate v\u00eda the <code>Leverage CLI</code> workflow the Mgmt Account IAM layer (<code>base-identities</code>) with the admin IAM Users (consider this/these users will have admin privileges over the entire AWS Org assuming the <code>OrganizationAccountAccessRole</code>) -&gt; le-tf-infra-aws/root/global/base-identities</p> <ul> <li> The IAM role: <code>OrganizationAccessAccountRole</code> =&gt; does not exist in the initial Management (root) account, this will be created by the code in this layer.</li> </ul> </li> <li> <p>Mgmt account admin user permanent credentials set up =&gt;  setup in your workstation the AWS credentials) for the <code>OrganizationAccountAccessRole</code> IAM role (<code>project_short-root-oaar</code>, eg: <code>bb-root-oaar</code>). Then validate within each initial mgmt account layer that the profile <code>bb-root-oaar</code> is correctly configured  at the below presented config files, as well as any other necessary setup.</p> <ul> <li><code>/config/common.config</code> </li> <li><code>/root/config/account.config</code></li> <li><code>/root/config/backend.config</code></li> </ul> </li> <li> <p>Setup (code and config files) and Orchestrate the <code>/security/global/base-identities</code> layer via <code>Leverage CLI</code> on your security account for consolidated and centralized User Mgmt and access to the AWS Org.    </p> </li> <li> <p>AWS Organizations: invite pre-existing (legacy) accounts</p> </li> <li> <p> Pending to document the debug mode for the mfa script</p> </li> </ol>"},{"location":"user-guide/features/organization/organization-legacy-accounts/","title":"Reference Architecture: Terraform AWS Organizations invite pre-existing (legacy) accounts","text":"<p>How it works</p> <p> documentation: organization</p> <p> documentation: organization accounts</p>"},{"location":"user-guide/features/organization/organization-legacy-accounts/#user-guide","title":"User guide","text":""},{"location":"user-guide/features/organization/organization-legacy-accounts/#pre-requisites","title":"Pre-requisites","text":"<p>You must have your AWS Organization deployed and access to your Management account as  described in the /user-guide/features/organization/organization-init section.</p>"},{"location":"user-guide/features/organization/organization-legacy-accounts/#invite-aws-pre-existing-legacy-accounts-to-your-aws-organization","title":"Invite AWS pre-existing (legacy) accounts to your AWS Organization","text":"<p>AWS Org pre-existing accounts invitation</p> <ol> <li> <p>Via AWS Web Console: from your <code>project-root</code> account  invite the  pre-existing <code>project-legacy</code> (1 to n accounts).</p> </li> <li> <p>Via AWS Web Console: in <code>project-legacy</code> create the <code>OrganizationAccountAccessRole</code> IAM Role with Admin  permissions.</p> <ul> <li> Should follow Creating the OrganizationAccountAccessRole in an invited member account section.</li> </ul> </li> <li> <p>Import your <code>project-legacy</code> account as code.</p> <ul> <li>Update the following variables in <code>./@bin/makefiles/terraform12/Makefile.terraform12-import-rm</code> <pre><code>TF_IMPORT_RESOURCE                := \"aws_organizations_organizational_unit.bbl_apps_devstg\"\nTF_IMPORT_RESOURCE_ID             := \"ou-oz9d-yl3npduj\"\nTF_RM_RESOURCE                    := \"aws_organizations_organizational_unit.bbl_apps_devstg\"\n</code></pre></li> <li>Then from the root context -&gt; <code>cd ./root/organization make import</code></li> <li> TODO THIS STEP MUST BE UPDATED WITH THE <code>Leverage CLI</code> WORKFLOW</li> </ul> </li> </ol>"},{"location":"user-guide/features/security/services/","title":"AWS Security &amp; Compliance Services","text":""},{"location":"user-guide/features/security/services/#how-it-works","title":"How it works","text":"<p>TODO</p>"},{"location":"user-guide/features/security/services/#user-guide","title":"User guide","text":"<p>TODO</p>"},{"location":"user-guide/features/security/vpn/","title":"VPN Server","text":""},{"location":"user-guide/features/security/vpn/#how-it-works","title":"How it works","text":"<p>TODO</p>"},{"location":"user-guide/features/security/vpn/#user-guide","title":"User guide","text":"<p>TODO</p>"},{"location":"user-guide/features/sso/sso/","title":"AWS SSO","text":"<p>Before deploying your AWS SSO definition in the project, it will first have to be manually enabled in the AWS Management Console.</p> <p> Prerequisites</p> <p> Enable AWS SSO</p> <p>After that, choosing and configuring an Identity Provider (IdP) is the next step. For this, we will make use of JumpCloud, as described in the how it works section. These resources point to all requirements and procedures to have your JumpCloud account setup and synched with AWS SSO:</p> <p> AWS JumpCloud support guide</p> <p> JumpCloud guide on how to configure as IdP for AWS SSO</p> <p>Once this is set up, the SSO layer can be safely deployed.</p>"},{"location":"user-guide/features/sso/sso/#preparing-the-project-to-use-aws-sso","title":"Preparing the project to use AWS SSO","text":"<p>To implement SSO authentication in your IaC definition, some configuration values need to be present in your project.</p>"},{"location":"user-guide/features/sso/sso/#global-configuration","title":"Global configuration","text":"<p>In the global configuration file, or <code>common.tfvars</code>, found in the root of the project, under the <code>config</code> directory</p> <pre><code>...\n\u251c\u2500\u2500 \ud83d\udcc2 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars\n...\n</code></pre> <p>Three values will govern the behavior of SSO: <pre><code># AWS SSO\nsso_enabled   = true\nsso_start_url = \"https://myexample.awsapps.com/start\"\nsso_region    = \"us-east-1\"\n</code></pre></p> <ul> <li><code>sso_enabled</code> determines whether leverage will attempt to use credentials obtained via SSO to authenticate against AWS</li> <li><code>sso_start_url</code> and <code>sso_region</code> are necessary to configure AWS CLI correctly in order to be able to get the credentials</li> </ul> <p>When configuring AWS CLI, a <code>default</code> profile is created containing region and output default settings. The region value is obtained from the previously mentioned <code>sso_region</code>, however, you can override this behavior by configuring a <code>region_primary</code> value in the same global configuration file, as so: <pre><code>region_primary = \"us-west-2\"\n</code></pre></p>"},{"location":"user-guide/features/sso/sso/#account-configuration","title":"Account configuration","text":"<p>In every account configuration file, namely <code>account.tfvars</code>, found in the <code>config</code> directory under the account's folder</p> <pre><code>...\n\u251c\u2500\u2500 \ud83d\udcc2 account\n|   \u251c\u2500\u2500 \ud83d\udcc2 config\n|   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n|   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n...\n</code></pre> <p>The role to be assumed via SSO is configured: <pre><code># SSO\nsso_role = \"DevOps\"\n</code></pre></p> <p>This is the role for which credentials will be obtained via SSO when operating in the current layer.</p>"},{"location":"user-guide/features/sso/sso/#authentication-via-sso","title":"Authentication via SSO","text":""},{"location":"user-guide/features/sso/sso/#1-configuring-aws-sso","title":"1. Configuring AWS SSO","text":"<p>Once the project has been set up to use SSO, the profiles that AWS CLI will use to authenticate against the service need to be created.</p> <p>To do this, simply run <code>leverage aws configure sso</code>.</p> <p>This step needs to be performed every time the user works in a new account that assumes a different role than the one that they are currently using. For example, if the user is working in the <code>security</code> account, assuming the <code>DevOps</code> role, but needs to operate on a layer of the <code>management</code> account which requires assuming an <code>Administrator</code> role, then SSO needs to be reconfigured.</p> <p>Attention</p> <p>This step simply writes over the credentials files for AWS CLI without asking for confirmation from the user. So it's recommended to backup/wipe old credentials before executing this step in order to avoid loss of credentials or conflicts with profiles having similar names to the ones generated by Leverage. </p>"},{"location":"user-guide/features/sso/sso/#2-logging-in","title":"2. Logging in","text":"<p>This step is executed as part of the previous one. So if the user has just configured SSO, this step is not required.</p> <p>Having SSO configured, the user will proceed to log in.</p> <p>This is achieved by running <code>leverage aws sso login</code>.</p> <p>In this step, the user is prompted to manually authorize the log in process via a web console.</p> <p>When logging in, Leverage obtains a token from SSO. This token is later used to obtain the credentials needed for the layer the user is working on. This token has a relatively short life span to strike a balance between security and convenience for the user.</p>"},{"location":"user-guide/features/sso/sso/#3-working-on-a-layer","title":"3. Working on a layer","text":"<p>When SSO is enabled in the project, Leverage will automatically figure out the required credentials for the current layer, and attempt to get them from AWS every time the user executes a command on it.</p> <p>These credentials are short lived (30 minutes) for security reasons, and will be refreshed automatically whenever they expire.</p>"},{"location":"user-guide/features/sso/sso/#4-logging-out","title":"4. Logging out","text":"<p>When the user has finished working, running <code>leverage sso logout</code> wipes out all remaining valid credentials and voids the token obtained from logging in.</p>"},{"location":"user-guide/leverage-cli/install-leverage-cli/","title":"Install Leverage CLI","text":"<p>To use Leverage CLI you need to install it from the Python Package Index (Pypi). Currently, only Linux and Mac OS are supported operative systems.</p> <p>Requirements</p> <ul> <li> Python <code>&gt;= 3.8</code></li> <li> Git <code>&gt;= 2.25</code></li> <li> Docker engine <code>&gt;= 20.x.y</code></li> </ul>"},{"location":"user-guide/leverage-cli/install-leverage-cli/#install-pip","title":"Install Pip","text":"Ubuntu/DebianCentOS/RHELFedoraMacOS <pre><code>$ sudo apt install python3-pip\n</code></pre> <pre><code>$ sudo yum install python3-pip\n</code></pre> <pre><code>$ sudo dnf install python3-pip\n</code></pre> <p>Pip should already be installed alongside your Python 3 installation. If for whatever reason this is not the case: <pre><code>$ brew install python3\n</code></pre></p>"},{"location":"user-guide/leverage-cli/install-leverage-cli/#install-leverage-cli_1","title":"Install Leverage CLI","text":"<pre><code>$ pip3 install leverage\n</code></pre>"},{"location":"user-guide/leverage-cli/install-leverage-cli/#update-leverage-cli-from-previous-versions","title":"Update Leverage CLI from previous versions","text":"<p>Upgrade to a specific version. <pre><code>$ pip3 install -Iv leverage==1.9.1\n</code></pre></p> <p>Upgrade to the latest stable version <pre><code>$ pip3 install --upgrade leverage\n</code></pre></p>"},{"location":"user-guide/leverage-cli/install-leverage-cli/#verify-your-leverage-installation","title":"Verify your Leverage installation","text":"<p>Verify that your Leverage installation was successful by running <pre><code>$ leverage --help\nUsage: leverage [OPTIONS] COMMAND [ARGS]...\n\n  Leverage Reference Architecture projects command-line tool.\n\nOptions:\n  -f, --filename TEXT  Name of the build file containing the tasks\n                       definitions.  [default: build.py]\n-l, --list-tasks     List available tasks to run.\n  -v, --verbose        Increase output verbosity.\n  --version            Show the version and exit.\n  --help               Show this message and exit.\n\nCommands:\n  aws          Run AWS CLI commands in a custom containerized environment.\n  credentials  Manage AWS cli credentials.\n  kubectl      Run Kubectl commands in a custom containerized environment.\n  project      Manage a Leverage project.\n  run          Perform specified task(s) and all of its dependencies.\n  terraform    Run Terraform commands in a custom containerized...\n  tf           Run Terraform commands in a custom containerized...\n  tfautomv     Run TFAutomv commands in a custom containerized...\n</code></pre></p>"},{"location":"user-guide/leverage-cli/install-leverage-cli/#installation-in-an-isolated-environment","title":"Installation in an isolated environment","text":"<p>If you prefer not to install the Leverage package globally and would like to limit its influence to only the directory of your project, we recommend using tools like Pipenv or Poetry. These tools are commonly used when working with python applications and help manage common issues that may result from installing and using such applications globally.</p>"},{"location":"user-guide/leverage-cli/install-leverage-cli/#shell-completion","title":"Shell completion","text":"<p>To enable autocompletion for Leverage in your shell, do the following:</p> BashZshFish <p>Add to <code>~/.bashrc</code>: <pre><code>eval \"$(_LEVERAGE_COMPLETE=bash_source leverage)\"\n</code></pre></p> <p>Add to <code>~/.zshrc</code>: <pre><code>eval \"$(_LEVERAGE_COMPLETE=zsh_source leverage)\"\n</code></pre></p> <p>Add to <code>~/.config/fish/completions/leverage.fish</code>: <pre><code>eval (env _LEVERAGE_COMPLETE=fish_source leverage)\n</code></pre></p> <p>Or to avoid invoking <code>eval</code> every time a shell starts:</p> BashZshFish <p>Save the script: <pre><code>_LEVERAGE_COMPLETE=bash_source leverage &gt; ~/.leverage-complete.bash\n</code></pre> Source the script in <code>~/.bashrc</code>: <pre><code>. ~/.leverage-complete.bash\n</code></pre></p> <p>Save the script: <pre><code>_LEVERAGE_COMPLETE=zsh_source leverage &gt; ~/.leverage-complete.zsh\n</code></pre> Source the script in <code>~/.zshrc</code>: <pre><code>. ~/.leverage-complete.zsh\n</code></pre></p> <p>Save the script to <code>~/.config/fish/completions/leverage.fish</code>: <pre><code>_LEVERAGE_COMPLETE=fish_source leverage &gt; ~/.config/fish/completions/leverage.fish\n</code></pre></p> <p>Start a new shell in order to load any changes made to the shell config.</p>"},{"location":"user-guide/leverage-cli/shell/","title":"Shell environment","text":"<p>When launching a Terraform shell, Leverage provides the user with a completely isolated environment tailored to operate in the current project via a Docker container.</p> <p>The whole project is mounted on a directory named after the value for <code>project_long</code> in the global configuration file, or simply named <code>\"project\"</code> if this value is not defined. A project named <code>myexample</code>, would be mounted in <code>/myexample</code>.</p> <p>The <code>.gitconfig</code> user's file is also mounted on <code>/etc/gitconfig</code> for convenience, while (if <code>ssh-agent</code> is running), the socket stated in <code>SSH_AUTH_SOCK</code> is mounted on <code>/ssh-agent</code>. Also, the credentials files (<code>credentials</code> and <code>config</code>) found in the project AWS credentials directory (<code>~/.aws/myexample</code>), are mapped to the locations given by the environment variables <code>AWS_SHARED_CREDENTIALS_FILE</code> and <code>AWS_CONFIG_FILE</code> respectively within the container. </p>"},{"location":"user-guide/leverage-cli/shell/#authentication","title":"Authentication","text":"<p>Determining which credentials are needed to operate on a layer, and retrieving those credentials, may prove cumbersome for many complex layer definitions. In addition to that, correctly configuring them can also become a tedious an error prone process. For that reason Leverage automates this process upon launching the shell if requested by the user via the <code>shell</code> command options.</p> <p>Bear in mind, that an authenticated shell session's credentials are obtained for the layer in which the session was launched. These credentials may not be valid for other layers in which different roles need to be assumed or require more permissions.</p>"},{"location":"user-guide/leverage-cli/shell/#multi-factor-authentication","title":"Multi-Factor authentication","text":"<pre><code>leverage terraform shell --mfa\n</code></pre> <p>If MFA authentication is required, Leverage will prompt the user for the required tokens for the layer or use the cached credentials if still valid.</p> <p>The user's programmatic keys must be configured beforehand via <code>leverage credentials configure</code> command.</p>"},{"location":"user-guide/leverage-cli/shell/#single-sign-on","title":"Single-Sign On","text":"<p>If authentication via SSO is required, the user will need to configure or login into SSO before launching the shell via</p> <pre><code>leverage terraform shell --sso\n</code></pre>"},{"location":"user-guide/leverage-cli/shell/#operations-on-the-projects-layer","title":"Operations on the project's layer","text":"<p>In order to operate in a project's layer, Terraform commands such as <code>plan</code> or <code>apply</code> will need to receive extra parameters providing the location of the files that contain the definition of the variables required by the layer. Usually, these files are:</p> <ul> <li>the project global configuration file <code>common.tfvars</code></li> <li>the account configuration file <code>account.tfvars</code></li> <li>the terraform backend configuration file <code>backend.tfvars</code></li> </ul> <p>In this case these parameters should take the form: <pre><code>-var-file=/myexample/config/common.tfvars -var-file=/myexample/account/config/account.tfvars -var-file=/myexample/account/config/backend.tfvars`\n</code></pre></p> <p>Relative paths can prove useful when providing these locations. A layer definition may require more than just these files.</p> <p>So, for example, to apply changes on a standard Leverage Reference Architecture layer, the complete command would be: <pre><code>terraform apply -var-file=../../../config/common.tfvars -var-file=../../config/account.tfvars -var-file=../../config/backend.tfvars\n</code></pre> However, when initializing Terraform different parameters are needed, so it should be run as: <pre><code>terraform init -backend-config=../../config/backend.tfvars\n</code></pre></p>"},{"location":"user-guide/leverage-cli/extending-leverage/","title":"Extending &amp; Configuring leverage CLI","text":""},{"location":"user-guide/leverage-cli/extending-leverage/#override-defaults-via-buildenv-file","title":"Override defaults via <code>build.env</code> file","text":"<p>By utilizing the <code>build.env</code> capability, you can easily change some default behaviors of the CLI. This allows you to specify several configurations for the CLI,  such as the Leverage-Toolbox-Image that you want to use, ensuring that you are using the latest version or a specific version that you prefer based on your compatibility requirements.  This helps you avoid compatibility issues and ensures that your infrastructure deployments go smoothly. </p> <p>Read More about <code>build.env</code></p> <p>In order to further understand this mechanism and how to use it please visit the dedicated  build.env entry.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/#tfvars-config-files","title":"<code>.tfvars</code> config files","text":"<p>Using additional <code>.tfvars</code> configuration files at the account level or at the global level will allow you to extend your terraform configuration entries. Consider that using multiple <code>.tfvars</code> configuration files allows you to keep your  configuration entries well-organized. You can have separate files for different accounts or environments, making it easy to manage and maintain your infrastructure. This also makes it easier for other team members to understand and work with your configuration, reducing the risk of misconfigurations or errors.</p> <p>Read More about <code>.tfvars</code> config files</p> <p>In order to further understand this mechanism and how to use it please visit the dedicated .tfvars configs entry.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/#custom-tasks-with-buildpy","title":"Custom tasks with build.py","text":"<p>Leverage CLI has a native mechanism to allow customizing your workflow. With the custom tasks feature using <code>build.py</code>, you can write your own tasks using Python, tailoring the CLI to fit your specific workflow. This allows you to automate and streamline your infrastructure deployments, reducing the time and effort required to manage your infrastructure.  You can also easily integrate other tools and services into your workflow to further improve your productivity.</p> <p>Read More about <code>build.py</code> custom tasks</p> <p>In order to further understand this mechanism and how to use it please visit the dedicated build.py custom tasks entry.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/#fork-collaborate-and-improve","title":"Fork, collaborate and improve","text":"<p>By forking the leverage repository on GitHub and contributing to the project, you have the opportunity to make a positive impact on the product and the community. You can fix bugs, implement new  features, and contribute your ideas and feedback. This helps to ensure that the product continues to evolve and improve, serving the needs of the community and making infrastructure deployments easier for everyone.</p> <p>Read More about contributing with the project</p> <p>In order to further understand this mechanism and how to use it please visit the dedicated CONTRIBUTING.md entry.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/build.env/","title":"build.env","text":""},{"location":"user-guide/leverage-cli/extending-leverage/build.env/#override-defaults-via-buildenv-file","title":"Override defaults via <code>build.env</code> file","text":"<p>By utilizing the <code>build.env</code> capability, you can easily change some default behaviors of the CLI. In the binbash Leverage\u2122 Ref Architecture you will find the following <code>build.env</code> example as an example.  This allows you to specify several configurations for the CLI, such as the Leverage-Toolbox-Image you want to use, ensuring that you are using the latest version or a specific version that you prefer based on your compatibility requirements. This helps you avoid compatibility issues and ensures that your infrastructure deployments go smoothly.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/build.env/#buildenv-file-format","title":"<code>build.env</code> file format","text":"<p>The <code>build.env</code> file format and supported parameters are the following:</p> <pre><code># Project settings\nPROJECT=bb\n\n# General\nMFA_ENABLED=false\n\n# Terraform\nTERRAFORM_IMAGE_TAG=1.2.7-0.1.4\n</code></pre> <p>Customizing or extending the leverage-toolbox docker image</p> <p>You can locally copy and edit the Dockerfile in order to rebuild it based on your needs, eg for a <code>Dockerfile</code> placed in the current working directory: <code>$ docker build -t binbash/leverage-toolbox:1.2.7-0.1.4 --build-arg TERRAFORM_VERSION='1.2.7' .</code> In case you like this changes to be permanent please consider  creating and submitting a PR.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/build.env/#working-principle-multiple-buildenv-precedence","title":"Working principle &amp; multiple <code>build.env</code> precedence","text":"<p>The <code>leverage CLI</code> has an environmental variable loading utility that will load all <code>.env</code> files with the given name in  the current directory an all of its parents up to the repository root directory, and store them in a dictionary. Files are traversed from parent to child as to allow values in deeper directories to override possible previously existing values. Consider all files must bear the same name, which in our case defaults to <code>\"build.env\"</code>. So you can have multiple  <code>build.env</code> files that will be processed by the <code>leverage</code> CLI in the context of a specific layer of a  Reference Architecture project.  For example the /le-tf-infra-aws/apps-devstg/us-east-1/k8s-kind/k8s-resources/build.env file. </p>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/","title":"Custom tasks","text":"<p>The same way we needed to automate or simplify certain tasks or jobs for the user, you may need to do the same in your project.</p> <p>Leverage CLI does not limit itself to provide only the core functionality required to create and manage your Leverage project, but also allows for the definition of custom tasks, at the <code>build.py</code> root context file, that can be used to add capabilities that are outside of Leverage CLI's scope.</p> <p>By implementing new auxiliary Leverage tasks you can achieve consistency and homogeneity in the experience of the user when interacting with your Leverage project and simplify the usage of any other tool that you may require.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#tasks","title":"Tasks","text":"<p>Tasks are simple python functions that are marked as such with the use of the <code>@task()</code> decorator. We call the file where all tasks are defined a 'build script', and by default it is assumed to be named <code>build.py</code>. If you use any other name for your build script, you can let Leverage know through the global option <code>--filename</code>.</p> <pre><code>from leverage import task\n\n@task()\ndef copy_file(src, dst):\n\"\"\"Copy src file to dst\"\"\"\n    print(f\"Copying {src} to {dst}\")\n</code></pre> <p>The contents in the task's docstring are used to provide a short description of what's the task's purpose when listing all available tasks to run.</p> <pre><code>$ leverage --list-tasks\nTasks in build file `build.py`:\n\n  copy_file               Copy src file to dst\n\nPowered by Leverage 1.0.10\n</code></pre> <p>Any argument that the task may receive are to be given when running the task. The syntax for passing arguments is similar to that of Rake.</p> <pre><code>$ leverage run copy_file[\"/path/to/foo\",\"/path/to/bar\"]\n[09:25:59.002] [ build.py - \u279c Starting task copy_file]\nCopying /path/to/foo to /path/to/bar\n[09:25:59.005] [ build.py - \u2714 Completed task copy_file ]\n</code></pre> <p>Keyworded arguments are also supported.</p> <pre><code>$ leverage run copy_file[\"/path/to/foo\",dst=\"/path/to/bar\"]\n</code></pre>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#dependencies","title":"Dependencies","text":"<p>The <code>task</code> decorator allows for the definition of dependencies. These are defined as positional arguments in the decorator itself. Multiple dependencies can be defined for each task.</p> <pre><code>from leverage import task\n@task()\ndef html(target=\".\"):\n\"\"\"Generate HTML.\"\"\"\n    print(f\"Generating HTML in directory \\\"{target}\\\"\")\n\n@task()\ndef images():\n\"\"\"Prepare images.\"\"\"\n    print(\"Preparing images...\")\n\n@task(html, images)\ndef start_server(host=\"localhost\", port=\"80\"):\n\"\"\"Start the server\"\"\"\n    print(f\"Starting server at {host}:{port}\")\n</code></pre> <p>We can see how the task <code>start_server</code> depends on both <code>html</code> and <code>images</code>. This means that both <code>html</code> and <code>images</code> will be executed before <code>start_server</code> and in that same order.</p> <pre><code>$ leverage run start_server\n[09:34:54.848] [ build.py - \u279c Starting task html ]\nGenerating HTML in directory \".\"\n[09:34:54.851] [ build.py - \u2714 Completed task html ]\n[09:34:54.852] [ build.py - \u279c Starting task images ]\nPreparing images...\n[09:34:54.854] [ build.py - \u2714 Completed task images ]\n[09:34:54.855] [ build.py - \u279c Starting task start_server ]\nStarting server at localhost:80\n[09:34:54.856] [ build.py - \u2714 Completed task start_server ]\n</code></pre>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#ignoring-a-task","title":"Ignoring a task","text":"<p>If you find yourself in the situation were there's a task that many other tasks depend on, and you need to quickly remove it from the dependency chains of all those tasks, ignoring its execution is a very simple way to achieve that end without having to remove all definitions and references across the code.</p> <p>To ignore or disable a task, simply set <code>ignore</code> to <code>True</code> in the task's decorator.</p> <p><pre><code>from leverage import task\n\n@task()\ndef html(target=\".\"):\n\"\"\"Generate HTML.\"\"\"\n    print(f\"Generating HTML in directory \\\"{target}\\\"\")\n\n@task(ignore=True)\ndef images():\n\"\"\"Prepare images.\"\"\"\n    print(\"Preparing images...\")\n\n@task(html, images)\ndef start_server(server=\"localhost\", port=\"80\"):\n\"\"\"Start the server\"\"\"\n    print(f\"Starting server at {server}:{port}\")\n</code></pre> <pre><code>$ leverage run start_server\n[09:38:32.819] [ build.py - \u279c Starting task html ]\nGenerating HTML in directory \".\"\n[09:38:32.822] [ build.py - \u2714 Completed task html ]\n[09:38:32.823] [ build.py - \u2933 Ignoring task images ]\n[09:38:32.824] [ build.py - \u279c Starting task start_server ]\nStarting server at localhost:80\n[09:38:32.825] [ build.py - \u2714 Completed task start_server ]\n</code></pre></p> <p>When listing the available tasks any ignored task will be marked as such.</p> <pre><code>$ leverage --list-tasks\nTasks in build file `build.py`:\n\n  html                      Generate HTML.\n  images        [Ignored]   Prepare images.\n  start_server              Start the server\n\nPowered by Leverage 1.0.10\n</code></pre>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#private-tasks","title":"Private tasks","text":"<p>Sometimes you may want to define auxiliary tasks that don't need to be shown as available to run by the user. For this scenario, you can make any task into a private one. There's two ways to accomplish this, either by naming the task with an initial underscore (<code>_</code>) or by setting <code>private</code> to <code>True</code> in the task's decorator.</p> <pre><code>from leverage import task\n\n@task(private=True)\ndef clean():\n\"\"\"Clean build directory.\"\"\"\n    print(\"Cleaning build directory...\")\n\n@task()\ndef _copy_resources():\n\"\"\"Copy resource files. This is a private task and will not be listed.\"\"\"\n    print(\"Copying resource files\")\n\n@task(clean, _copy_resources)\ndef html(target=\".\"):\n\"\"\"Generate HTML.\"\"\"\n    print(f\"Generating HTML in directory \\\"{target}\\\"\")\n\n@task(clean, _copy_resources, ignore=True)\ndef images():\n\"\"\"Prepare images.\"\"\"\n    print(\"Preparing images...\")\n\n@task(html, images)\ndef start_server(host=\"localhost\", port=\"80\"):\n\"\"\"Start the server\"\"\"\n    print(f\"Starting server at {host}:{port}\")\n</code></pre> <p>Private tasks will be executed, but not shown when tasks are listed.</p> <p><pre><code>$ leverage run start_server\n[09:40:33.535] [ build.py - \u279c Starting task clean ]\nCleaning build directory...\n[09:40:33.540] [ build.py - \u2714 Completed task clean ]\n[ build.py - \u279c Starting task _copy_resources ]\nCopying resource files\n[09:40:33.541] [ build.py - \u2714 Completed task _copy_resources ]\n[09:40:33.542] [ build.py - \u279c Starting task html ]\nGenerating HTML in directory \".\"\n[09:40:33.543] [ build.py - \u2714 Completed task html ]\n[09:40:33.544] [ build.py - \u279c Starting task images ]\nPreparing images...\n               [ build.py - \u2714 Completed task images ]\n[09:40:33.545] [ build.py - \u279c Starting task start_server ]\nStarting server at localhost:80\n[09:40:33.546] [ build.py - \u2714 Completed task start_server ]\n</code></pre> <pre><code>$ leverage --list-tasks\nTasks in build file `build.py`:\n\n  html              Generate HTML.\n  images            Prepare images.\n  start_server      Start the server\n\nPowered by Leverage 1.0.10\n</code></pre></p>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#default-task","title":"Default task","text":"<p>If you have a task that is run much more often than the rest, it can get tedious to always pass the name of that task to the <code>run</code> command. Leverage allows for the definition of a default task to address this situation. Thi task is executed when no task name is given.</p> <p>To define a default task, simply assign the already defined task to the special variable <code>__DEFAULT__</code>.</p> <pre><code>from leverage import task\n\n@task()\ndef html(target=\".\"):\n\"\"\"Generate HTML.\"\"\"\n    print(f\"Generating HTML in directory \\\"{target}\\\"\")\n\n@task(ignore=True)\ndef images():\n\"\"\"Prepare images.\"\"\"\n    print(\"Preparing images...\")\n\n@task(html, images)\ndef start_server(server=\"localhost\", port=\"80\"):\n\"\"\"Start the server\"\"\"\n    print(f\"Starting server at {server}:{port}\")\n\n__DEFAULT__ = start_server\n</code></pre> <p>The default task is marked as such when listing all available tasks.</p> <pre><code>$ leverage --list-tasks\nTasks in build file `build.py`:\n\n  html                      Generate HTML.\n  images        [Ignored]   Prepare images.\n  start_server  [Default]   Start the server\n\nPowered by Leverage 1.0.10\n</code></pre>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#build-scripts-lookup","title":"Build scripts lookup","text":"<p>Build scripts are not only looked up in the current directory but also in all parent directories up to the root of the Leverage project. This makes it possible to launch tasks form any directory of the project as long as any parent of the current directory holds a build script.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#organizing-build-scripts","title":"Organizing build scripts","text":"<p>Leverage CLI treats the directory in which the build script is found as a python package. This means that you can break up your build files into modules and simply import them into your main build script, encouraging modularity and code reuse.</p> <p>Leverage CLI empowers you to create whole libraries of functionalities for your project. You can use it to better organize your tasks or implement simple auxiliary python functions.</p> <p>This way, given the following folder structure:</p> <pre><code>leverage_project\n\u251c\u2500\u2500 build.py\n\u251c\u2500\u2500 deployment_tasks.py\n\u251c\u2500\u2500 testing_tasks.py\n\u2514\u2500\u2500 auxiliary_library\n    \u251c\u2500\u2500 reports.py\n    \u2514\u2500\u2500 utils.py\n</code></pre> <p>The build script <code>build.py</code> can make use of definitions in the other files by means of importing them.</p> <pre><code>from .deployment_tasks import *\nfrom .testing_tasks import unit_tests, functional_tests\nfrom .auxiliary_library.reports import coverage_report\nfrom .auxiliary_library.utils import format_as_table\n</code></pre> <p>Importing user defined modules</p> <p>All import statements to user defined modules need to be relative to the main build script in order to function correctly.</p>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#known-issues","title":"Known issues","text":""},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#zsh-glob-patterns-zsh-no-matches-found","title":"Zsh Glob Patterns: <code>zsh: no matches found</code>","text":"<p>If you use <code>zsh</code> as your shell you might get the an error like this one: <code>zsh: no matches found: start_server[port=8000]</code></p> <p>The problem has to do with the square brackets, as zhs has glob patterns enabled by default which causes every input to be interpreted like that.</p> <p>The are a few workarounds:</p> <ol> <li> <p>Escape the square brackets: <code>leverage run start_server\\[port=8000\\]</code></p> </li> <li> <p>Enclose the entire task between double quotes: <code>leverage run \"start_server[port=8000]\"</code></p> </li> <li> <p>Disable glob patterns: <code>noglob leverage run start_server[port=8000]</code></p> </li> </ol> <p>An improvement over the last point is to create an alias for the leverage command: <code>alias leverage='noglob leverage'</code></p>"},{"location":"user-guide/leverage-cli/extending-leverage/tasks/#folder-names-containing-periods","title":"Folder names containing periods","text":"<p>As mentioned in the Organizing build scripts section, Leverage CLI treats the directory in which the main build script is located as a python package in order to allow importing of user defined python modules. If this directory contains a period (<code>.</code>) in its name, this will create issues for the importing process. This is because the period is used by python to separate subpackages from their parents.</p> <p>For example, if the directory where the build script <code>build.py</code> is stored is named <code>local.assets</code>, at the time of loading the build script, python will try to locate <code>local.build</code> instead of locating <code>local.assets.build</code> and fail.</p> <p>The same situation will arise from any other subdirectory in the project. When importing modules from those directories, they wont be found.</p> <p>The simple solution to this is to avoid using periods when naming directories. If the build script is located in the project's root folder, this would also apply to that directory.</p>"},{"location":"user-guide/leverage-cli/reference/aws/","title":"Command: <code>aws</code>","text":"<p>The <code>aws</code> command is a wrapper for a containerized installation of AWS CLI 2.0. All commands are passed directly to the AWS CLI and you should expect the same behavior from all of them, except for the few exceptions listed below.</p>"},{"location":"user-guide/leverage-cli/reference/aws/#configure-sso","title":"<code>configure sso</code>","text":""},{"location":"user-guide/leverage-cli/reference/aws/#usage","title":"Usage","text":"<pre><code>leverage aws configure sso\n</code></pre> <p>Extracts information from the project's Terraform configuration to generate the required profiles for AWS CLI to handle SSO.</p> <p>In the process, you will need to log in via your identity provider. To allow you to do this, Leverage will attempt to open the login page in the system's default browser.</p>"},{"location":"user-guide/leverage-cli/reference/aws/#sso-login","title":"<code>sso login</code>","text":""},{"location":"user-guide/leverage-cli/reference/aws/#usage_1","title":"Usage","text":"<pre><code>leverage aws sso login\n</code></pre> <p>It wraps <code>aws sso login</code> taking extra steps to allow <code>Leverage</code> to use the resulting token while is valid.</p>"},{"location":"user-guide/leverage-cli/reference/aws/#sso-logout","title":"<code>sso logout</code>","text":""},{"location":"user-guide/leverage-cli/reference/aws/#usage_2","title":"Usage","text":"<pre><code>leverage aws sso logout</code></pre> <p>It wraps <code>aws sso logout</code> taking extra steps to make sure that all tokens and temporary credentials are wiped from the system. It also reminds the user to log out form the AWS SSO login page and identity provider portal. This last action is left to the user to perform.</p>"},{"location":"user-guide/leverage-cli/reference/basic-features/","title":"Basic CLI features","text":"<p>To view a list of all the available commands and options in your current Leverage version simply run <code>leverage</code> or <code>leverage --help</code>. You should get an output similar to this: <pre><code>$ leverage\nUsage: leverage [OPTIONS] COMMAND [ARGS]...\n\n  Leverage Reference Architecture projects command-line tool.\n\nOptions:\n  -f, --filename TEXT  Name of the build file containing the tasks\n                       definitions.  [default: build.py]\n-l, --list-tasks     List available tasks to run.\n  -v, --verbose        Increase output verbosity.\n  --version            Show the version and exit.\n  --help               Show this message and exit.\n\nCommands:\n  aws          Run AWS CLI commands in a custom containerized environment.\n  credentials  Manage AWS cli credentials.\n  kubectl      Run Kubectl commands in a custom containerized environment.\n  project      Manage a Leverage project.\n  run          Perform specified task(s) and all of its dependencies.\n  terraform    Run Terraform commands in a custom containerized...\n  tf           Run Terraform commands in a custom containerized...\n  tfautomv     Run TFAutomv commands in a custom containerized...\n</code></pre></p> <p>Similarly, subcommands provide further information by means of the <code>--help</code> flag. For example <code>leverage tf --help</code>.</p>"},{"location":"user-guide/leverage-cli/reference/basic-features/#global-options","title":"Global options","text":"<ul> <li><code>-f</code> | <code>--filename</code>:  Name of the file containing the tasks' definition. Defaults to <code>build.py</code></li> <li><code>-l</code> | <code>--list-tasks</code>: List all the tasks defined for the project along a description of their purpose (when available). <pre><code>Tasks in build file `build.py`:\n\n  clean                   Clean build directory.\n  copy_file               \n  echo                    \n  html                    Generate HTML.\n  images        [Ignored] Prepare images.\n  start_server  [Default] Start the server\n  stop_server             \n\nPowered by Leverage 1.9.0\n</code></pre></li> <li> <p><code>-v</code> | <code>--verbose</code>: Increases output verbosity.   When running a command in a container, the tool provides a description of the container's configuration before the execution.   This is specially useful if the user were to to have the need of recreating Leverage's behavior by themselves. <pre><code>$ leverage -v tf plan\n[18:23:22.222] DEBUG    Found config file /home/user/binbash/le-tf-infra-aws/build.env\n[18:23:22.239] DEBUG    Container configuration:\n                        {\n\"image\": \"binbash/leverage-toolbox:1.2.7-0.1.7\", #(1)!\n\"command\": \"\",\n                          \"stdin_open\": true,\n                          \"environment\": { #(2)!\n\"COMMON_CONFIG_FILE\": \"/binbash/config/common.tfvars\",\n                            \"ACCOUNT_CONFIG_FILE\": \"/binbash/security/config/account.tfvars\",\n                            \"BACKEND_CONFIG_FILE\": \"/binbash/security/config/backend.tfvars\",\n                            \"AWS_SHARED_CREDENTIALS_FILE\": \"/root/tmp/bb/credentials\",\n                            \"AWS_CONFIG_FILE\": \"/root/tmp/bb/config\",\n                            \"SRC_AWS_SHARED_CREDENTIALS_FILE\": \"/root/tmp/bb/credentials\",\n                            \"SRC_AWS_CONFIG_FILE\": \"/root/tmp/bb/config\",\n                            \"AWS_CACHE_DIR\": \"/root/tmp/bb/cache\",\n                            \"SSO_CACHE_DIR\": \"/root/tmp/bb/sso/cache\",\n                            \"SSH_AUTH_SOCK\": \"/ssh-agent\"\n},\n                          \"entrypoint\": \"/bin/terraform\",\n                          \"working_dir\": \"/binbash/security/global/base-identities\",\n                          \"host_config\": {\n\"NetworkMode\": \"default\",\n                            \"SecurityOpt\": [\n\"label:disable\"\n],\n                            \"Mounts\": [ #(3)!\n{\n\"Target\": \"/binbash\",\n                                \"Source\": \"/home/user/binbash/le-tf-infra-aws\",\n                                \"Type\": \"bind\",\n                                \"ReadOnly\": false\n},\n                              {\n\"Target\": \"/root/tmp/bb\",\n                                \"Source\": \"/home/user/.aws/bb\",\n                                \"Type\": \"bind\",\n                                \"ReadOnly\": false\n},\n                              {\n\"Target\": \"/etc/gitconfig\",\n                                \"Source\": \"/home/user/.gitconfig\",\n                                \"Type\": \"bind\",\n                                \"ReadOnly\": false\n},\n                              {\n\"Target\": \"/ssh-agent\",\n                                \"Source\": \"/run/user/1000/keyring/ssh\",\n                                \"Type\": \"bind\",\n                                \"ReadOnly\": false\n}\n]\n}\n}\n[18:23:22.274] DEBUG    Checking for layer /home/user/binbash/le-tf-infra-aws/security/global/base-identities...\n[18:23:22.279] DEBUG    Checking layer /home/user/binbash/le-tf-infra-aws/security/global/base-identities...\n[18:23:22.282] DEBUG    Running command: sh -c 'cat $SSO_CACHE_DIR/token'\n[18:23:22.901] DEBUG    Running with entrypoint: /root/scripts/aws-sso/aws-sso-entrypoint.sh -- /bin/terraform\n[18:23:22.903] DEBUG    Running command: plan -var-file=/binbash/config/common.tfvars -var-file=/binbash/security/config/account.tfvars -var-file=/binbash/security/config/backend.tfvars #(4)!\n...\n</code></pre></p> <ol> <li> Docker image being used</li> <li>Environment variables available in the container</li> <li>Mapping of the host (<code>Source</code>) directories and files into the container (<code>Target</code>)</li> <li>Command being executed (useful when trying to replicate Leverage's behavior by yourself)</li> </ol> </li> </ul>"},{"location":"user-guide/leverage-cli/reference/credentials/","title":"Command: <code>credentials</code>","text":"<p>The <code>credentials</code> command is used to set up and manage the AWS CLI credentials required to interact with the AWS environment.</p> <p>All <code>credentials</code>'s subcommands feed off the <code>project.yaml</code>, <code>build.env</code>, and Terraform configuration files to obtain the information they need. In case the basic required information is not found, the subcommands will prompt the user for it.</p>"},{"location":"user-guide/leverage-cli/reference/credentials/#configure","title":"<code>configure</code>","text":""},{"location":"user-guide/leverage-cli/reference/credentials/#usage","title":"Usage","text":"<pre><code>leverage credentials configure --type [BOOTSTRAP|MANAGEMENT|SECURITY] [options]\n</code></pre> <p>The <code>credentials configure</code> command sets up the credentials needed to interact with the AWS environment, from the initial deployment process (<code>BOOTSTRAP</code>) to everyday management (<code>MANAGEMENT</code>) and development or use (<code>SECURITY</code>) of it.</p> <p>It attempts to retrieve the structure of the organization in order to generate all the AWS CLI profiles required to interact with the environment and update the terraform configuration with the id of all relevant accounts.</p> <p>Backups of the previous configured credentials files are always created when overwriting or updating the current ones.</p>"},{"location":"user-guide/leverage-cli/reference/credentials/#options","title":"Options","text":"<ul> <li><code>--type</code>: Type of the credentials to set. Can be any of <code>BOOTSTRAP</code>, <code>MANAGEMENT</code> or <code>SECURITY</code>. This option is case insensitive. This option is required.</li> <li><code>--credentials-file</code>: Path to a <code>.csv</code> credentials file, as produced by the AWS Console, containing the user's programmatic access keys. If not given, the user will be prompted for the credentials.</li> <li><code>--fetch-mfa-device</code>: Retrieve an MFA device serial from AWS for the current user.</li> <li><code>--overwrite-existing-credentials</code>: If the type of credentials being configured is already configured, overwrite current configuration. Mutually exclusive option with <code>--skip-access-keys-setup</code>.</li> <li><code>--skip-access-keys-setup</code>: Skip the access keys configuration step. Continue on to setting up the accounts profiles. Mutually exclusive option with <code>--overwrite-existing-credentials</code>.</li> <li><code>--skip-assumable-roles-setup</code>: Don't configure each account profile to assume their specific role.</li> </ul> <p>If neither of <code>--overwrite-existing-credentials</code> or <code>--skip-access-keys-setup</code> is given, the user will be prompted to choose between both actions when appropriate.</p>"},{"location":"user-guide/leverage-cli/reference/kubectl/","title":"Command: <code>kubectl</code>","text":"<p>Regarding Leverage Toolbox versions</p> <p>To have this feature available, Leverage Toolbox versions <code>1.2.7-0.1.7</code> and up, or <code>1.3.5-0.1.7</code> and up must be used.</p> <p>The <code>kubectl</code> command is a wrapper for a containerized installation of kubectl. It provides the kubectl executable with specific configuration values required by Leverage.</p> <p>It transparently handles authentication, whether it is Multi-Factor or via Single Sign-On, on behalf of the user in the commands that require it. SSO Authentication takes precedence over MFA when both are active. </p> <p>The sub-commands can only be run at layer level and will not run anywhere else in the project. The sub-command <code>configure</code> can only be run at an EKS cluster layer level. Usually called <code>cluster</code>.</p> <p>The command can also be invoked via its shortened version <code>kc</code>.</p>"},{"location":"user-guide/leverage-cli/reference/kubectl/#run","title":"<code>run</code>","text":""},{"location":"user-guide/leverage-cli/reference/kubectl/#usage","title":"Usage","text":"<pre><code>leverage kubectl [commands] [arguments]\n</code></pre> <p>Equivalent to <code>kubectl</code>.</p> <p>All arguments given are passed as received to kubectl. </p> <p>Example:</p> <pre><code>leverage kubectl get pods --namespace monitoring\n</code></pre>"},{"location":"user-guide/leverage-cli/reference/kubectl/#shell","title":"<code>shell</code>","text":""},{"location":"user-guide/leverage-cli/reference/kubectl/#usage_1","title":"Usage","text":"<pre><code>leverage kubectl shell\n</code></pre> <p>Open a shell into the Kubectl container in the current directory.</p>"},{"location":"user-guide/leverage-cli/reference/kubectl/#configure","title":"<code>configure</code>","text":""},{"location":"user-guide/leverage-cli/reference/kubectl/#usage_2","title":"Usage","text":"<pre><code>leverage kubectl configure\n</code></pre> <p>Add the cluster from the EKS layer into your kubectl config file. Equivalent to <code>aws eks update-kubeconfig ...</code>.</p>"},{"location":"user-guide/leverage-cli/reference/private-repos/","title":"Working with Terraform modules in private repos","text":"<p>If it is the case that the layer is using a module from a private repository read the following.</p> <p>E.g.:</p> <p><pre><code>module \"themodule\" {\nsource = \"git@gitlab.com:some-org/some-project/the-private-repo.git//modules/the-module?ref=v0.0.1\"\n...\n}\n</code></pre> where <code>gitlab.com:some-org/some-project/the-private-repo.git</code> is a private repo.</p>"},{"location":"user-guide/leverage-cli/reference/private-repos/#ssh-accessed-repository","title":"SSH accessed repository","text":"<p>To source a Terraform module from a private repository in a layer via an SSH connection these considerations have to be kept in mind.</p> <p>Leverage CLI will mount the host's SSH-Agent socket into the Leverage Toolbox container, this way your keys are accessed in a secure way.</p> <p>So, if an SSH private repo has to be reached, the keys for such repo should be loaded in the SSH-Agent.</p> <p>If the agent is automatically started and the needed keys added in the host system, it should work as it is.</p> <p>These steps should be followed otherwise:</p> <ul> <li> <p>start the SSH-Agent: <pre><code>$ eval \"$(ssh-agent -s)\"\n</code></pre></p> </li> <li> <p>add the keys to it <pre><code>$ ssh-add ~/.ssh/&lt;private_ssh_key_file&gt;\n</code></pre> (replace <code>private_ssh_key_file</code> with the desired file, the process can request the passphrase if it was set on key creation step)</p> </li> </ul>"},{"location":"user-guide/leverage-cli/reference/project/","title":"Command: <code>project</code>","text":"<p>The <code>project</code> command is used to execute global operations on the project.</p>"},{"location":"user-guide/leverage-cli/reference/project/#init","title":"<code>init</code>","text":""},{"location":"user-guide/leverage-cli/reference/project/#usage","title":"Usage","text":"<pre><code>leverage project init\n</code></pre> <p>The <code>project init</code> subcommand initializes a Leverage project in the current directory. If not found, it also initializes the global config directory for Leverage CLI <code>~/.leverage/</code>, and fetches the template for the projects' creation.</p> <p>It then proceeds to drop a template file for the project configuration called <code>project.yaml</code> and initializes a <code>git</code> repository in the directory.</p>"},{"location":"user-guide/leverage-cli/reference/project/#create","title":"<code>create</code>","text":""},{"location":"user-guide/leverage-cli/reference/project/#usage_1","title":"Usage","text":"<pre><code>leverage project create\n</code></pre> <p>The <code>project create</code> subcommand creates the files structure for the architecture in the current directory and configures it based on the values set in the <code>project.yaml</code> file.</p> <p>It will then proceed to make sure all files follow the standard Terraform code style.</p>"},{"location":"user-guide/leverage-cli/reference/run/","title":"Command: <code>run</code>","text":"<p>The <code>run</code> command is used to execute user defined tasks and all of their dependencies.</p> <p> Custom tasks documentation</p>"},{"location":"user-guide/leverage-cli/reference/run/#usage","title":"Usage","text":"<pre><code>leverage run [tasks]\n</code></pre> <p>An arbitrary number of tasks can be given to the command. All tasks given must be in the form of the task name optionally followed by arguments that the task may require enclosed in square brackets, i.e. <code>TASK_NAME[TASK_ARGUMENTS]</code>. The execution respects the order in which they were provided.</p> <p>If no tasks are given, the default task will be executed. In case no default task is defined, the command will list all available tasks to run.</p> <p>Example: <pre><code>leverage run task1 task2[arg1,arg2] task3[arg1,kwarg1=val1,kwarg2=val2]\n</code></pre></p> <ul> <li> <p><code>task1</code> is invoked with no arguments, which is equivalent to <code>task1[]</code></p> </li> <li> <p><code>task2</code> receives two positional arguments <code>arg1</code> and <code>arg2</code></p> </li> <li> <p><code>task3</code> receives one positional argument <code>arg1</code> and two keyworded arguments <code>kwarg1</code> with value <code>val1</code> and <code>kwarg2</code> with value <code>val2</code></p> </li> </ul>"},{"location":"user-guide/leverage-cli/reference/terraform/","title":"Command: <code>terraform</code> | <code>tf</code>","text":"<p>The <code>terraform</code> command is a wrapper for a containerized installation of Terraform. It provides the Terraform executable with specific configuration values required by Leverage.</p> <p>It transparently manages authentication, either Multi-Factor or Single Sign-On, on behalf of the user on commands that require it. SSO authentication takes precedence over MFA when both are active.</p> <p>Some commands can only be run at layer level and will not run anywhere else in the project.</p> <p>The command can also be invoked via its shortened version <code>tf</code>.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#init","title":"<code>init</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage","title":"Usage","text":"<pre><code>leverage terraform init [option] [arguments]\n</code></pre> <p>Equivalent to <code>terraform init</code>.</p> <p>All arguments given are passed as received to Terraform.</p> <p>Can only be run at layer level if <code>--layers</code> is not set, or at account or layers-container-directory if it is.</p> <p>Layout validation is performed before actually initializing Terraform unless explicitly indicated against via the <code>--skip-validation</code> flag.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#options","title":"Options","text":"<ul> <li><code>--skip-validation</code>: Skips layout validation.</li> <li><code>--layers</code>: Applies command to layers listed in this option. (see more info here)</li> </ul> <p>Regarding S3 backend keys</p> <p>If the S3 backend block is set, and no key was defined, Leverage CLI will try to create a new one autoatically and store it in the <code>config.tf</code> file. It will be based on the layer path relative to the account.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#plan","title":"<code>plan</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_1","title":"Usage","text":"<pre><code>leverage terraform plan [arguments]\n</code></pre> <p>Equivalent to <code>terraform plan</code>.</p> <p>All arguments given are passed as received to Terraform.</p> <p>Can only be run at layer level if <code>--layers</code> is not set, or at account or layers-container-directory if it is.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#options_1","title":"Options","text":"<ul> <li><code>--layers</code>: Applies command to layers listed in this option. (see more info here)</li> </ul>"},{"location":"user-guide/leverage-cli/reference/terraform/#apply","title":"<code>apply</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_2","title":"Usage","text":"<pre><code>leverage terraform apply [arguments]\n</code></pre> <p>Equivalent to <code>terraform apply</code>.</p> <p>All arguments given are passed as received to Terraform.</p> <p>Can only be run at layer level if <code>--layers</code> is not set, or at account or layers-container-directory if it is.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#options_2","title":"Options","text":"<ul> <li><code>--layers</code>: Applies command to layers listed in this option. (see more info here)</li> </ul>"},{"location":"user-guide/leverage-cli/reference/terraform/#destroy","title":"<code>destroy</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_3","title":"Usage","text":"<pre><code>leverage terraform destroy [arguments]\n</code></pre> <p>Equivalent to <code>terraform destroy</code>.</p> <p>All arguments given are passed as received to Terraform.</p> <p>Can only be run at layer level if <code>--layers</code> is not set, or at account or layers-container-directory if it is.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#options_3","title":"Options","text":"<ul> <li><code>--layers</code>: Applies command to layers listed in this option. (see more info here)</li> </ul>"},{"location":"user-guide/leverage-cli/reference/terraform/#output","title":"<code>output</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_4","title":"Usage","text":"<pre><code>leverage terraform output [arguments]\n</code></pre> <p>Equivalent to <code>terraform output</code>.</p> <p>All arguments given are passed as received to Terraform.</p> <p>Can only be run at layer level if <code>--layers</code> is not set, or at account or layers-container-directory if it is.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#options_4","title":"Options","text":"<ul> <li><code>--layers</code>: Applies command to layers listed in this option. (see more info here)</li> </ul>"},{"location":"user-guide/leverage-cli/reference/terraform/#version","title":"<code>version</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_5","title":"Usage","text":"<pre><code>leverage terraform version\n</code></pre> <p>Equivalent to <code>terraform version</code>.</p> <p>Print Terraform version.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#shell","title":"<code>shell</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_6","title":"Usage","text":"<pre><code>leverage terraform shell [option]\n</code></pre> <p>Open a shell into the Terraform container in the current directory. An authenticated shell can only be opened at layer level.</p> <p> Terraform shell environment documentation</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#options_5","title":"Options","text":"<ul> <li><code>--mfa</code>: Authenticate via MFA upon launching shell.</li> <li><code>--sso</code>: Authenticate via SSO upon launching shell.</li> </ul> <p>Note: When <code>--sso</code> flag is used, the <code>--mfa</code> flag status is ignored.</p> <p>What if I want to run a Terraform command that is not supported by the CLI?</p> <p>One common error you could encounter is <code>\"Error acquiring the state lock\"</code>, where you might need to use <code>force-unlock</code>. You can do the following:</p> <ol> <li><code>leverage terraform shell --sso</code>.       </li> <li>Then from inside the container: <code>terraform force-unlock LOCK-ID</code>.</li> </ol>"},{"location":"user-guide/leverage-cli/reference/terraform/#format","title":"<code>format</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_7","title":"Usage","text":"<pre><code>leverage terraform format [arguments]\n</code></pre> <p>Equivalent to <code>terraform fmt -recursive</code>.</p> <p>Recursively format all files in the architecture to the Terraform code style.</p> <p>All arguments given are passed as received to Terraform.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#validate","title":"<code>validate</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_8","title":"Usage","text":"<pre><code>leverage terraform validate\n</code></pre> <p>Equivalent to <code>terraform validate</code>.</p> <p>Check the infrastructure definition's consistency.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/#validate-layout","title":"<code>validate-layout</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_9","title":"Usage","text":"<pre><code>leverage terraform validate-layout\n</code></pre> <p>Check the Terraform backend configuration in the code definition.</p> <p>When you are setting up the backend layer for the very first time, the S3 bucket does not yet exist. When running validations, Leverage CLI will detect that the S3 Key does not exist or cannot be generated. Therefore, it is necessary to first create the S3 bucket by using the init <code>--skip-validation</code> flag in the initialization process, and then move the \"tfstate\" file to it.</p> <p>Values checked:</p> <ul> <li>Environment name in account configuration</li> <li>S3 bucket key</li> <li>AWS CLI profile name prefix</li> <li>S3 Bucket name prefix</li> <li>DynamoDB locking table name prefix</li> </ul>"},{"location":"user-guide/leverage-cli/reference/terraform/#import","title":"<code>import</code>","text":""},{"location":"user-guide/leverage-cli/reference/terraform/#usage_10","title":"Usage","text":"<pre><code>leverage terraform import ADDRESS ID\n</code></pre> <p>Equivalent to <code>terraform import</code>.</p> <p>Import the resource with the given ID into the Terraform state at the given ADDRESS.</p> <p>Can only be run at layer level.</p> <p>zsh globbing</p> <p>Zsh users may need to prepend <code>noglob</code> to the import command for it to be recognized correctly, as an alternative, square brackets can be escaped as <code>\\[\\]</code></p> <p>Examples:</p> <ul> <li>Opt-1:  <code>leverage tf import module.s3_bucket.aws_s3_bucket.this\\[0\\] s3-bag-data-bucket</code></li> <li>Opt-2:  <code>noglob leverage tf import module.s3_bucket.aws_s3_bucket.this[0] s3-bag-data-bucket</code> </li> </ul>"},{"location":"user-guide/leverage-cli/reference/tfautomv/","title":"Command: <code>tfautomv</code>","text":"<p>Regarding Leverage Toolbox versions</p> <p>For using this feature Leverage Toolbox versions <code>1.2.7-0.0.5</code> and up, or <code>1.3.5-0.0.1</code> and up must be used.</p> <p>The <code>tfautomv</code> command is a wrapper for a containerized installation of tfautomv. It provides the tfautomv executable with specific configuration values required by Leverage.</p> <p>It transparently handles authentication, whether it is Multi-Factor or via Single Sign-On, on behalf of the user in the commands that require it. SSO Authentication takes precedence over MFA when both are active. </p> <p>This command can only be run at layer level and will not run anywhere else in the project.</p>"},{"location":"user-guide/leverage-cli/reference/tfautomv/#run","title":"<code>run</code>","text":""},{"location":"user-guide/leverage-cli/reference/tfautomv/#usage","title":"Usage","text":"<pre><code>leverage tfautomv run [arguments]\n</code></pre> <p>Equivalent to <code>tfautomv</code>.</p> <p>All arguments given are passed as received to tfautomv. </p> <p>Example:</p> <pre><code>leverage tfautomv run --show-analysis --dry-run\n</code></pre>"},{"location":"user-guide/leverage-cli/reference/terraform/layers/","title":"Layers parameter","text":"<p>This parameter can be used with the following Leverage CLI Terraform commands:</p> <ul> <li><code>init</code></li> <li><code>plan</code></li> <li><code>apply</code></li> <li><code>output</code></li> <li><code>destroy</code></li> </ul> <p>Value:</p> Parameter Type Description <code>--layers</code> string A comma serparated list of layer's relative paths"},{"location":"user-guide/leverage-cli/reference/terraform/layers/#common-workflow","title":"Common workflow","text":"<p>When using the <code>--layers</code> parameter, these commands should be run from <code>account</code> or <code>layers-container-directory</code> directories.</p> <p>Example:</p> <p>For this structure:</p> <pre><code> home\n \u251c\u2500\u2500 user\n \u2502\u00a0\u00a0 \u2514\u2500\u2500 project\n \u2502\u00a0\u00a0     \u2514\u2500\u2500 management\n \u2502\u00a0\u00a0         \u251c\u2500\u2500 global\n \u2502\u00a0\u00a0         |   \u2514\u2500\u2500 security-base\n \u2502\u00a0\u00a0         |   \u2514\u2500\u2500 sso\n \u2502\u00a0\u00a0         \u2514\u2500\u2500 us-east-1\n \u2502\u00a0\u00a0             \u2514\u2500\u2500 terraform-backend\n</code></pre> <p>...any of the aforementioned commands, combined with <code>--layers</code>, can be called from <code>/home/user/project/management/</code>, <code>/home/user/project/management/global/</code> or <code>/home/user/project/management/us-east-1/</code>.</p> <p>The value for this parameter is a comma separated list of layer's relative paths.</p> <p>Leverage CLI will iterate through the layer's relative paths, going into each one, executing the command and going back to the original directory.</p> <p>Example:</p> <p>For this command, from <code>/home/user/project/management/</code>:</p> <pre><code>leverage tf plan --layers us-east-1/terraform-backend,global/security-base\n</code></pre> <p>...the Leverage CLI will:</p> <ul> <li>check each one of the layer's relative paths exists</li> <li>go into <code>us-east-1/terraform-backend</code> directory</li> <li>run the <code>plan</code> command</li> <li>go back to <code>/home/user/project/management/</code></li> <li>go into <code>global/security-base</code> directory</li> <li>run the <code>plan</code> command</li> <li>go back to <code>/home/user/project/management/</code></li> </ul>"},{"location":"user-guide/leverage-cli/reference/terraform/layers/#the-init-case","title":"The <code>init</code> case","text":"<p>When running <code>init</code> Leverage CLI runs a validation.</p> <p>When using the <code>--layers</code> option, the validation is run for every layer before the command itself is run.</p> <p>Example:</p> <p>For this command, from <code>/home/user/project/management/</code>:</p> <pre><code>leverage tf init --layers us-east-1/terraform-backend,global/security-base\n</code></pre> <p>...the Leverage CLI will:</p> <ul> <li>check each one of the layer's relative paths exists</li> <li>go into <code>us-east-1/terraform-backend</code> directory</li> <li>run the <code>validate-layout</code> command</li> <li>go back to <code>/home/user/project/management/</code></li> <li>go into <code>global/security-base</code> directory</li> <li>run the <code>validate-layout</code> command</li> <li>go back to <code>/home/user/project/management/</code></li> <li>go into <code>us-east-1/terraform-backend</code> directory</li> <li>run the <code>init</code> command</li> <li>go back to <code>/home/user/project/management/</code></li> <li>go into <code>global/security-base</code> directory</li> <li>run the <code>init</code> command</li> <li>go back to <code>/home/user/project/management/</code></li> </ul> <p>This is done this way to prevent truncated executions. Meaning, if any of the validation fails, the user will be able to fix whatever has to be fixed and run the command again as it is.</p> <p>Skipping the validation</p> <p>The <code>--skip-validation</code> flag still can be used here with <code>--layers</code>.</p>"},{"location":"user-guide/leverage-cli/reference/terraform/layers/#terraform-parameters-and-flags","title":"Terraform parameters and flags","text":"<p>Terraform parameters and flags can still be passed when using the <code>--layers</code> parameter.</p> <p>Example:</p> <pre><code>leverage tf apply --layers us-east-1/terraform-backend,global/security-base -auto-approve\n</code></pre>"},{"location":"user-guide/ref-architecture-ansible/configs/","title":"Configuration: Ansible Playbooks","text":""},{"location":"user-guide/ref-architecture-ansible/configs/#overview","title":"Overview","text":"<p>This repository contains all the Ansible Playbooks configuration  files used to create binbash Leverage\u2122 Reference Architecture for AWS.</p>"},{"location":"user-guide/ref-architecture-ansible/configs/#ansible-playbook-documentation","title":"Ansible Playbook Documentation","text":"<p>Check out the README.md under contained under each repo</p> <p>Playbooks Documentation</p> <p> User Management &amp; Security </p> <ul> <li> sec-users</li> </ul> <p> VPN Server </p> <ul> <li> vpn-pritunl</li> </ul> <p> Monitoring &amp; Alerting </p> <ul> <li> prometheus-grafana</li> </ul> <p> Centralized Logs </p> <ul> <li> eskibana</li> </ul> <p> CI/CD </p> <ul> <li> jenkins</li> <li> spinnaker</li> <li> droneci</li> <li> webhook</li> </ul> <p> Secret Mgmt </p> <ul> <li> hashicorp-vault</li> </ul>"},{"location":"user-guide/ref-architecture-ansible/workflow/","title":"Workflow","text":"<p>Leverage CLI</p> <ul> <li> <p>We rely on the <code>Leverage CLI</code> as a wrapper to run ansible commands that consistently use the same config files and secrets.</p> </li> <li> <p>You are encouraged to read more about our <code>Leverage CLI</code> how it works section to better understand it.</p> </li> </ul> <p> Ansible Infra</p> <ol> <li>Get into the folder that you need to work with (e.g. <code>ansible-playbook-vpn-pritunl</code>)</li> <li>Run <code>leverage run init</code> to get all the necessary Ansible roles based on each <code>requirements.yml</code></li> <li>Make whatever changes you need to make as stated in each Playbook Documentation (check Documentation section above)</li> <li>For a dry run execution use <code>leverage run apply\\[--check\\]</code> if you only mean to preview those changes</li> <li>Run <code>leverage run apply</code> if you want to apply those changes</li> <li>If you want to target specific playbook tasks by tag (eg: common tag) you can run one of the following options:        <ul> <li>Opt-1:  <code>leverage run apply[\"--tags\",\"common\"]</code> </li> <li>Opt-2:  <code>noglob leverage run apply[\"--tags\",\"common\"]</code> </li> <li>Opt-3:  <code>leverage shell</code> and then <code>ansible-playbook setup.yml --tags common</code> </li> </ul> </li> </ol>"},{"location":"user-guide/ref-architecture-aws/configs/","title":"Project Configurations","text":"<p>Config files can be found under each <code>config</code> folders</p> <ul> <li> Global config file <code>/config/common.tfvars</code>  contains global context TF variables that we inject to TF commands which are used by all sub-directories such as  <code>leverage terraform plan</code> or <code>leverage terraform apply</code> and which cannot be stored in <code>backend.tfvars</code> due to TF.</li> <li> Account config files <ul> <li><code>backend.tfvars</code>  contains TF variables that are mainly used to configure TF backend but since  <code>profile</code> and <code>region</code> are defined there, we also use them to inject those values into other TF commands.</li> <li><code>account.tfvars</code>  contains TF variables that are specific to an AWS account.</li> </ul> </li> <li> Global <code>common-variables.tf</code> file <code>/config/common-variables.tfvars</code> contains global context TF variables that we symlink to all terraform layers code e.g. shared/us-east-1/tools-vpn-server/common-variables.tf.</li> <li> <code>build.env</code> file<ul> <li>By utilizing the <code>build.env</code> capability,   you can easily change some default behaviors of the CLI. Read more in its dedicated   \"Override defaults via <code>build.env</code> file\" section.</li> </ul> </li> </ul>"},{"location":"user-guide/ref-architecture-aws/configs/#aws-profile","title":"AWS Profile","text":"<ul> <li>File <code>backend.tfvars</code> will inject the profile name that TF will use to make changes on AWS.</li> <li>Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account.</li> <li>Please follow to correctly setup your AWS Credentials<ul> <li>user-guide/features/identities</li> <li>user-guide/features/identities/credentials </li> </ul> </li> <li>Read the following page leverage doc to understand how to set up a profile to assume  a role</li> </ul>"},{"location":"user-guide/ref-architecture-aws/credentials/","title":"Project Credentials","text":""},{"location":"user-guide/ref-architecture-aws/credentials/#aws-profile","title":"AWS Profile","text":"<ul> <li>File <code>backend.tfvars</code> will inject the profile name that TF will use to make changes on AWS.</li> <li>Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account.</li> <li>Please follow to correctly setup your AWS Credentials<ul> <li>user-guide/features/identities</li> <li>user-guide/features/identities/credentials </li> </ul> </li> <li>Read the following page leverage doc to understand how to set up a profile to assume  a role</li> </ul>"},{"location":"user-guide/ref-architecture-aws/dir-structure/","title":"Project Structure","text":""},{"location":"user-guide/ref-architecture-aws/dir-structure/#filesfolders-organization","title":"Files/Folders Organization","text":"<p>The following block provides a brief explanation of the chosen files/folders layout, under every account (<code>management</code>,  <code>shared</code>, <code>security</code>, etc) folder you will see a service layer structure similar to the following:</p> MyExample project file structure <pre><code>    ...\n    \u251c\u2500\u2500 \ud83d\udcc2 apps-devstg\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 config\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n    |   \u251c\u2500\u2500 \ud83d\udcc2 global\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 base-identities\n    |   \u251c\u2500\u2500 \ud83d\udcc2 us-east-1\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 backups --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-certificates\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-network\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 cdn-s3-frontend\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 databases-aurora\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 databases-mysql --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 databases-pgsql --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet-ansible --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-demoapps\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 k8s-kind\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 k8s-kops --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 notifications\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-audit\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-base\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-certs\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-firewall --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-keys-dr\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 storage\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 tools-cloud-nuke\n    |   \u2514\u2500\u2500 \ud83d\udcc2 us-east-2\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    |    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 security-keys\n    \u251c\u2500\u2500 \ud83d\udcc2 apps-prd\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 config\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 global\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 base-identities\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 us-east-1\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 backups --\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-network\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 cdn-s3-frontend\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet --\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 notifications\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-audit\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-base\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-certs\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    |    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 security-keys\n    \u251c\u2500\u2500 \ud83d\udcc4 build.env\n    \u251c\u2500\u2500 \ud83d\udcc4 build.py\n    \u251c\u2500\u2500 \ud83d\udcc2 config\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars\n    \u251c\u2500\u2500 \ud83d\udcc2 management\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 config\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 global\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-identities\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 cost-mgmt\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 organizations\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 sso\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 backups\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 notifications\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-audit\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-base\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-keys\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring-dr --\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2\n    |    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring\n    \u251c\u2500\u2500 \ud83d\udcc2 network\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 config\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 global\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 base-identities\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-network\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 network-firewall\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 notifications\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-audit\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-base\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-keys\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 transit-gateway\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-network\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 network-firewall\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-keys\n    |    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 transit-gateway\n    \u251c\u2500\u2500 \ud83d\udcc2 security\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 config\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 global\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 base-identities\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 firewall-manager\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 notifications\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-audit\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-base\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    |   \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-keys\n    |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-audit\n    |    \u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    |    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring --\n    \u2514\u2500\u2500 \ud83d\udcc2 shared\n    \u251c\u2500\u2500 \ud83d\udcc2 config\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars\n    \u251c\u2500\u2500 \ud83d\udcc2 global\n    |   \u251c\u2500\u2500 \ud83d\udcc2 base-dns\n    |   \u2514\u2500\u2500 \ud83d\udcc2 base-identities\n    \u251c\u2500\u2500 \ud83d\udcc2 us-east-1\n    |   \u251c\u2500\u2500 \ud83d\udcc2 backups\n    |   \u251c\u2500\u2500 \ud83d\udcc2 base-network\n    |   \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend\n    |   \u251c\u2500\u2500 \ud83d\udcc2 container-registry\n    |   \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet --\n    |   \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks\n    |   \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-demoapps\n    |   \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-prd\n    |   \u251c\u2500\u2500 \ud83d\udcc2 notifications\n    |   \u251c\u2500\u2500 \ud83d\udcc2 security-audit\n    |   \u251c\u2500\u2500 \ud83d\udcc2 security-base\n    |   \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    |   \u251c\u2500\u2500 \ud83d\udcc2 storage\n    |   \u251c\u2500\u2500 \ud83d\udcc2 tools-cloud-scheduler-stop-start\n    |   \u251c\u2500\u2500 \ud83d\udcc2 tools-eskibana\n    |   \u251c\u2500\u2500 \ud83d\udcc2 tools-github-selfhosted-runners\n    |   \u251c\u2500\u2500 \ud83d\udcc2 tools-jenkins --\n    |   \u251c\u2500\u2500 \ud83d\udcc2 tools-managedeskibana\n    |   \u251c\u2500\u2500 \ud83d\udcc2 tools-prometheus\n    |   \u251c\u2500\u2500 \ud83d\udcc2 tools-vault\n    |   \u251c\u2500\u2500 \ud83d\udcc2 tools-vpn-server\n    |   \u2514\u2500\u2500 \ud83d\udcc2 tools-webhooks --\n    \u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2\n    \u251c\u2500\u2500 \ud83d\udcc2 base-network\n    \u251c\u2500\u2500 \ud83d\udcc2 container-registry\n    \u251c\u2500\u2500 \ud83d\udcc2 security-compliance --\n    \u251c\u2500\u2500 \ud83d\udcc2 security-keys\n    \u251c\u2500\u2500 \ud83d\udcc2 tools-eskibana\n    \u2514\u2500\u2500 \ud83d\udcc2 tools-prometheus\n</code></pre> <p>Configuration files are organized by environments (e.g. dev, stg, prd), and service type, which we call layers (identities, organizations, storage, etc) to keep any changes made to them separate. Within each of those layers folders you should find the Terraform files that are used to define all the  resources that belong to such account environment and specific layer.</p> <p>Project file structure </p> <p>An extended project file structure could be found  here While some other basic concepts and naming conventions in the context of Leverage like \"project\" and \"layer\"  here</p> <p></p> Figure: AWS Organization multi-account architecture diagram. (Source: binbash Leverage, \"Leverage Reference Architecture components\", binbash Leverage Doc, accessed August 4th 2021).  <p>NOTE: As a convention folders with the <code>--</code> suffix reflect that the resources are not currently created in AWS, basically they've been destroyed or not yet exist. </p> <p>Such layer separation is meant to avoid situations in which a single folder contains a lot of resources.  That is important to avoid because at some point, running <code>leverage terraform plan / apply</code> starts taking  too long and that becomes a problem.</p> <p>This organization also provides a layout that is easier to navigate and discover.  You simply start with the accounts at the top level and then you get to explore the resource categories within  each account.</p>"},{"location":"user-guide/ref-architecture-aws/tf-state-setup/","title":"Terraform Remote State","text":"<p>In the <code>base-tf-backend</code> folder you should find the definition of the infrastructure that needs to be deployed before  you can get to work with anything else.</p> <p>IMPORTANT: THIS IS ONLY NEEDED IF THE BACKEND WAS NOT CREATED YET. IF THE BACKEND ALREADY EXISTS YOU JUST USE IT.</p> <p>Read More</p> <ul> <li> Terraform - S3 &amp; DynamoDB for Remote State Storage &amp; Locking</li> </ul>"},{"location":"user-guide/ref-architecture-aws/tf-state-setup/#configuration","title":"Configuration","text":"<p>Config files can be found under each <code>config</code> folders</p> <ul> <li> Global config file <code>/config/common.tfvars</code>  contains global context TF variables that we inject to TF commands which are used by all sub-directories such as  <code>leverage terraform plan</code> or <code>leverage terraform apply</code> and which cannot be stored in <code>backend.config</code> due to TF.</li> <li> Account config files <ul> <li><code>backend.tfvars</code>  contains TF variables that are mainly used to configure TF backend but since  <code>profile</code> and <code>region</code> are defined there, we also use them to inject those values into other TF commands.</li> <li><code>account.tfvars</code>  contains TF variables that are specific to an AWS account.</li> </ul> </li> </ul>"},{"location":"user-guide/ref-architecture-aws/tf-state-setup/#aws-profile","title":"AWS Profile","text":"<ul> <li>File <code>backend.tfvars</code> will inject the profile name that TF will use to make changes on AWS.</li> <li>Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account.</li> <li>Please follow to correctly setup your AWS Credentials<ul> <li>user-guide/features/identities</li> <li>user-guide/features/identities/credentials </li> </ul> </li> <li>Read the following page leverage doc to understand how to set up a profile to assume  a role</li> </ul>"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/","title":"Terraform - S3 &amp; DynamoDB for Remote State Storage &amp; Locking","text":""},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#overview","title":"Overview","text":"<p>Use this terraform configuration files to create the S3 bucket &amp; DynamoDB table needed to use Terraform Remote State Storage &amp; Locking.</p> <p></p> Figure: Terraform remote state store &amp; locking necessary AWS S3 bucket and DynamoDB table components. (Source: binbash Leverage,   \"Terraform Module: Terraform Backend\", Terraform modules registry, accessed December 3rd 2020)."},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#prerequisites","title":"Prerequisites","text":"<p>Terraform repo structure + state backend initialization</p> <ol> <li>Ensure you have <code>Leverage CLI</code> installed in your system</li> <li>Refer to Configuration Pre-requisites to understand how to set up the   configuration files required for this layer. Where you must build your   Terraform Reference Architecture account structure</li> <li>Leveraged by the Infrastructure as Code (IaC) Library through the  terraform-aws-tfstate-backend module<ul> <li>/management/base-tf-backend</li> <li>/security/base-tf-backend</li> <li>/shared/base-tf-backend</li> <li>/network/base-tf-backend</li> <li>/apps-devstg/base-tf-backend</li> <li>/apps-prd/base-tf-backend</li> </ul> </li> </ol>"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#set-up","title":"Set up","text":"<p>Steps to initialize your tf-backend</p> <ol> <li>At the corresponding account dir,    eg: /shared/base-tf-backend then,</li> <li>Run <code>leverage terraform init --skip-validation</code></li> <li>Run <code>leverage terraform plan</code>, review the output to understand the expected changes</li> <li>Run <code>leverage terraform apply</code>, review the output once more and type <code>yes</code> if you are okay with that</li> <li> <p>This should create a <code>terraform.tfstate</code> file in this directory but we don't want to push that to the repository so    let's push the state to the backend we just created</p> <ul> <li>Open <code>config.tf</code> and uncomment the following lines: <pre><code>  # backend \"s3\" {\n  #   key = \"shared/tf-backend/terraform.tfstate\"\n  # }\n</code></pre></li> <li>Run <code>leverage terraform init</code> and type <code>yes</code> when Terraform asks if you want to import the state to the S3 backend</li> <li>Done. You can remove <code>terraform.tfstate</code> now (and also <code>terraform.tfstate.backup</code> if available)</li> </ul> </li> </ol>"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#expected-workflow-after-set-up","title":"Expected workflow after set up","text":"<p> this tape must be updated </p>"},{"location":"user-guide/ref-architecture-aws/workflow/","title":"Workflow","text":""},{"location":"user-guide/ref-architecture-aws/workflow/#steps","title":"Steps","text":"<p>Terraform Workflow</p> <ol> <li>Make sure you've read and prepared your local development environment following the Overview base-configurations section.</li> <li>Depending in which Terraform Ref Architecture repo you are working, please review and assure you meet all the terraform aws pre-requisites or  terraform aws pre-requisites <ul> <li> Remote State</li> <li> Configuration files</li> <li> AWS Profile and credentials</li> <li> Vault token secret</li> </ul> </li> <li>Get into the folder that you need to work with (e.g. <code>2_identities</code>)</li> <li>Run <code>leverage terraform init</code></li> <li>Make whatever changes you need to make</li> <li>Run <code>leverage terraform plan</code> if you only mean to preview those changes</li> <li>Run <code>leverage terraform apply</code> if you want to review and likely apply those changes</li> </ol> <p>Info</p> <p>Please note you can make use of the <code>--layers</code> parameter to apply Terraform commands to more than one layer. </p> <p>For more information see here</p> <p>Note</p> <p>If desired, at step #5 you could submit a PR, allowing you and the rest of the team to  understand and review what changes would be made to your AWS Cloud Architecture components before executing  <code>leverage terraform apply</code> (<code>terraform apply</code>). This brings the huge benefit of treating changes with a GitOps oriented  approach, basically as we should treat any other code &amp; infrastructure change, and integrate it with the  rest of our tools and practices like CI/CD, in</p>"},{"location":"user-guide/ref-architecture-aws/workflow/#running-in-automation","title":"Running in Automation","text":"Figure: Running terraform with AWS in automation (just as reference)."},{"location":"user-guide/ref-architecture-aws/workflow/#read-more","title":"Read More","text":"<p>Extra resources</p> <ul> <li> Running Terraform in automation</li> </ul>"},{"location":"user-guide/ref-architecture-vault/configs/","title":"Project Configurations","text":"<p>Config files can be found under each <code>config</code> folders</p> <ul> <li> Global config file <code>/config/common.tfvars</code>  contains global context TF variables that we inject to TF commands which are used by all sub-directories such as  <code>leverage terraform plan</code> or <code>leverage terraform apply</code> and which cannot be stored in <code>backend.tfvars</code> due to TF.</li> <li> Account config files <ul> <li><code>backend.tfvars</code>  contains TF variables that are mainly used to configure TF backend but since  <code>profile</code> and <code>region</code> are defined there, we also use them to inject those values into other TF commands.</li> <li><code>account.tfvars</code>  contains TF variables that are specific to an AWS account.</li> </ul> </li> </ul>"},{"location":"user-guide/ref-architecture-vault/configs/#aws-profile","title":"AWS Profile","text":"<ul> <li>File <code>backend.tfvars</code> will inject the profile name that TF will use to make changes on AWS.</li> <li>Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account.</li> <li>Please follow to correctly setup your AWS Credentials<ul> <li>user-guide/features/identities</li> <li>user-guide/features/identities/credentials </li> </ul> </li> <li>Read the following page leverage doc to understand how to set up a profile to assume  a role</li> </ul>"},{"location":"user-guide/ref-architecture-vault/dir-structure/","title":"Files/Folders Organization","text":"<p>TODO</p>"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/","title":"Terraform - S3 &amp; DynamoDB for Remote State Storage &amp; Locking","text":""},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#overview","title":"Overview","text":"<p>Use this terraform configuration files to create the S3 bucket &amp; DynamoDB table needed to use Terraform Remote State Storage &amp; Locking.</p> <p></p> Figure: Terraform remote state store &amp; locking necessary AWS S3 bucket and DynamoDB table components. (Source: binbash Leverage,   \"Terraform Module: Terraform Backend\", Terraform modules registry, accessed December 3rd 2020)."},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#prerequisites","title":"Prerequisites","text":"<p>Terraform repo structure + state backend initialization</p> <ol> <li>Ensure you have <code>Leverage CLI</code> installed in your system</li> <li>Refer to Configuration Pre-requisites to understand how to set up the   configuration files required for this layer.</li> <li>Leveraged by the Infrastructure as Code (IaC) Library through the  terraform-aws-tfstate-backend module<ul> <li>/aws/base-tf-backend</li> <li>/hcp/base-tf-backend</li> </ul> </li> </ol>"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#set-up","title":"Set up","text":"<p>Steps to initialize your tf-backend</p> <ol> <li>At the corresponding account dir,    eg: /hcp/base-tf-backend then,</li> <li>Run <code>leverage terraform init</code></li> <li>Run <code>leverage terraform plan</code>, review the output to understand the expected changes</li> <li>Run <code>leverage terraform apply</code>, review the output once more and type <code>yes</code> if you are okay with that</li> <li> <p>This should create a <code>terraform.tfstate</code> file in this directory but we don't want to push that to the repository so    let's push the state to the backend we just created</p> <ul> <li>Open <code>config.tf</code> and uncomment the following lines: <pre><code>  # backend \"s3\" {\n  #   key = \"hcp/tf-backend/terraform.tfstate\"\n  # }\n</code></pre></li> <li>Run <code>leverage terraform init</code> and type <code>yes</code> when Terraform asks if you want to import the state to the S3 backend</li> <li>Done. You can remove <code>terraform.tfstate</code> now (and also <code>terraform.tfstate.backup</code> if available)</li> </ul> </li> </ol>"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#expected-workflow-after-set-up","title":"Expected workflow after set up","text":"<p> this tape must be updated </p>"},{"location":"user-guide/ref-architecture-vault/workflow/","title":"Workflow","text":""},{"location":"user-guide/ref-architecture-vault/workflow/#steps","title":"Steps","text":"<p>Terraform Workflow</p> <ol> <li>Make sure you've read and prepared your local development environment following the Overview base-configurations section.</li> <li>Depending in which Terraform Ref Architecture repo you are working, please review and assure you meet all the terraform aws pre-requisites or  terraform vault pre-requisites <ul> <li> Remote State</li> <li> Configuration files</li> <li> AWS Profile and credentials</li> <li> Vault token secret</li> </ul> </li> <li>Get into the folder that you need to work with (e.g. <code>2_identities</code>)</li> <li>Run <code>leverage terraform init</code></li> <li>Make whatever changes you need to make</li> <li>Run <code>leverage terraform plan</code> if you only mean to preview those changes</li> <li>Run <code>leverage terraform apply</code> if you want to review and likely apply those changes</li> </ol> <p>Note</p> <p>If desired, at step #5 you could submit a PR, allowing you and the rest of the team to  understand and review what changes would be made to your AWS Cloud Architecture components before executing  <code>leverage terraform apply</code> (<code>terraform apply</code>). This brings the huge benefit of treating changes with a GitOps oriented  approach, basically as we should treat any other code &amp; infrastructure change, and integrate it with the  rest of our tools and practices like CI/CD, in</p>"},{"location":"user-guide/ref-architecture-vault/workflow/#running-in-automation","title":"Running in Automation","text":"Figure: Running terraform with AWS in automation (just as reference)."},{"location":"user-guide/ref-architecture-vault/workflow/#read-more","title":"Read More","text":"<p>Extra resources</p> <ul> <li> Running Terraform in automation</li> </ul>"},{"location":"work-with-us/","title":"Work with us","text":""},{"location":"work-with-us/#customers-collaboration-methodology","title":"Customers collaboration methodology","text":"<p>What are all the steps of an engagement</p> <ul> <li> 1st Stage: Leverage Customer Tech Intro Interview<ol> <li>Complete our binbash Leverage project evaluation form     so we can get to know your project, find out if you're a good fit and get in contact with you. </li> <li>Schedule a tech intro interview meeting to understand which are your exact challenges and do a Leverage    Reference Architecture feasibility assessment.</li> </ol> </li> <li> 2nd Stage: Leverage Reference Architecture Review<ol> <li>If we can contribute, we'll execute a Mutual NDA (ours or yours), then walk your through to complete our binbash Leverage due diligence for Reference Architecture form.</li> <li>Once we completely understand your requirements we'll prepare a comprehensive proposal including the complete    \"Leverage Implementation Action Plan Roadmap\" (also known as Statement     of Work - SOW) detailing every task for the entire project. </li> <li>After you review it and we agree on the general scope, a Services Agreement (SA) is signed.</li> <li>The project kick-off day is scheduled. </li> </ol> </li> <li> 3rd Stage: Leverage Ref Architecture Implementation <ol> <li>The Roadmap (SOW) is executed, we'll send an invoice for the deposit and first Sprint starts.</li> </ol> </li> <li> 4rth Stage: binbash Leverage Support<ol> <li>During and after finishing the complete Roadmap we'll provide commercial support, maintenance    and upgrades for our work over the long term.</li> </ol> </li> </ul>"},{"location":"work-with-us/#work-methodology-intro-video","title":"Work methodology intro video","text":""},{"location":"work-with-us/#customer-support-workflow","title":"Customer Support workflow","text":""},{"location":"work-with-us/#read-more","title":"Read More","text":"<p>Related articles</p> <ul> <li> FAQs | Agreement and statement of work</li> </ul>"},{"location":"work-with-us/careers/","title":"Careers","text":""},{"location":"work-with-us/careers/#how-we-work","title":"How we work","text":"<p>binbash work culture</p> <p> Fully Remote</p> <p>binbash was founded as a remote-first company. That means you can always work from home,  a co-working place, a nice cafe, or wherever else you feel comfortable, and you'll have almost complete control over your working hours.  Why \"almost\"? Because depending on the current projects we'll require few hours of overlap between all Leverage collaborators for some specific meetings or shared sessions (pair-programming). </p> <p> Distributed Team</p> <p>Despite the fact that our collaborators are currently located in \ud83c\udde6\ud83c\uddf7 Argentina, \ud83c\udde7\ud83c\uddf7 Brazil and \ud83c\uddfa\ud83c\uddfe Uruguay, consider we are currently hiring from most countries in the time zones  between  GMT-7 (e.g. California, USA) to  GMT+2 (e.g., Berlin, Germany).</p> <p> We promote life-work balance</p> <p>Job burnout is an epidemic \ud83d\ude46, and we tech workers are especially at risk. So we'll do our best to de-stress  our workforce at binbash. In order to achieve this we offer:</p> <ul> <li>Remote work that lets you control your hours and physical location.</li> <li>Normal working hours (prime-time 9am-5pm GTM-3), in average no more than ~30-40hs per week, and we don't   work during weekends or your country of residence national holidays.</li> <li>Project management and planning that will take into consideration the time zone of all our team members.</li> <li>A flexible vacation policy where you could take 4 weeks per year away from the keyboard. If more time is needed   we could always try to arrange it for you. </li> <li>No ON-CALL rotation. We only offer support contracts with SLAs of responses on prime time business days hours   exclusively.</li> <li>You will take on big challenges, but the hours are reasonable.</li> <li>Everyone is treated fairly and with respect, but where disagreement and feedback is always welcome.</li> <li>That is welcoming, safe, and inclusive for people of all cultures, genders, and races.</li> </ul>"},{"location":"work-with-us/careers/#leverage-software-devops-engineer-profile","title":"Leverage Software / DevOps Engineer Profile","text":"<p>What You'll Work On (our tech stack)  </p> <ul> <li> <p> Infrastructure as Code (IaC) Library</p> <p>Create a collection of reusable, tested, production-ready E2E AWS oriented infrastructure modules  (e.g., VPC, IAM, Kubernetes, Prometheus, Grafana, EFK, Consul, Vault, Jenkins, etc.) using several tool and  languages: Terraform, Ansible, Helm, Dockerfiles, Python, Bash and Makefiles.</p> </li> <li> <p> Reference Architecture</p> <p>Improve, maintain, extend and update our reference architecture, which has been designed under optimal configs  for the most popular modern web and mobile applications needs. Its design is fully based on the  AWS Well Architected Framework.</p> </li> <li> <p> Open Source &amp; Leverage DevOps Tools </p> <p>Contribute to our open source projects to continue building a fundamentally better DevOps experience, including our open source modules,  leverage python CLI,  Makefiles Lib among others.        </p> </li> <li> <p> Document team knowledge</p> <p>Get siloed and not yet documented knowledge and extend the Leverage documentation, such as  creating knowledgebase articles, runbooks, and other documentation for the internal team as well as binbash Leverage customers.</p> </li> <li> <p> Customer engineering support</p> <p>While participating in business-hours only support rotations, collaborate with customer requests, teach  binbash Leverage and DevOps best-practices, help resolve problems, escalate to internal SMEs, and automate and document the solutions so that problems are mitigated for future scenarios and users.</p> </li> <li> <p> Role scope and extra points!</p> <ul> <li>Responsible for the development, maintenance, support and delivery of binbash Leverage Products.</li> <li>Client side Leverage Reference Architecture solutions implementation, maintenance and support. </li> <li>Client side cloud solutions &amp; tech management (service delivery and project task management).</li> <li>Bring Leverage recs for re-engineering, bug fixes (issues) report and improvements based on real scenario implementations.</li> <li>Mentoring, KT, PRs and team tech follow up both internally and customer facing.   </li> </ul> <p>binbash is a small, distributed startup, so things are changing all the time, and from time to time we all wear  many hats. You should expect to write lot of code, but, depending on your interests, there will also be lot of  opportunities to write blog posts, give talks, contribute to open source, go to conferences, talk with customers,  do sales calls, think through financial questions, interview candidates, mentor new hires, design products,  come up with marketing ideas, discuss strategy, consider legal questions, and all the other tasks that are part of working at a small company.</p> </li> </ul> <p>Nice to have background</p> <ul> <li>  You hate repeating and doing the same thing twice and would rather spend the time to  automate a problem away than do the same task again.</li> <li>  You have strong English communication skills and are comfortable engaging with external  customers.</li> <li>  You know how to write code across the stack (\u201cDev\u201d) and feel very comfortable with Infra as Code (\"IaC\").</li> <li>  You have experience running production software environments (\"Ops\").</li> <li>  You have a strong background in software engineering and understanding of CI/CD  (or you are working hard on it!).</li> <li>  You have a passion for learning new technologies, tools and programming languages.</li> <li>  Bonus points for a sense of humor, empathy, autonomy and curiosity.</li> <li>  Note that even if we're concerned with prior experience like AWS, Linux and Terraform,  we're more concerned with curiosity about all areas of the Leverage stack and demonstrated ability to learn quickly and go  deep when necessary.</li> </ul>"},{"location":"work-with-us/contribute/","title":"Contribute and Developing binbash Leverage","text":"<p>This document explains how to get started with developing for Leverage Reference Architecture. It includes how to build, test, and release new versions.</p>"},{"location":"work-with-us/contribute/#quick-start","title":"Quick Start","text":""},{"location":"work-with-us/contribute/#getting-the-code","title":"Getting the code","text":"<p>The code must be checked out from this same github.com repo inside the binbash Leverage Github Organization.</p> <pre><code>git clone git@github.com:binbashar/le-tf-infra-aws.git\ncd le-tf-infra-aws\ncd ..\n\ngit clone git@github.com:binbashar/le-ansible-infra.git\ncd le-ansible-infra\ncd ..\n</code></pre>"},{"location":"work-with-us/contribute/#initial-developer-environment-build","title":"Initial developer environment build","text":"<p>TODO</p>"},{"location":"work-with-us/contribute/#dependencies","title":"Dependencies","text":"<p>This guide requires you to install X v0.1 or newer.</p>"},{"location":"work-with-us/contribute/#deploying","title":"Deploying","text":"<p>To deploy the Leverage Reference Architecture onto AWS. Please check the deployment guide</p>"},{"location":"work-with-us/contribute/#testing","title":"Testing","text":"<p>To run tests, just run...</p>"},{"location":"work-with-us/contribute/#releasing","title":"Releasing","text":""},{"location":"work-with-us/contribute/#circleci-pr-auto-release-job","title":"CircleCi PR auto-release job","text":"<ul> <li>https://circleci.com/gh/binbashar/bb-devops-tf-infra-aws</li> <li>NOTE: Will only run after merged PR.</li> </ul>"},{"location":"work-with-us/faqs/","title":"Frequently Asked Questions (FAQs)","text":""},{"location":"work-with-us/faqs/#target-audience","title":"Target audience","text":"<p>Who is Leverage's target audience?</p> <ul> <li> <p> Leverage is mainly oriented to  Latam, North America and  European startup's CTOs, VPEs, Engineering Managers and/or team leads  (Software Architects / DevOps Engineers / Cloud Solutions Architects)  looking to rapidly set and host their modern web and mobile applications and systems in  Amazon Web Services (\u2705 typically in just a few weeks!). </p> </li> <li> <p> Oriented to Development leads or teams looking to solve their current AWS infrastructure and software delivery  business needs in a securely and reliably manner, under the most modern best practices.</p> </li> <li> <p> Your Entire AWS Cloud solutions based on DevOps practices will be achieved:</p> <ul> <li> Containerization</li> <li> Infrastructure as Code</li> <li> Container Orchestration (K8s) &amp; Application Services</li> <li> CI / CD</li> <li> Security, Compliance &amp; Reliability</li> <li> Cost Optimization &amp; Performance Efficiency</li> <li> Observability &amp; Monitoring</li> </ul> </li> <li> <p> Moreover, if you are looking to have the complete control of the source code, and of course be able to run it without us, such as building new Development environments and supporting your Production Cloud environments,  you're a great fit for the Leverage AWS Cloud Solutions Reference Architecture model.</p> </li> </ul> <p>And remember you could implement yourself or we could implement it for you! \ud83d\udcaa</p>"},{"location":"work-with-us/faqs/#agreement-and-statement-of-work","title":"Agreement and statement of work","text":""},{"location":"work-with-us/faqs/#project-kick-off","title":"Project Kick-Off","text":"<p> Project Kick-Off</p> <p>Once the agreement contract and NDA are signed we estimate 15 days to have the team ready to start the project following the proposed Roadmap (\u201cStatement of work\u201d) that describes at length exactly what you'll receive.</p>"},{"location":"work-with-us/faqs/#assignments-and-delivery","title":"Assignments and Delivery","text":"<p> Assignments and Delivery</p> <p>After gathering all the customer project requirements and specifications we'll adjust the Reference Architecture based on your needs. As a result we'll develop and present the Leverage Reference Architecture for AWS implementation Roadmap. </p> <p>A typical Roadmap (\u201cStatement of Work\u201d) includes a set number of Iterations (sprints).  We try to keep a narrow scope for each Iteration so that we can tightly control how hours get spent to avoid overruns. We typically avoid adding tasks to a running Iteration so that the scope does not grow.  That's also why we have an allocation for to specific long lived tasks:</p> <ul> <li>General-Task-1: DevOps and Solutions Architecture challenge, definitions, tasks (PM), reviews, issues and audit.</li> <li>General-Task-2: WEEKLY FOLLOW-UP Meeting, </li> </ul> <p>Which is work that falls outside of the current Iteration specific tasks. This is for special requests, meetings, pair programming sessions, extra documentation, etc.</p> <p>binbash will participate and review the planned tasks along the customer:</p> <ul> <li> planned roadmap features</li> <li> bug fixes</li> <li> Implementation support</li> </ul> <p>Using the relevant ticketing system (Jira) to prioritize and plan the corresponding work plan.</p>"},{"location":"work-with-us/faqs/#reports-and-invoicing","title":"Reports and Invoicing","text":"<p> Reports and Invoicing</p> <p>Weekly task reports and tasks management agile metrics. We use Toggl to track all our time by client, project, sprint, and developer. We then import these hours into Quickbooks for invoicing.</p>"},{"location":"work-with-us/faqs/#rates-and-billing","title":"Rates and Billing","text":"<p> Rates and pricing plans</p> <ul> <li> <p> Pre-paid package subscriptions: A number of prepaid hours is agreed according to the needs  of the project. It could be a \"Basic Plan\" of 40 hours per month. Or a \"Premium Plan\" of 80 hours per month (if more hours are needed it could be reviewed). When buying in  bulk there is a discount on the value of the hour. When you pay for the package you start discounting the hours from the total as they are used, and if there are unused hours left, consider that maximum 20%  could be transferred for the next month.</p> </li> <li> <p> On-demand Business Subscription: There are a certain number of hours tracked each month, as planned tasks are demanded. The total spent hours will be reported  each month. There is a monthly minimum of 40 hours per month. Support tasks maximum estimated effort should be between 80 and 120 hs / month.</p> </li> </ul> <p> Billing</p> <p>The Customer will be billed every month. Invoices are due within 15 days of issue. We accept payments via US Bank ACH, Bill.com, and Payoneer. Rates include all applicable taxes and duties as required by law.</p>"},{"location":"work-with-us/support/","title":"Support","text":""},{"location":"work-with-us/support/#leverage-reference-architecture","title":"Leverage Reference Architecture","text":"<p>Please create a Github Issue to get immediate support from the binbash Leverage Team</p>"},{"location":"work-with-us/support/#our-engineering-support-team","title":"Our Engineering &amp; Support Team","text":""},{"location":"work-with-us/support/#aws-well-architected-review","title":"AWS Well Architected Review","text":"<p>Feel free to contact us for an  AWS Well Architected Framework Review </p> <p></p> <p> Well Architected Framework Review Reference Study Case</p> <ul> <li> Operational Excellence</li> <li> Security</li> <li> Cost Optimization</li> <li> Reliability</li> <li> Performance Efficiency</li> </ul> <p>WAF Exta Material</p> <ul> <li> DevSecOps Security Audit - v0.1</li> <li> WAF Cost Optimization Checklist - v0.1</li> </ul>"},{"location":"work-with-us/support/#read-more","title":"Read More","text":"<ul> <li>How AWS Well-Architected Reviews Can Drive a Customer-First Culture</li> </ul>"},{"location":"work-with-us/releases/releases-and-versions/","title":"Leverage Product Releases","text":"<p>Dear Leveragers, We're constantly kicking with a lot of improvements and some exciting new features</p>"},{"location":"work-with-us/releases/releases-and-versions/#reference-architecture","title":"Reference Architecture","text":"<p> RELEASES</p> <ul> <li>Releases | Reference Architecture for AWS</li> <li>Releases | Reference Architecture for HCP Vault</li> </ul>"},{"location":"work-with-us/releases/releases-and-versions/#leverage-cli","title":"Leverage CLI","text":"<p> RELEASES</p> <ul> <li>Releases | <code>leverage-cli</code></li> </ul>"},{"location":"work-with-us/releases/releases-and-versions/#infrastructure-as-code-library","title":"Infrastructure as Code Library","text":"<p> RELEASES</p> <p> Releases |Terraform Leverage\u2122 Modules :</p> <ul> <li>terraform-aws-waf-owasp</li> <li>terraform-aws-cost-billing-alarm</li> <li>terraform-aws-vpc-flowlogs</li> <li>terraform-aws-cost-budget</li> <li>terraform-aws-tfstate-backend</li> <li>terraform-aws-certbot-lambda</li> <li>terraform-aws-ec2-basic-layout</li> <li>terraform-aws-natgw-notifications</li> <li>terraform-aws-guardduty-multiaccount</li> <li>terraform-aws-network-firewall</li> <li>terraform-aws-backup-notifications</li> <li>terraform-aws-rds-export-to-s3</li> </ul> <p> Releases | Terraform Community Forks Modules:</p> <ul> <li>terraform-aws-sso</li> <li>...</li> </ul> <p> Releases | Helm Leverage\u2122 Charts:</p> <ul> <li>helm-charts</li> </ul>"},{"location":"work-with-us/releases/releases-and-versions/#documentation","title":"Documentation","text":"<p> RELEASES</p> <ul> <li>Releases | binbash Leverage\u2122 Documentation</li> </ul>"},{"location":"work-with-us/releases/versions-compatibility-matrix/","title":"Leverage Releases &amp; Versioning","text":"<p>binbash Leverage\u2122 and its components intends to be backward compatible, but due to the complex ecosystems of tools we manage this is not always possible.</p> <p>It is always recommended using the latest version of the Leverage CLI with the latest versions of the Reference Architecture for AWS. In case that's not possible we always recommend pinning versions to favor stability and doing controlled updates component by component based on the below presented compatibility matrix table.</p>"},{"location":"work-with-us/releases/versions-compatibility-matrix/#compatibility-matrix","title":"Compatibility Matrix","text":"Leverage Ref Arch version Leverage CLI Leverage Toolboximageversion v1.12.0 v1.9.x `binbash/leverage-toolbox` ==1.3.5-0.0.2 `binbash/leverage-toolbox` ==1.2.7-0.1.1 v1.8.x `binbash/leverage-toolbox` ==1.2.7-0.0.x v1.8.1 v1.7.2 `binbash/terraform-awscli-slim` &gt;=1.1.9 v1.7.2 v1.6.2 `binbash/terraform-awscli-slim` &gt;=1.1.3 <p>Releases which are crossed out should work, but are unlikely to get security or other fixes. We suggest they should be upgraded soon.</p>"},{"location":"work-with-us/releases/versions-compatibility-matrix/#release-schedule","title":"Release Schedule","text":"<p>This project does not follow the Terraform or other release schedule. Leverage aims to provide a reliable deployment and operations experience for the binbash Leverage\u2122 Reference Architecture for AWS, and typically releases about a quarter after the corresponding Terraform release. This time allows for the Terraform project to resolve any issues introduced by the new version and ensures that we can support the latest features.</p>"},{"location":"work-with-us/releases/versions-compatibility-matrix/#read-more","title":"Read more","text":"<p>Reference links</p> <p>Consider the following extra links as reference:</p> <ul> <li> Hashicorp Terraform releases</li> <li> Amazon EKS Kubernetes release calendar</li> <li> Amazon EKS Kubernetes versions - Amazon EKS</li> </ul>"},{"location":"work-with-us/roadmap/leverage-cli/overview/","title":"Roadmap","text":"<p>Leverage CLI Product Roadmap</p> <ul> <li> 2021</li> <li> 2022</li> <li> 2023</li> </ul>"},{"location":"work-with-us/roadmap/ref-arch/cost-optimization/","title":"Cost Optimization Roadmap","text":""},{"location":"work-with-us/roadmap/ref-arch/cost-optimization/#features-functionalities","title":"Features / Functionalities \ud83d\udcb0\ud83d\udcca\ud83d\udcc9","text":"Category Tags / Labels Feature / Functionality Status Doc CostOptimization(FinOps) leveragecloud-solutions-architecturedocumentation Calculate Cloud provider costs (Cost optimization focus!) \u2705 \u274c CostOptimization(FinOps) leveragecost-optimizationbilling AWS billing alarms + AWS Budget (forecasted account cost / RI Coverage) Notifications to Slack \u2705 \u274c CostOptimization(FinOps) leveragecost-optimizationcost Activate AWS Trusted Advisor cost related results \u2705 \u274c CostOptimization(FinOps) leveragecost-optimizationlambda-nuke Setup Lambda nuke to automatically clean up AWS account resources \u2705 \u274c CostOptimization(FinOps) leveragecost-optimizationlambda-scheduler Setup lambda scheduler for stop and start resources on AWS (EC2, ASG &amp; RDS) \u2705 \u274c"},{"location":"work-with-us/roadmap/ref-arch/demo-apps/","title":"Demo Applications Roadmap","text":""},{"location":"work-with-us/roadmap/ref-arch/demo-apps/#features-functionalities","title":"Features / Functionalities \ud83d\udc68\u200d\ud83d\udcbb\ud83c\udccf\ud83d\udd79\ud83c\udfaf","text":"Category Tags / Labels Feature / Functionality Status Doc CI/CD Pipelineautomation&amp; imple leverageci-cd-pipelinedockerbuild FrontEnd Build (Demo App): set up ECR, create IAM permissions, create pipelines (Jenkins / DroneCI), set up GitHub triggers 2021 Q2 \u274c CI/CD Pipelineautomation&amp; imple leverageci-cd-pipelinedeploy FrontEnd Deploy (Demo App): create pipelines (Jenkins / Spinnaker), set up ECR/Github triggers 2021 Q2 \u274c CI/CD Pipelineautomation&amp; imple leverageci-cd-pipelinedockerbuild BackEnd Build (Demo App): set up ECR, create IAM permissions, create pipelines (Jenkins / DroneCI), set up GitHub triggers 2021 Q2 \u274c CI/CD Pipelineautomation&amp; imple leverageci-cd-pipelinedeploy BackEnd Deploy (Demo App): create pipelines (Jenkins / Spinnaker), set up ECR triggers 2021 Q2 \u274c Testing (QA) leveragetestingci-cd-pipeline Unit Testing (Demo App): Dev team needs this to run on a Jenkins/CircleCI/DroneCI/Spinnaker pipeline 2021 Q2 \u274c Testing (QA) leveragetestingci-cd-pipeline Integration Testing (Demo App): QA team needs automation to run on a Jenkins/Spinnaker pipeline for AWS Cloud QA / Stage envs. 2021 Q2 \u274c Testing (QA) leveragetestingci-cd-pipeline E2E Functional / Aceptannce (Demo App): QA team needs Smoke tests automation to run on a Jenkins/Spinnaker pipeline for AWS Cloud Stage / Prod envs. 2021 Q2 \u274c Testing (QA) leveragetestingci-cd-pipeline Static Analysis (Demo App): code complexity, dependency graph, code frequency, contributors, code activity, and so on. 2021 Q2 \u274c CI/CD Pipelineautomation&amp; imple leverageci-cd-pipelinekubernetespbe Push Button Environments (Demo App): implement ephemeral environments. 2021 Q2 \u274c"},{"location":"work-with-us/roadmap/ref-arch/operational-excellence/","title":"Operational Excellence Roadmap","text":""},{"location":"work-with-us/roadmap/ref-arch/operational-excellence/#features-functionalities","title":"Features / Functionalities \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udcaf\ud83e\udd47","text":"Category Tags / Labels Feature / Functionality Status Doc CloudSolutionsArchitecture leveragecloud-solutions-architecturedocumentation DevSecOps &amp; AWS Cloud Solutions Architecture Doc \u2705 \u2705 CloudSolutionsArchitecture leveragecloud-solutions-architecturedocumentation Demo Applications architecture / Services Specifications Doc 2021 Q1 \u274c BaseInfrastructure leveragebase-infrastructuregithub Open Source Ref Architecture (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q2 \u274c BaseInfrastructure leveragebase-infrastructurecli Leverage CLI (https://github.com/binbashar/leverage) for every Reference Architecture Repo (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q2 \u274c BaseInfrastructure leveragebase-infrastructureorganizations Account Settings: Account Aliases and Password Policies, MFA, and enable IAM Access Analyzer across accounts. \u2705 \u274c BaseInfrastructure leveragebase-infrastructurestorage Storage: Account Enable encrypted EBS by default on all accounts; disable S3 public ACLs and policies \u2705 \u274c BaseInfrastructure leveragebase-infrastructureregion Define AWS Region / Multi-Region: keep in mind customers proximity, number of subnets, and other region limitations (https://infrastructure.aws) \u2705 \u274c BaseInfrastructure leveragebase-infrastructurevcs Terraform Github Ref Architecture / Pre-requisites: permissions to set up webhooks, create/configure repositories, create groups (Preferred SSO tool) 2021 Q2 \u274c BaseInfrastructure leveragebase-infrastructureorganizations AWS Organizations: development/stage, production, shared, security, legacy \u2705 \u2705 BaseInfrastructure leveragebase-infrastructureiam IAM: initial accounts (security users, groups, policies, roles; shared/appdevtsg/appprd DevOps role) \u2705 \u2705 BaseInfrastructure leveragebase-infrastructurevpc Networking 1: DNS, VPC, Subnets, Route Tables, NACLs, NATGW, VPC Peering or TGW \u2705 \u274c BaseInfrastructure leveragebase-infrastructurevpn Networking 2: VPN (install Pritunl, create organization, servers and users) \u2705 \u274c Kubernetes leveragekuberneteseks Production Grade Cluster: deploy EKS cluster as code \u2705 \u274c Kubernetes leveragekubernetesk8s K8s Helm + Terraform binbash Leverage repository backing all the K8s components deployment and configuration \u2705 \u274c Kubernetes leveragekubernetesmetrics Monitoring: metrics-server (metrcis for K8s HPA + Cluster AutoScaler + Prom node Exporter) + kube-state-metrics (for Grafana Dasboards) 2021 Q2 \u274c Kubernetes leveragekubernetesiamsecurity Security: Iam-authenticator, K8s RBAC (user, group and roles) \u2705 \u274c Kubernetes leveragekubernetesiam Implement AWS service accounts (IRSA for EKS) to provide IAM credentials to containers running inside a kubernetes cluster based on annotations. \u2705 \u274c Kubernetes leveragekubernetesdashboard Monitoring: K8s dashboard &amp; Weave Scope \u2705 \u274c Kubernetes leveragekubernetesingress Ingress: review, analyze and implement (alb skipper, k8s nginx, alb sigs, etc) \u2705 \u274c Kubernetes leveragekubernetesingress Load Balancing: review, analyze and implement Ingress w/ LB (AWS ALB or NLB + access logs) \u2705 \u274c Kubernetes leveragekubernetesdns Implement external-dns w/ annotations for K8s deployed Apps (https://github.com/kubernetes-sigs/external-dns) \u2705 \u274c Kubernetes leveragekubernetesservices-discovery Service Discovery: review, analyze and implement k8s native [env vars &amp; core-dns] or Consul 2021 Q3 \u274c Kubernetes leveragekubernetesservice-meshlinkerd Service Mesh: review, analyze and implement consul or linkerd2. 2021 Q3 \u274c CI/CDInfrastructure leverageci-cd-infrastructurejenkins Jenkins: installation, configuration, GitHub/GSuite/Bitbucket SSO-Auth integration \u2705 \u274c CI/CDInfrastructure leverageci-cd-infrastructurespinnaker Deployments / Jenkins or Tekton Pipelines + Argo-CD: installation, configuration, Github integration 2021 Q3 \u274c CI/CDInfrastructure leverageci-cd-infrastructuredroneci DroneCI: installation, configuration, Github integration 2021 Q4 \u274c CI/CDInfrastructure leverageci-cd-infrastructurewebhook Proxy Instance (webhooks) : installation, configuration, GitHub integration 2021 Q4 \u274c CI/CDInfrastructure leverageci-cd-infrastructureqa SonarQube: installation, configuration, GitHub/GSuite/Bitbucket SSO-Auth integration 2021 Q4 \u274c ApplicationsInfrastructure leverageapps-infrastructuredockercontainers Automate and containerized app environments by using docker images, enabling consistent experience in local environment and dev/stage/prod Cloud environments. \u2705 \u274c ApplicationsInfrastructure leverageapps-infrastructuredockercontainers Automate and containerized app environments by using docker images, enabling consistent experience in local environment and dev/stage/prod Cloud environments. \u2705 \u274c ApplicationsInfrastructure leverageapps-infrastructuredatabaserds Databases: RDS (most likely AWS Aurora MySql, single db for all microservices at first - Prod dedicated instance considering new auto-scaling feature and read-replicas) + RDS Proxy (if needed for high Cx N\u00b0) - Compliance: Consider using SSL/TLS to Encrypt a Connection to a DB Instance \u2705 \u274c ApplicationsInfrastructure leverageapps-infrastructurequeuesqs Queues: SQS (recommended for background workers and some microservices). Redis (AWS ElasticCache) / RabbitMQ (K8s Containerzied). \u2705 \u274c ApplicationsInfrastructure leverageapps-infrastructurestorages3 Storage: S3 (for the FrontEnd statics) \u2705 \u274c ApplicationsInfrastructure leverageapps-infrastructurecloudfrontcdn Caching: CloudFront (for the FrontEnd) w/ access logs \u2705 \u274c ApplicationsInfrastructure leverageapps-infrastructurecacheredis CacheLayer: AWS Elasticache (Memcache or Redis) \u2705 \u274c"},{"location":"work-with-us/roadmap/ref-arch/overview/","title":"Roadmap","text":"<p>Leverage AWS Cloud Solutions Reference Architecture Features / Functionalities per category</p> <ul> <li> Operational Excellence</li> <li> Reliability &amp; Performance</li> <li> Security</li> <li> Cost Optimization</li> <li> Demo Applications</li> </ul>"},{"location":"work-with-us/roadmap/ref-arch/reliability-performance/","title":"Reliability Performance Roadmap","text":""},{"location":"work-with-us/roadmap/ref-arch/reliability-performance/#features-functionalities","title":"Features / Functionalities \ud83d\ude80\u23f2\ud83d\udcca","text":"Category Tags / Labels Feature / Functionality Status Doc MonitoringMetrics&amp; Alerting leveragemonitoring-metrics-alertingprometheusgrafana Metrics: install and configure Prometheus (NodeExporter for EC2 / BlackBox exporter / Alert Monitroing), install and configure Grafana (K8s Plugin + Prometheus int + CloudWatch int) \u2705 \u274c MonitoringMetrics&amp; Alerting leveragemonitoring-metrics-alertinggrafanacloudwatch Metrics: Grafana + AWS Cloudwatch integrations config (https://github.com/monitoringartist/grafana-aws-cloudwatch-dashboards) 2021 Q2 \u274c MonitoringMetrics&amp; Alerting leveragemonitoring-metrics-alertingapm APM: review, analyze and implement (New Relic, DataDog, ElasticAPM Agent/Server) 2021 Q2 \u274c MonitoringMetrics&amp; Alerting leveragemonitoring-metrics-alertingdocumentation Define and document reference notification/escalation procedure \u2705 \u274c MonitoringMetrics&amp; Alerting leveragemonitoring-metrics-alerting Alerting: configure AlertsManager, Elastalert (optimized logs rotation when using it from docker image), PagerDuty, Slack according to the procedure above 2021 Q2 \u274c MonitoringMetrics&amp; Alerting leveragemonitoring-metrics-alertingprometheus Monitor Infra Tool Instances (WebHook Proxy, Jenkins, Vault, Pritunl, Prometheus, Grafana, etc) / implement monitoring via Prometheus + Grafana or Another Solution \u2705 \u274c MonitoringDistributedTracing leveragemonitoring-tracingjaeger Distributed Tracing Instrumentation: review, analyze and implement to detect and improve transactions performance and svs dep analysis (jaeger, instana, lightstep, AWS X-Ray, etc) 2021 Q3 \u274c MonitoringLogging leveragemonitoring-logsefk Logging / EFK - use separate indexes per K8s components &amp; apps/svc for each custer/env (segregating dev/stg from prd) + enable ES monitoring w/ X-Pack + configure curator to rotate indices + tool to improve index mgmt 2021 Q2 \u274c Performance&amp; Optimization leverageperformance-optimizationci-cd-pipeline Load Testing: set up and run continuous load tests pipelines (Jenkins) to determine and improve apps/services capacity through time (apapche ab, gatling, iperf, locust, taurus, BlazeMeter and https://github.com/loadimpact/k6) 2021 Q3 \u274c Performance&amp; Optimization leverageperformance-optimizationci-cd-pipeline Performance Testing (stress, soak, spike, etc): set up and run continuous performance tests pipelines (Jenkins) to measure performance through time (apapche ab, gatling, iperf, locust, taurus and BlazeMeter) 2021 Q3 \u274c Performance&amp; Optimization leverageperformance-optimizationkubernetes Tune K8S nodes (EC2 family type, size and AWS ASG -&gt; K8s HPA + Cluster AutoScaler ) 2021 Q3 \u274c Performance&amp; Optimization leverageperformance-optimizationkubernetes Tune K8S requests and limits per namespace (CPU and RAM) / https://github.com/FairwindsOps/goldilocks  2021 Q2 \u274c Performance&amp; Optimization leverageperformance-optimizations3 S3: ensure each bucket is using the proper storage types and persistence (automate mv these objs into lower $ storage tier w/ Life Cycle Policies or w/ S3 Intelligent-Tiering) \u2705 \u274c DisasterRecovery leveragedisaster-recoverybackup AWS Backup Service: RDS, EC2 (AMI), EBS, Dynamo, EFS, SFx, Storage Gw \u2705 \u274c DisasterRecovery leveragedisaster-recoverybackup Replication: S3 (CRR cross-region replication or SRR same-region replication) \u2705 \u274c DisasterRecovery leveragedisaster-recoverybackup Replication: VPC / Compute / Database (CRR cross-region replication) \u2705 \u274c DisasterRecovery leveragedisaster-recoverybackupkubernetes Backup and migrate Kubernetes applications and their persistent volumes w/ https://velero.io/  2021 Q3 \u274c DisasterRecovery leveragedocumentationdisaster-recovery Review: Disaster recovery plan, missing resources, RTO / RPO, level of automation 2021 Q4 \u274c DisasterRecovery leveragedocumentationdisaster-recovery Improve Plan: create a plan to improve the existing recovery plan and determine implementation phases 2021 Q4 \u274c DisasterRecovery leveragedocumentationdisaster-recovery Execute Plan: implement according to the plan, review/measure and iterate 2021 Q4 \u274c"},{"location":"work-with-us/roadmap/ref-arch/security/","title":"Security Roadmap","text":""},{"location":"work-with-us/roadmap/ref-arch/security/#features-functionalities","title":"Features / Functionalities \ud83d\udd10\u2705","text":"Category Tags / Labels Feature / Functionality Status Doc Security &amp;Audit (SecOps) leveragesecurity-auditpasswords Team Password Management: review, analyze and implement (passbolt, bitwarden, 1password, etc) \u2705 \u274c Security &amp;Audit (SecOps) leverageci-cd-infrastructuresecrets Secrets Management: review, analyze and implement Hashicorp vault 2021 Q1 \u274c Compliance(SecOps) leveragesecrets aws-vault implementation 2021 Q1 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditguardduty AWS Guarduty (Cross-Org with Master and member accounts setup + Trusted IP Lists and Threat IP Lists / Creation + Deletion of Filters for your GuardDuty findings to avoid false possitives + CloudWatch Rule to Lambda/ Cw-Metrics w/ CloudWatch Dashboard) \u2705 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditinspector AWS Inspector (w/ Ansible aws-inpector galaxy role per EC2) 2021 Q3 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditcloudtrail AWS CloudTrail w/ CloudWatch Dashboard + Alarms (include RootLogin) to Slack \u2705 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditfirewall AWS Firewall Manager (cross-org WAF + Shield integrated with ALBs, CloudFront and/or API-GW + Cross-org Sec group audit) \u2705 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditvpc AWS VPC Flow Logs \u2705 \u274c Security &amp;Audit (SecOps) leveragesecurity-audit ScoutSuite / Prowler: set up continuous, automated reports for each account (Evaluate the use of CloudMapper) 2021 Q2 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditusers Infra DevOps Tools OS Layer ( OS security updates and patches, root user config, ssh port, fail2ban ) \u2705 \u274c Compliance(SecOps) leveragesecurity-auditcompliance AWS Config: implement audit controls (evaluate automatic remediation if applicable) \u2705 \u274c Compliance(SecOps) leveragesecurity-auditcompliance AWS Security Hub: implement audit controls 2021 Q3 \u274c Compliance(SecOps) leveragesecurity-auditcompliance AWS Trusted Advisor: Review automated Costs Optimization, Performance, Security, Fault Tolerance and Service Limits audit results. \u2705 \u274c Compliance(SecOps) leveragesecurity-auditcompliancekubernetes Kubernetes Audit: implement on the clusters: KubeAudit, Kube-Bench, Kube-Hunter and Starboard. 2021 Q2 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditci-cd-pipeline Security and Vulnerability static code analysis (code dependencies): implement tools to continuously analyze and report vulnerabilities, automated reports (OWASP, bandit, snyk, HawkEye scanner, yarn audit, etc) 2021 Q2 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditdocker Containers: implement tools to continuously analyze and report on vulnerabilities (docker-bench-security, snyk, aquasecurity microscanner, docker-bench, aws ecr scan) \u2705 \u274c Security &amp;Audit (SecOps) leveragesecurity-audit Review and Fix all snyk high sev findings 2021 Q2 \u274c Security &amp;Audit (SecOps) leveragesecurity-audit Security and cost analysis in the CI PR automated process (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q1 \u274c Security &amp;Audit (SecOps) leveragesecurity-audit Comply with AWS Security Maturity Roadmap 2021 2021 Q2 \u274c Compliance(SecOps) leveragesecurity-auditcompliance Certified compliant by the Center for Internet Security (CIS)end-to-end CIS-compliant Reference Architecture (get compliance out of the box) 2021 Q2 \u274c Security &amp;Audit (SecOps) leveragesecurity-auditdashboard Centralized DevSecOps Tools and Audit Report Dashboard 2021 Q3 \u274c"}]}