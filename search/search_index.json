{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2017 - 2020 Binbash Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2017 - 2020 Binbash Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"welcome/","text":"About Leverage \u00b6 What's Leverage? Our focus is on creating reusable, high quality Cloud Infrastructure code, through our core components: Reference Architecture for AWS Infrastructure as Code (IaC) Library Leverage CLI Because all the code and modules are already built, we can get you up and running at least 2x faster than a consulting company ( typically in just a few weeks! ). On top of code that is thoroughly documented, tested, and has been proven in production at dozens of other project deployments. Why Leverage? If you implement our Reference Architecture for AWS and the Infrastructure as Code (IaC) Library via Leverage CLI , you will get your entire Cloud Native Application Infra in few weeks. Implement Leverage yourself or we can deploy it for you! Read More: Why our stack? Why Leverage? Core Features Reference Architecture : Designed under optimal configs for the most popular modern web and mobile applications needs. Its design is fully based on the AWS Well Architected Framework . Infrastructure as Code (IaC) Library : A collection of reusable, tested, production-ready E2E AWS Cloud infrastructure as code solutions, leveraged by modules written in: Terraform, Ansible, Helm charts, Dockerfiles and Makefiles . Leverage CLI : projects' command line tool. Provides the means to interact and deploy Leverage Reference Architecture on AWS and if needed it allows you to define custom tasks to run. Welcome \u00b6 This is the documentation for the Leverage Reference Architecture . It is built around the AWS Well Architected Framework , using a Terraform , Ansible and Helm . An its compose of the following 3 main repos: le-tf-infra-aws le-tf-vault le-ansible-infra Getting Started \u00b6 See First Steps for an introduction to our Reference Architecture for AWS workflow through the complete deployment of a basic AWS Landing Zone. See How it works for a whirlwind tour that will get you started. See User guide for a hands on help.","title":"Welcome"},{"location":"welcome/#about-leverage","text":"What's Leverage? Our focus is on creating reusable, high quality Cloud Infrastructure code, through our core components: Reference Architecture for AWS Infrastructure as Code (IaC) Library Leverage CLI Because all the code and modules are already built, we can get you up and running at least 2x faster than a consulting company ( typically in just a few weeks! ). On top of code that is thoroughly documented, tested, and has been proven in production at dozens of other project deployments. Why Leverage? If you implement our Reference Architecture for AWS and the Infrastructure as Code (IaC) Library via Leverage CLI , you will get your entire Cloud Native Application Infra in few weeks. Implement Leverage yourself or we can deploy it for you! Read More: Why our stack? Why Leverage? Core Features Reference Architecture : Designed under optimal configs for the most popular modern web and mobile applications needs. Its design is fully based on the AWS Well Architected Framework . Infrastructure as Code (IaC) Library : A collection of reusable, tested, production-ready E2E AWS Cloud infrastructure as code solutions, leveraged by modules written in: Terraform, Ansible, Helm charts, Dockerfiles and Makefiles . Leverage CLI : projects' command line tool. Provides the means to interact and deploy Leverage Reference Architecture on AWS and if needed it allows you to define custom tasks to run.","title":"About Leverage"},{"location":"welcome/#welcome","text":"This is the documentation for the Leverage Reference Architecture . It is built around the AWS Well Architected Framework , using a Terraform , Ansible and Helm . An its compose of the following 3 main repos: le-tf-infra-aws le-tf-vault le-ansible-infra","title":"Welcome"},{"location":"welcome/#getting-started","text":"See First Steps for an introduction to our Reference Architecture for AWS workflow through the complete deployment of a basic AWS Landing Zone. See How it works for a whirlwind tour that will get you started. See User guide for a hands on help.","title":"Getting Started"},{"location":"es/","text":"","title":"Binbash Leverage"},{"location":"es/bienvenido/","text":"Pr\u00f3ximamente \u00b6","title":"Bienvenido"},{"location":"es/bienvenido/#proximamente","text":"","title":"Pr\u00f3ximamente"},{"location":"first-steps/aws-account-setup/","text":"Set Up your AWS Management account \u00b6 Create an AWS account \u00b6 First and foremost you'll need to create an AWS account for your project's deployment. This will become the management account of your AWS Organization . During the creation of the AWS account, a user will be created for you, the root user . This user will take the email and password you provided as login credentials and it will be the main access point of your account (you can see this user represented in the architecture diagram ). The account's name will be given by your project's name followed by -management , since Leverage uses a suffix naming system to differentiate between the multiple accounts of a project. For this guide we'll stick to calling the project MyExample and so, the account name will be myexample-management . Along the same line, we'll use the example.com domain for the email address used to register the account. Adding a -aws suffix to the project's name to indicate that this email address is related to the project's AWS account, we end up with a registration email that looks like myexample-aws@example.com . Email addresses for AWS accounts. Each AWS account requires having a unique email address associated to it. The Leverage Reference Architecture for AWS makes use of multiple accounts to better manage the infrastructure, as such, you will need different addresses for each one. Creating a new email account for each AWS is not a really viable solution to this problem, a better approach is to take advantage of mail services that support aliases. For information regarding how this works: Email setup for your AWS account. Tip To protect your project's management account, enabling Multi Factor Authentication is highly encouraged, also, reviewing the account's billing setup is always a good idea before proceeding. Create an Admin user for the management account \u00b6 To be able to interact with and manage the AWS environment you will need an IAM user with administrator privileges. To accomplish this, sign in to the IAM Console with your recently created account and create a user named mgmt-org-admin . Setting a password is not necessary, since you won't use this user to log into the web console. Give it admin privileges by attaching the AdministratorAccess policy to it, there's no need to add the user to any group. Generate programmatic access keys for the Admin user \u00b6 Lastly, generate programmatic access keys for the mgmt-org-admin user, and then either copy them or download the .csv file that AWS generates for you. In both cases, store the credentials in a secure location. For more detailed information on setting up your AWS account: Organization account setup guide Next steps \u00b6 You have successfully created and configured the AWS account for your Leverage project. From now on, almost all interactions with the AWS environment (with few notable exceptions) will be performed via Leverage. Next, you will setup all required dependencies to work on a Leverage project in your local machine.","title":"Set Up your AWS Management account"},{"location":"first-steps/aws-account-setup/#set-up-your-aws-management-account","text":"","title":"Set Up your AWS Management account"},{"location":"first-steps/aws-account-setup/#create-an-aws-account","text":"First and foremost you'll need to create an AWS account for your project's deployment. This will become the management account of your AWS Organization . During the creation of the AWS account, a user will be created for you, the root user . This user will take the email and password you provided as login credentials and it will be the main access point of your account (you can see this user represented in the architecture diagram ). The account's name will be given by your project's name followed by -management , since Leverage uses a suffix naming system to differentiate between the multiple accounts of a project. For this guide we'll stick to calling the project MyExample and so, the account name will be myexample-management . Along the same line, we'll use the example.com domain for the email address used to register the account. Adding a -aws suffix to the project's name to indicate that this email address is related to the project's AWS account, we end up with a registration email that looks like myexample-aws@example.com . Email addresses for AWS accounts. Each AWS account requires having a unique email address associated to it. The Leverage Reference Architecture for AWS makes use of multiple accounts to better manage the infrastructure, as such, you will need different addresses for each one. Creating a new email account for each AWS is not a really viable solution to this problem, a better approach is to take advantage of mail services that support aliases. For information regarding how this works: Email setup for your AWS account. Tip To protect your project's management account, enabling Multi Factor Authentication is highly encouraged, also, reviewing the account's billing setup is always a good idea before proceeding.","title":"Create an AWS account"},{"location":"first-steps/aws-account-setup/#create-an-admin-user-for-the-management-account","text":"To be able to interact with and manage the AWS environment you will need an IAM user with administrator privileges. To accomplish this, sign in to the IAM Console with your recently created account and create a user named mgmt-org-admin . Setting a password is not necessary, since you won't use this user to log into the web console. Give it admin privileges by attaching the AdministratorAccess policy to it, there's no need to add the user to any group.","title":"Create an Admin user for the management account"},{"location":"first-steps/aws-account-setup/#generate-programmatic-access-keys-for-the-admin-user","text":"Lastly, generate programmatic access keys for the mgmt-org-admin user, and then either copy them or download the .csv file that AWS generates for you. In both cases, store the credentials in a secure location. For more detailed information on setting up your AWS account: Organization account setup guide","title":"Generate programmatic access keys for the Admin user"},{"location":"first-steps/aws-account-setup/#next-steps","text":"You have successfully created and configured the AWS account for your Leverage project. From now on, almost all interactions with the AWS environment (with few notable exceptions) will be performed via Leverage. Next, you will setup all required dependencies to work on a Leverage project in your local machine.","title":"Next steps"},{"location":"first-steps/introduction/","text":"Introduction \u00b6 The objective of this guide is to introduce the user to our Binbash Leverage Reference Architecture for AWS workflow through the complete deployment of a basic landing zone configuration. The Leverage landing zone is the smallest possible fully functional configuration. It lays out the base infrastructure required to manage the environment: billing and financial management, user management, security enforcement, and shared services and resources. Always following the best practices layed out by the AWS Well-Architected Framework to ensure quality and to provide a solid base to build upon. This is the starting point from which any Leverage user can and will develop all the features and capabilities they may require to satisfy their specific needs. Figure: Leverage Landing Zone architecture components diagram. On this guide you will learn how to: Create and configure your AWS account. Work with the Leverage CLI to manage your credentials, infrastructure and the whole Leverage stack. Prepare your local environment to manage a Leverage project. Orchestrate the project's infrastructure. Configure your users' credentials to interact with the project. Upon completion of this guide you will gain an understanding of the structure of a project as well as familiarity with the tooling used to manage it. To begin your journey into creating your first Leverage project, continue to the next section of the guide where you will start by setting up your AWS account.","title":"Introduction"},{"location":"first-steps/introduction/#introduction","text":"The objective of this guide is to introduce the user to our Binbash Leverage Reference Architecture for AWS workflow through the complete deployment of a basic landing zone configuration. The Leverage landing zone is the smallest possible fully functional configuration. It lays out the base infrastructure required to manage the environment: billing and financial management, user management, security enforcement, and shared services and resources. Always following the best practices layed out by the AWS Well-Architected Framework to ensure quality and to provide a solid base to build upon. This is the starting point from which any Leverage user can and will develop all the features and capabilities they may require to satisfy their specific needs. Figure: Leverage Landing Zone architecture components diagram. On this guide you will learn how to: Create and configure your AWS account. Work with the Leverage CLI to manage your credentials, infrastructure and the whole Leverage stack. Prepare your local environment to manage a Leverage project. Orchestrate the project's infrastructure. Configure your users' credentials to interact with the project. Upon completion of this guide you will gain an understanding of the structure of a project as well as familiarity with the tooling used to manage it. To begin your journey into creating your first Leverage project, continue to the next section of the guide where you will start by setting up your AWS account.","title":"Introduction"},{"location":"first-steps/leverage-project-setup/","text":"Set Up your Leverage project \u00b6 Up until now we have been taking care of all the prerequisites for a Leverage project, but is time to actually create the Reference Architecture definition for your project. Let's get to it. Create the project directory \u00b6 Each Leverage project must be in its own working directory. Create the directory for your project. mkdir myexample cd myexample Initialize the Leverage project \u00b6 When setting up a Leverage project the directory where it will reside needs to be initialized leverage project init [09:30:54.027] INFO No Leverage directory found in user's home. Creating. [09:30:54.030] INFO No project template found. Cloning template. [09:30:54.978] INFO Finished cloning template. [09:30:54.981] INFO Initializing git repository in project directory. [09:30:54.990] INFO No project configuration file found. Dropping configuration template project.yaml . [09:30:55.007] INFO Project initialization finished. More information on project init Initializing a project creates the global configurations directory for Leverage CLI and downloads the templates used to generate the project's files structure. It then initializes a git repository in the working directory, and creates a file called project.yaml . Leverage projects are by design repositories to leverage some of the capabilities of git and because it is assumed that the code in the project will be versioned. Fill in the configuration file \u00b6 Once the project is initialized you need to fill in the correct information for the project in the configuration file. After filling in the data you will end up with a configuration file similar to the one below. Indicated by arrows are the fields that were modified. You can see in the global values, the project name and a short version of it, in the organization section, the emails for each account, and further down, in the accounts section, the different groups and users for each group in the management and security accounts. project.yaml for MyExample project project_name : myexample # <-- short_name : me # <-- primary_region : us-east-1 secondary_region : us-west-2 organization : accounts : - name : management email : myexample-aws@example.com # <-- - name : security email : myexample-aws+security@example.com # <-- - name : shared email : myexample-aws+shared@example.com # <-- organizational_units : - name : security policy : - aws_organizations_policy.default accounts : - security - name : shared policy : - aws_organizations_policy.standard accounts : - shared accounts : management : groups : - name : admins # <-- users : - kit.walker - natasha.romanoff policies : - '\"arn:aws:iam::aws:policy/AdministratorAccess\"' security : groups : - name : admins # <-- users : - natasha.romanoff - name : auditors # <-- users : - kit.walker policies : - aws_iam_policy.assume_auditor_role.arn - name : devops # <-- users : - natasha.romanoff - edward.stark - john.wick policies : - aws_iam_policy.assume_devops_role.arn shared : networks : - cidr_block : \"172.18.0.0/20\" availability_zones : [ a , b ] private_subnets_cidr : \"172.18.0.0/21\" private_subnets : - \"172.18.0.0/23\" - \"172.18.2.0/23\" public_subnets_cidr : \"172.18.8.0/21\" public_subnets : - \"172.18.8.0/23\" - \"172.18.10.0/23\" Set Up the bootstrap credentials \u00b6 To be able to interact with your AWS environment you first need to configure the credentials to enable AWS CLI to do so. Provide the keys obtained in the previous account creation step to the command by any of the available means. Manually File selection Provide file in command leverage credentials configure --type BOOTSTRAP [09:37:17.530] INFO Loading configuration file. [09:37:18.477] INFO Loading project environment configuration file. [09:37:20.426] INFO Configuring bootstrap credentials. > Select the means by which you'll provide the programmatic keys: Manually > Key: AKIAU1OF18IXH2EXAMPLE > Secret: **************************************** [09:37:51.638] INFO Bootstrap credentials configured in: /home/user/.aws/me/credentials [09:37:53.497] INFO Fetching management account id. [09:37:53.792] INFO Updating project configuration file. [09:37:55.344] INFO Skipping assumable roles configuration. leverage credentials configure --type BOOTSTRAP [09:37:17.530] INFO Loading configuration file. [09:37:18.477] INFO Loading project environment configuration file. [09:37:20.426] INFO Configuring bootstrap credentials. > Select the means by which you'll provide the programmatic keys: Path to an access keys file obtained from AWS > Path to access keys file: ../bootstrap_accessKeys.csv [09:37:51.638] INFO Bootstrap credentials configured in: /home/user/.aws/me/credentials [09:37:53.497] INFO Fetching management account id. [09:37:53.792] INFO Updating project configuration file. [09:37:55.344] INFO Skipping assumable roles configuration. leverage credentials configure --type BOOTSTRAP --credentials-file ../bootstrap_accessKeys.csv [09:37:17.530] INFO Loading configuration file. [09:37:18.477] INFO Loading project environment configuration file. [09:37:20.426] INFO Configuring bootstrap credentials. [09:37:51.638] INFO Bootstrap credentials configured in: /home/user/.aws/me/credentials [09:37:53.497] INFO Fetching management account id. [09:37:53.792] INFO Updating project configuration file. [09:37:55.344] INFO Skipping assumable roles configuration. More information on credentials configure During the credentials setup, the AWS account id is filled in for us in the project configuration file. ... organization : accounts : - name : management email : myexample-aws@example.com id : '000123456789' ... Create the configured project \u00b6 Now you will finally create all the infrastructure definition in the project. leverage project create [09:40:54.934] INFO Loading configuration file. [09:40:54.950] INFO Creating project directory structure. [09:40:54.957] INFO Finished creating directory structure. [09:40:54.958] INFO Setting up common base files. [09:40:54.964] INFO Account: Setting up management . [09:40:54.965] INFO Layer: Setting up config . [09:40:54.968] INFO Layer: Setting up base-tf-backend . [09:40:54.969] INFO Layer: Setting up base-identities . [09:40:54.984] INFO Layer: Setting up organizations . [09:40:54.989] INFO Layer: Setting up security-base . [09:40:54.990] INFO Account: Setting up security . [09:40:54.991] INFO Layer: Setting up config . [09:40:54.994] INFO Layer: Setting up base-tf-backend . [09:40:54.995] INFO Layer: Setting up base-identities . [09:40:55.001] INFO Layer: Setting up security-base . [09:40:55.002] INFO Account: Setting up shared . [09:40:55.003] INFO Layer: Setting up config . [09:40:55.006] INFO Layer: Setting up base-tf-backend . [09:40:55.007] INFO Layer: Setting up base-identities . [09:40:55.008] INFO Layer: Setting up security-base . [09:40:55.009] INFO Layer: Setting up base-network . [09:40:55.013] INFO Project configuration finished. INFO Reformatting terraform configuration to the standard style. [09:40:55.743] INFO Finished setting up project. More information on project create In this step, the directory structure for the project and all definition files are created using the information from the project.yaml file and checked for correct formatting. You will end up with something that looks like this: MyExample project file structure \ud83d\udcc2 myexample \u251c\u2500\u2500 \ud83d\udcc4 build.env \u251c\u2500\u2500 \ud83d\udcc4 project.yaml \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars \u251c\u2500\u2500 \ud83d\udcc2 management \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars | \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 organizations | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 accounts.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 delegated_administrator.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 organizational_units.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 organization.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 policies_scp.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 policy_scp_attachments.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 service_linked_roles.tf | \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 groups.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 keys | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 roles.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 users.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf | \u2514\u2500\u2500 \ud83d\udcc2 us-east-1 | \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 main.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf | \u2514\u2500\u2500 \ud83d\udcc2 security-base | \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u251c\u2500\u2500 \ud83d\udcc2 security \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | | \u2514\u2500\u2500 \ud83d\udcc2 base-identities | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 groups_policies.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 groups.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 keys | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 role_policies.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 roles.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 users.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-1 | \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 main.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf | \u2514\u2500\u2500 \ud83d\udcc2 security-base | \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u251c\u2500\u2500 \ud83d\udcc4 iam_access_analyzer.tf | \u251c\u2500\u2500 \ud83d\udcc4 locals.tf \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u2514\u2500\u2500 \ud83d\udcc2 shared \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u251c\u2500\u2500 \ud83d\udcc2 global | \u2514\u2500\u2500 \ud83d\udcc2 base-identities | \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u251c\u2500\u2500 \ud83d\udcc4 policies.tf | \u251c\u2500\u2500 \ud83d\udcc4 roles.tf | \u251c\u2500\u2500 \ud83d\udcc4 service_linked_roles.tf | \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u2514\u2500\u2500 \ud83d\udcc2 us-east-1 \u251c\u2500\u2500 \ud83d\udcc2 base-network \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 network.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 network_vpc_flow_logs.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 main.tf \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u2514\u2500\u2500 \ud83d\udcc2 security-base \u251c\u2500\u2500 \ud83d\udcc4 account.tf \u251c\u2500\u2500 \ud83d\udcc4 config.tf \u2514\u2500\u2500 \ud83d\udcc4 variables.tf As you can see, it is a structure comprised of directories for each account containing all the definitions for each of the accounts respective layers. The layers themselves are also grouped based on the region in which they are deployed. The regions are configured through the project.yaml file. In the case of the Leverage landing zone, most layers are deployed in the primary region, so you can see the definition of these layers in a us-east-1 directory, as per the example configuration. Some layers are not bound to a region because their definition is mainly comprised of resources for services that are global in nature, like IAM or Organizations. These kind of layers are kept in a global directory. Next steps \u00b6 You have now created the definition of all the infrastructure for your project and configured the credentials need to deploy such infrastructure in the AWS environment. Next, you will orchestrate de first and main account of the project, the management account.","title":"Set Up your Leverage project"},{"location":"first-steps/leverage-project-setup/#set-up-your-leverage-project","text":"Up until now we have been taking care of all the prerequisites for a Leverage project, but is time to actually create the Reference Architecture definition for your project. Let's get to it.","title":"Set Up your Leverage project"},{"location":"first-steps/leverage-project-setup/#create-the-project-directory","text":"Each Leverage project must be in its own working directory. Create the directory for your project. mkdir myexample cd myexample","title":"Create the project directory"},{"location":"first-steps/leverage-project-setup/#initialize-the-leverage-project","text":"When setting up a Leverage project the directory where it will reside needs to be initialized leverage project init [09:30:54.027] INFO No Leverage directory found in user's home. Creating. [09:30:54.030] INFO No project template found. Cloning template. [09:30:54.978] INFO Finished cloning template. [09:30:54.981] INFO Initializing git repository in project directory. [09:30:54.990] INFO No project configuration file found. Dropping configuration template project.yaml . [09:30:55.007] INFO Project initialization finished. More information on project init Initializing a project creates the global configurations directory for Leverage CLI and downloads the templates used to generate the project's files structure. It then initializes a git repository in the working directory, and creates a file called project.yaml . Leverage projects are by design repositories to leverage some of the capabilities of git and because it is assumed that the code in the project will be versioned.","title":"Initialize the Leverage project"},{"location":"first-steps/leverage-project-setup/#fill-in-the-configuration-file","text":"Once the project is initialized you need to fill in the correct information for the project in the configuration file. After filling in the data you will end up with a configuration file similar to the one below. Indicated by arrows are the fields that were modified. You can see in the global values, the project name and a short version of it, in the organization section, the emails for each account, and further down, in the accounts section, the different groups and users for each group in the management and security accounts. project.yaml for MyExample project project_name : myexample # <-- short_name : me # <-- primary_region : us-east-1 secondary_region : us-west-2 organization : accounts : - name : management email : myexample-aws@example.com # <-- - name : security email : myexample-aws+security@example.com # <-- - name : shared email : myexample-aws+shared@example.com # <-- organizational_units : - name : security policy : - aws_organizations_policy.default accounts : - security - name : shared policy : - aws_organizations_policy.standard accounts : - shared accounts : management : groups : - name : admins # <-- users : - kit.walker - natasha.romanoff policies : - '\"arn:aws:iam::aws:policy/AdministratorAccess\"' security : groups : - name : admins # <-- users : - natasha.romanoff - name : auditors # <-- users : - kit.walker policies : - aws_iam_policy.assume_auditor_role.arn - name : devops # <-- users : - natasha.romanoff - edward.stark - john.wick policies : - aws_iam_policy.assume_devops_role.arn shared : networks : - cidr_block : \"172.18.0.0/20\" availability_zones : [ a , b ] private_subnets_cidr : \"172.18.0.0/21\" private_subnets : - \"172.18.0.0/23\" - \"172.18.2.0/23\" public_subnets_cidr : \"172.18.8.0/21\" public_subnets : - \"172.18.8.0/23\" - \"172.18.10.0/23\"","title":"Fill in the configuration file"},{"location":"first-steps/leverage-project-setup/#set-up-the-bootstrap-credentials","text":"To be able to interact with your AWS environment you first need to configure the credentials to enable AWS CLI to do so. Provide the keys obtained in the previous account creation step to the command by any of the available means. Manually File selection Provide file in command leverage credentials configure --type BOOTSTRAP [09:37:17.530] INFO Loading configuration file. [09:37:18.477] INFO Loading project environment configuration file. [09:37:20.426] INFO Configuring bootstrap credentials. > Select the means by which you'll provide the programmatic keys: Manually > Key: AKIAU1OF18IXH2EXAMPLE > Secret: **************************************** [09:37:51.638] INFO Bootstrap credentials configured in: /home/user/.aws/me/credentials [09:37:53.497] INFO Fetching management account id. [09:37:53.792] INFO Updating project configuration file. [09:37:55.344] INFO Skipping assumable roles configuration. leverage credentials configure --type BOOTSTRAP [09:37:17.530] INFO Loading configuration file. [09:37:18.477] INFO Loading project environment configuration file. [09:37:20.426] INFO Configuring bootstrap credentials. > Select the means by which you'll provide the programmatic keys: Path to an access keys file obtained from AWS > Path to access keys file: ../bootstrap_accessKeys.csv [09:37:51.638] INFO Bootstrap credentials configured in: /home/user/.aws/me/credentials [09:37:53.497] INFO Fetching management account id. [09:37:53.792] INFO Updating project configuration file. [09:37:55.344] INFO Skipping assumable roles configuration. leverage credentials configure --type BOOTSTRAP --credentials-file ../bootstrap_accessKeys.csv [09:37:17.530] INFO Loading configuration file. [09:37:18.477] INFO Loading project environment configuration file. [09:37:20.426] INFO Configuring bootstrap credentials. [09:37:51.638] INFO Bootstrap credentials configured in: /home/user/.aws/me/credentials [09:37:53.497] INFO Fetching management account id. [09:37:53.792] INFO Updating project configuration file. [09:37:55.344] INFO Skipping assumable roles configuration. More information on credentials configure During the credentials setup, the AWS account id is filled in for us in the project configuration file. ... organization : accounts : - name : management email : myexample-aws@example.com id : '000123456789' ...","title":"Set Up the bootstrap credentials"},{"location":"first-steps/leverage-project-setup/#create-the-configured-project","text":"Now you will finally create all the infrastructure definition in the project. leverage project create [09:40:54.934] INFO Loading configuration file. [09:40:54.950] INFO Creating project directory structure. [09:40:54.957] INFO Finished creating directory structure. [09:40:54.958] INFO Setting up common base files. [09:40:54.964] INFO Account: Setting up management . [09:40:54.965] INFO Layer: Setting up config . [09:40:54.968] INFO Layer: Setting up base-tf-backend . [09:40:54.969] INFO Layer: Setting up base-identities . [09:40:54.984] INFO Layer: Setting up organizations . [09:40:54.989] INFO Layer: Setting up security-base . [09:40:54.990] INFO Account: Setting up security . [09:40:54.991] INFO Layer: Setting up config . [09:40:54.994] INFO Layer: Setting up base-tf-backend . [09:40:54.995] INFO Layer: Setting up base-identities . [09:40:55.001] INFO Layer: Setting up security-base . [09:40:55.002] INFO Account: Setting up shared . [09:40:55.003] INFO Layer: Setting up config . [09:40:55.006] INFO Layer: Setting up base-tf-backend . [09:40:55.007] INFO Layer: Setting up base-identities . [09:40:55.008] INFO Layer: Setting up security-base . [09:40:55.009] INFO Layer: Setting up base-network . [09:40:55.013] INFO Project configuration finished. INFO Reformatting terraform configuration to the standard style. [09:40:55.743] INFO Finished setting up project. More information on project create In this step, the directory structure for the project and all definition files are created using the information from the project.yaml file and checked for correct formatting. You will end up with something that looks like this: MyExample project file structure \ud83d\udcc2 myexample \u251c\u2500\u2500 \ud83d\udcc4 build.env \u251c\u2500\u2500 \ud83d\udcc4 project.yaml \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars \u251c\u2500\u2500 \ud83d\udcc2 management \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars | \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 organizations | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 accounts.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 delegated_administrator.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 organizational_units.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 organization.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 policies_scp.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 policy_scp_attachments.tf | \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 service_linked_roles.tf | \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 groups.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 keys | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 roles.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 users.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf | \u2514\u2500\u2500 \ud83d\udcc2 us-east-1 | \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 main.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf | \u2514\u2500\u2500 \ud83d\udcc2 security-base | \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u251c\u2500\u2500 \ud83d\udcc2 security \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | | \u2514\u2500\u2500 \ud83d\udcc2 base-identities | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 groups_policies.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 groups.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 keys | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 role_policies.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 roles.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 users.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-1 | \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 main.tf | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf | \u2514\u2500\u2500 \ud83d\udcc2 security-base | \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u251c\u2500\u2500 \ud83d\udcc4 iam_access_analyzer.tf | \u251c\u2500\u2500 \ud83d\udcc4 locals.tf \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u2514\u2500\u2500 \ud83d\udcc2 shared \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u251c\u2500\u2500 \ud83d\udcc2 global | \u2514\u2500\u2500 \ud83d\udcc2 base-identities | \u251c\u2500\u2500 \ud83d\udcc4 account.tf | \u251c\u2500\u2500 \ud83d\udcc4 config.tf | \u251c\u2500\u2500 \ud83d\udcc4 locals.tf | \u251c\u2500\u2500 \ud83d\udcc4 policies.tf | \u251c\u2500\u2500 \ud83d\udcc4 roles.tf | \u251c\u2500\u2500 \ud83d\udcc4 service_linked_roles.tf | \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u2514\u2500\u2500 \ud83d\udcc2 us-east-1 \u251c\u2500\u2500 \ud83d\udcc2 base-network \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 network.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 network_vpc_flow_logs.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 outputs.tf \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend \u2502 \u251c\u2500\u2500 \ud83d\udcc4 config.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 locals.tf \u2502 \u251c\u2500\u2500 \ud83d\udcc4 main.tf \u2502 \u2514\u2500\u2500 \ud83d\udcc4 variables.tf \u2514\u2500\u2500 \ud83d\udcc2 security-base \u251c\u2500\u2500 \ud83d\udcc4 account.tf \u251c\u2500\u2500 \ud83d\udcc4 config.tf \u2514\u2500\u2500 \ud83d\udcc4 variables.tf As you can see, it is a structure comprised of directories for each account containing all the definitions for each of the accounts respective layers. The layers themselves are also grouped based on the region in which they are deployed. The regions are configured through the project.yaml file. In the case of the Leverage landing zone, most layers are deployed in the primary region, so you can see the definition of these layers in a us-east-1 directory, as per the example configuration. Some layers are not bound to a region because their definition is mainly comprised of resources for services that are global in nature, like IAM or Organizations. These kind of layers are kept in a global directory.","title":"Create the configured project"},{"location":"first-steps/leverage-project-setup/#next-steps","text":"You have now created the definition of all the infrastructure for your project and configured the credentials need to deploy such infrastructure in the AWS environment. Next, you will orchestrate de first and main account of the project, the management account.","title":"Next steps"},{"location":"first-steps/local-setup/","text":"Set Up your local environment \u00b6 A Leverage project is managed via our Leverage CLI , which in turn, makes use of a couple of applications that should be installed in your system beforehand, as is explained in the pre-requisites . Git Python 3 version 3.8 and up Docker So first, make sure these are installed in your system and the Docker daemon is up and running. Install Leverage CLI \u00b6 As previously stated, to manage a Leverage project and operate the whole Leverage stack you will need to install Leverage CLI. Binbash distributes Leverage CLI as a python package, so you can install it via pip . pip install leverage For more detailed information in installing Leverage CLI: Install Leverage CLI Verify your Leverage CLI installation \u00b6 Verify that your Leverage CLI installation was successful by running leverage --help Usage: leverage [OPTIONS] COMMAND [ARGS]... Leverage Reference Architecture projects command-line tool. Options: -f, --filename TEXT Name of the build file containing the tasks definitions. [default: build.py] -l, --list-tasks List available tasks to run. -v, --verbose Increase output verbosity. --version Show the version and exit. -h, --help Show this message and exit. Commands: credentials Manage AWS cli credentials. project Manage a Leverage project. run Perform specified task(s) and all of its dependencies. terraform Run Terraform commands in a custom containerized... tf Run Terraform commands in a custom containerized... Enable tab completion \u00b6 If you use Bash, Zsh or Fish, you can enable shell completion for Leverage commands. Bash Zsh Fish Add to ~/.bashrc : eval \" $( _LEVERAGE_COMPLETE = bash_source leverage ) \" Add to ~/.zshrc : eval \" $( _LEVERAGE_COMPLETE = zsh_source leverage ) \" Add to ~/.config/fish/completions/leverage.fish : eval ( env _LEVERAGE_COMPLETE = fish_source leverage ) Now you need to restart your shell. Next steps \u00b6 Now you have your system completely configured to work on a Leverage project. Next, you will setup and create your Leverage project.","title":"Set Up your local environment"},{"location":"first-steps/local-setup/#set-up-your-local-environment","text":"A Leverage project is managed via our Leverage CLI , which in turn, makes use of a couple of applications that should be installed in your system beforehand, as is explained in the pre-requisites . Git Python 3 version 3.8 and up Docker So first, make sure these are installed in your system and the Docker daemon is up and running.","title":"Set Up your local environment"},{"location":"first-steps/local-setup/#install-leverage-cli","text":"As previously stated, to manage a Leverage project and operate the whole Leverage stack you will need to install Leverage CLI. Binbash distributes Leverage CLI as a python package, so you can install it via pip . pip install leverage For more detailed information in installing Leverage CLI: Install Leverage CLI","title":"Install Leverage CLI"},{"location":"first-steps/local-setup/#verify-your-leverage-cli-installation","text":"Verify that your Leverage CLI installation was successful by running leverage --help Usage: leverage [OPTIONS] COMMAND [ARGS]... Leverage Reference Architecture projects command-line tool. Options: -f, --filename TEXT Name of the build file containing the tasks definitions. [default: build.py] -l, --list-tasks List available tasks to run. -v, --verbose Increase output verbosity. --version Show the version and exit. -h, --help Show this message and exit. Commands: credentials Manage AWS cli credentials. project Manage a Leverage project. run Perform specified task(s) and all of its dependencies. terraform Run Terraform commands in a custom containerized... tf Run Terraform commands in a custom containerized...","title":"Verify your Leverage CLI installation"},{"location":"first-steps/local-setup/#enable-tab-completion","text":"If you use Bash, Zsh or Fish, you can enable shell completion for Leverage commands. Bash Zsh Fish Add to ~/.bashrc : eval \" $( _LEVERAGE_COMPLETE = bash_source leverage ) \" Add to ~/.zshrc : eval \" $( _LEVERAGE_COMPLETE = zsh_source leverage ) \" Add to ~/.config/fish/completions/leverage.fish : eval ( env _LEVERAGE_COMPLETE = fish_source leverage ) Now you need to restart your shell.","title":"Enable tab completion"},{"location":"first-steps/local-setup/#next-steps","text":"Now you have your system completely configured to work on a Leverage project. Next, you will setup and create your Leverage project.","title":"Next steps"},{"location":"first-steps/management-account/","text":"Orchestrate the Management account \u00b6 Finally we reach the point in which you'll get to actually create the infrastructure in our AWS environment. Some accounts and layers rely on other accounts/layers being already deployed, creating dependencies between each other and establishing an order in which all layers should be deployed. We will go through these dependency chains in order. Basic Landing Zone AWS Expenses By default this AWS Reference Architecture configuration should not incur in any costs. The management account is used to configure and access all AWS Organizations managed accounts, also, billing and financial decisions are enforced though this account. Deploy the Management account's layers \u00b6 To begin, place yourself in the management account directory. cd management Terraform backend layer \u00b6 Move into the us-east-1/base-tf-backend directory and run: leverage terraform init leverage terraform apply All apply commands will prompt for confirmation, answer yes when this happens. More information on terraform init and terraform apply Now, the infrastructure for the Terraform state management is created. The next step is to push the local .tfstate to the bucket. To do this, uncomment the backend section for the terraform configuration in management/base-tf-backend/config.tf backend \"s3\" { key = \"management/tf-backend/terraform.tfstate\" } And run once more: leverage terraform init When prompted, answer yes . Now you can safely remove the terraform.tfstate and terraform.tfstate.backup files created during the apply step. Terraform backend More information regarding what is the Terraform backend and Terraform state management: Terraform backend How to manage Terraform state Identities layer \u00b6 The definition for the identities layer is located within the global directory. Move into the global/base-identities directory and run: leverage terraform init To securely manage the users credentials, all members of the organization that are bound to interact with the AWS environment, and are therefore listed in the project.yaml configuration file, should create GPG keys of their own. Then, they should export them and share their public key files with whoever is in charge of the project infrastructure in order to be able to create their respective IAM users. In this guide's case, that person it is you. How to create and manage GPG keys Once you get hold of the keys files, copy them to the keys subdirectory, respecting the user's configured name. For the management account in this guide, we need the keys for kit.walker and natasha.romanoff . Finally, run: leverage terraform apply Organizations layer \u00b6 Next, in the same fashion as in the previous layer, move into the global/organizations directory and run: leverage terraform init leverage terraform apply The AWS account that you created manually is the management account itself, so to prevent Terraform from trying to create it and error out, this account definition is commented by default in the code. Now you need to make the Terraform state aware of the link between the two. To do that, uncomment the management organizations account resource in accounts.tf resource \"aws_organizations_account\" \"management\" { name = \"${var.project_long}-management\" email = local.management_account.email } Grab the management account id that previously was automatically filled in for us in the project.yaml file ... organization : accounts : - name : management email : myexample-aws@example.com id : '000123456789' ... And run: leverage terraform import aws_organizations_account.management 000123456789 More information on terraform import Security layer \u00b6 The last layer for the management account is the security layer and its definition is located in us-east-1 . So, move into the us-east-1/security-base directory and run: leverage terraform init leverage terraform apply Update the bootstrap credentials \u00b6 Now that the management account has been deployed, and more specifically, all Organizations accounts have been created (in the organizations layer ) you need to update the credentials for the bootstrap process before proceeding to deploy any of the remaining accounts. This will fetch the organizations structure from the AWS environment and create individual profiles associated with each account for the AWS CLI to use. So, run: leverage credentials configure --type BOOTSTRAP --skip-access-keys-setup [09:08:44.762] INFO Loading configuration file. [09:08:44.785] INFO Loading project environment configuration file. [09:08:44.791] INFO Loading Terraform common configuration. [09:08:53.247] INFO Configuring assumable roles. [09:08:53.248] INFO Fetching organization accounts. [09:08:55.193] INFO Backing up account profiles file. [09:08:55.761] INFO Configuring profile me-management-oaar [09:08:59.977] INFO Configuring profile me-security-oaar [09:09:04.081] INFO Configuring profile me-shared-oaar [09:09:08.305] INFO Account profiles configured in: /home/user/.aws/me/config [09:09:08.307] INFO Updating project's Terraform common configuration. More information on credentials configure Next steps \u00b6 You have successfully orchestrated the management account for your project and configured the credentials for the following steps. Next, you will orchestrate the remaining accounts, security and shared .","title":"Orchestrate the Management account"},{"location":"first-steps/management-account/#orchestrate-the-management-account","text":"Finally we reach the point in which you'll get to actually create the infrastructure in our AWS environment. Some accounts and layers rely on other accounts/layers being already deployed, creating dependencies between each other and establishing an order in which all layers should be deployed. We will go through these dependency chains in order. Basic Landing Zone AWS Expenses By default this AWS Reference Architecture configuration should not incur in any costs. The management account is used to configure and access all AWS Organizations managed accounts, also, billing and financial decisions are enforced though this account.","title":"Orchestrate the Management account"},{"location":"first-steps/management-account/#deploy-the-management-accounts-layers","text":"To begin, place yourself in the management account directory. cd management","title":"Deploy the Management account's layers"},{"location":"first-steps/management-account/#terraform-backend-layer","text":"Move into the us-east-1/base-tf-backend directory and run: leverage terraform init leverage terraform apply All apply commands will prompt for confirmation, answer yes when this happens. More information on terraform init and terraform apply Now, the infrastructure for the Terraform state management is created. The next step is to push the local .tfstate to the bucket. To do this, uncomment the backend section for the terraform configuration in management/base-tf-backend/config.tf backend \"s3\" { key = \"management/tf-backend/terraform.tfstate\" } And run once more: leverage terraform init When prompted, answer yes . Now you can safely remove the terraform.tfstate and terraform.tfstate.backup files created during the apply step. Terraform backend More information regarding what is the Terraform backend and Terraform state management: Terraform backend How to manage Terraform state","title":"Terraform backend layer"},{"location":"first-steps/management-account/#identities-layer","text":"The definition for the identities layer is located within the global directory. Move into the global/base-identities directory and run: leverage terraform init To securely manage the users credentials, all members of the organization that are bound to interact with the AWS environment, and are therefore listed in the project.yaml configuration file, should create GPG keys of their own. Then, they should export them and share their public key files with whoever is in charge of the project infrastructure in order to be able to create their respective IAM users. In this guide's case, that person it is you. How to create and manage GPG keys Once you get hold of the keys files, copy them to the keys subdirectory, respecting the user's configured name. For the management account in this guide, we need the keys for kit.walker and natasha.romanoff . Finally, run: leverage terraform apply","title":"Identities layer"},{"location":"first-steps/management-account/#organizations-layer","text":"Next, in the same fashion as in the previous layer, move into the global/organizations directory and run: leverage terraform init leverage terraform apply The AWS account that you created manually is the management account itself, so to prevent Terraform from trying to create it and error out, this account definition is commented by default in the code. Now you need to make the Terraform state aware of the link between the two. To do that, uncomment the management organizations account resource in accounts.tf resource \"aws_organizations_account\" \"management\" { name = \"${var.project_long}-management\" email = local.management_account.email } Grab the management account id that previously was automatically filled in for us in the project.yaml file ... organization : accounts : - name : management email : myexample-aws@example.com id : '000123456789' ... And run: leverage terraform import aws_organizations_account.management 000123456789 More information on terraform import","title":"Organizations layer"},{"location":"first-steps/management-account/#security-layer","text":"The last layer for the management account is the security layer and its definition is located in us-east-1 . So, move into the us-east-1/security-base directory and run: leverage terraform init leverage terraform apply","title":"Security layer"},{"location":"first-steps/management-account/#update-the-bootstrap-credentials","text":"Now that the management account has been deployed, and more specifically, all Organizations accounts have been created (in the organizations layer ) you need to update the credentials for the bootstrap process before proceeding to deploy any of the remaining accounts. This will fetch the organizations structure from the AWS environment and create individual profiles associated with each account for the AWS CLI to use. So, run: leverage credentials configure --type BOOTSTRAP --skip-access-keys-setup [09:08:44.762] INFO Loading configuration file. [09:08:44.785] INFO Loading project environment configuration file. [09:08:44.791] INFO Loading Terraform common configuration. [09:08:53.247] INFO Configuring assumable roles. [09:08:53.248] INFO Fetching organization accounts. [09:08:55.193] INFO Backing up account profiles file. [09:08:55.761] INFO Configuring profile me-management-oaar [09:08:59.977] INFO Configuring profile me-security-oaar [09:09:04.081] INFO Configuring profile me-shared-oaar [09:09:08.305] INFO Account profiles configured in: /home/user/.aws/me/config [09:09:08.307] INFO Updating project's Terraform common configuration. More information on credentials configure","title":"Update the bootstrap credentials"},{"location":"first-steps/management-account/#next-steps","text":"You have successfully orchestrated the management account for your project and configured the credentials for the following steps. Next, you will orchestrate the remaining accounts, security and shared .","title":"Next steps"},{"location":"first-steps/post-deployment/","text":"Post-deployment steps \u00b6 The whole landing zone is already deployed, and with it, all defined users were created. From now on, each user should generate their personal programmatic keys and enable Multi Factor Authentication for their interactions with the AWS environment. Let's take a look at the steps required to accomplish this. Get the temporary password to access AWS console \u00b6 We'll take the place of natasha.romanoff to exemplify the process. When Natasha's user was created, an initial random password was also created alongside it. That password was encrypted using her GPG key, as it was shown in the management account's and in the security account's identities layers. As Natasha, you need to access that password so that you can create your programmatic keys to interact with the environment through Leverage. First, for the management account, change the value sensitive to true in the output block user_natasha_romanoff_login_profile_encrypted_password of management/global/base-identities/outputs.tf : output \"user_natasha_romanoff_login_profile_encrypted_password\" { description = \"The encrypted password, base64 encoded\" value = module.user [ \"natasha.romanoff\" ]. iam_user_login_profile_encrypted_password sensitive = true } Then, in the global/base-identities directory, run: leverage terraform apply leverage terraform output ... user_natasha_romanoff_login_profile_encrypted_password = \"SipVOzVtNTI0Ml...EZmJFxxQSteYQ==\" user_natasha_romanoff_name = \"natasha.romanoff\" ... Extract the value of the password field form the output and decrypt it . Now, log in the AWS Console using the management account id: 000123456789 , which can be extracted from the project.yaml or config/common.tfvars files, your IAM user name: natasha.romanoff , and your recently decrypted password. This password should be changed during this procedure. Proceed to enable a virtual MFA device for your user , and generate programmatic keys for it . Make sure to keep these keys in a safe location. As Natasha also has an IAM user for the security account besides the one in management , these steps should be repeated for that account, making sure of logging in the AWS console with the proper account id. Keep in mind that these are two different IAM users in two different accounts , so their credentials are not interchangeable . Configure the new credentials \u00b6 To be able to use the generated programmatic keys, you need to configure them in your local environment. To do that, run: leverage credentials configure --fetch-mfa-device --type MANAGEMENT # or `SECURITY` depending on the credentials to configured [12:28:12.111] INFO Loading configuration file. [12:28:12.132] INFO Loading project environment configuration file. [12:28:12.139] INFO Loading Terraform common configuration. [12:28:13.237] INFO Configuring management credentials. > Select the means by which you'll provide the programmatic keys: Manually > Key: AKIAUH0FAB7QVEXAMPLE > Secret: **************************************** [12:28:30.739] INFO Management credentials configured in: /home/user/.aws/me/credentials [12:28:34.991] INFO Configuring assumable roles. [12:28:34.993] INFO Fetching organization accounts. [12:28:37.060] INFO Fetching MFA device serial. [12:28:39.299] INFO Backing up account profiles file. [12:28:39.941] INFO Configuring profile me-management-oaar [12:28:45.205] INFO Configuring profile me-security-oaar [12:28:50.526] INFO Configuring profile me-shared-oaar [12:28:55.953] INFO Account profiles configured in: /home/user/.aws/me/config [12:28:55.956] INFO Updating project's Terraform common configuration. Note Both of these credentials (management and security) require an MFA device to be enabled. Once either credential is configured, the next step ( Enable MFA ) becomes mandatory. If MFA is not enabled, any action on the project will be executed using the bootstrap credentials. Enable MFA \u00b6 The last step is to enable Multi Factor Authentication locally. The procedure is slightly different for a management IAM user and security IAM user, so we'll walk through both of them. Management user \u00b6 To enable MFA for a management account user, you need to enable this feature individually for the role OrganizationAccountAccessRole in all accounts of the infrastructure. So first, we'll take care of the management account: Move into the account's identities layer: cd management/global/base-identities Change the value role_requires_mfa for the role iam_assumable_role_oaar in roles.tf to true . By default this value is false , that is to say, MFA is disabled for the role. module \"iam_assumable_role_oaar\" { ... # # MFA setup # role_requires_mfa = false -> true ... } And run: leverage terraform apply You now should repeat these steps for the remaining accounts, in this guide's case, the security and shared accounts. Once the change is applied in all layers, change the value of profile in management/config/backend.tfvars # # Backend Configuration # # AWS Profile (required by the backend but also used for other resources) profile = \"me-bootstrap\" ... To <short project name>-management-oaar , which in the case of this guide, would result in: me-bootstrap \u2192 me-management-oaar By doing this, you are effectively switching from using the bootstrap credentials to the management credentials profile for this specific account. Lastly, set MFA_ENABLED in the file build.env , located in the project's root directory, to true . Security user \u00b6 To enable MFA for a security account user, the procedure is simpler but it has to be performed in all accounts but management . In the case of this guide, you need to make changes in the security account as well as in the shared account. Set profile in config/backend.tfvars for each account to <short project name>-<account>-devops . That is: me-security-oaar \u2192 me-security-devops for the security account me-shared-oaar \u2192 me-shared-devops for the shared account Similarly to the management user's MFA enabling step, you are switching from using bootstrap credentials to the respective profile for each account of the security credentials. As a last step you need to make sure that MFA_ENABLED is set to true in the build.env file. Next steps \u00b6 Now you not only have a fully functional landing zone configuration deployed, but also the users to interact with it are correctly configured in both the AWS and local environment. This concludes this first steps guide for the Leverage Reference Architecture for AWS. For more detailed information, visit the links below. How it works User guides","title":"Post-deployment"},{"location":"first-steps/post-deployment/#post-deployment-steps","text":"The whole landing zone is already deployed, and with it, all defined users were created. From now on, each user should generate their personal programmatic keys and enable Multi Factor Authentication for their interactions with the AWS environment. Let's take a look at the steps required to accomplish this.","title":"Post-deployment steps"},{"location":"first-steps/post-deployment/#get-the-temporary-password-to-access-aws-console","text":"We'll take the place of natasha.romanoff to exemplify the process. When Natasha's user was created, an initial random password was also created alongside it. That password was encrypted using her GPG key, as it was shown in the management account's and in the security account's identities layers. As Natasha, you need to access that password so that you can create your programmatic keys to interact with the environment through Leverage. First, for the management account, change the value sensitive to true in the output block user_natasha_romanoff_login_profile_encrypted_password of management/global/base-identities/outputs.tf : output \"user_natasha_romanoff_login_profile_encrypted_password\" { description = \"The encrypted password, base64 encoded\" value = module.user [ \"natasha.romanoff\" ]. iam_user_login_profile_encrypted_password sensitive = true } Then, in the global/base-identities directory, run: leverage terraform apply leverage terraform output ... user_natasha_romanoff_login_profile_encrypted_password = \"SipVOzVtNTI0Ml...EZmJFxxQSteYQ==\" user_natasha_romanoff_name = \"natasha.romanoff\" ... Extract the value of the password field form the output and decrypt it . Now, log in the AWS Console using the management account id: 000123456789 , which can be extracted from the project.yaml or config/common.tfvars files, your IAM user name: natasha.romanoff , and your recently decrypted password. This password should be changed during this procedure. Proceed to enable a virtual MFA device for your user , and generate programmatic keys for it . Make sure to keep these keys in a safe location. As Natasha also has an IAM user for the security account besides the one in management , these steps should be repeated for that account, making sure of logging in the AWS console with the proper account id. Keep in mind that these are two different IAM users in two different accounts , so their credentials are not interchangeable .","title":"Get the temporary password to access AWS console"},{"location":"first-steps/post-deployment/#configure-the-new-credentials","text":"To be able to use the generated programmatic keys, you need to configure them in your local environment. To do that, run: leverage credentials configure --fetch-mfa-device --type MANAGEMENT # or `SECURITY` depending on the credentials to configured [12:28:12.111] INFO Loading configuration file. [12:28:12.132] INFO Loading project environment configuration file. [12:28:12.139] INFO Loading Terraform common configuration. [12:28:13.237] INFO Configuring management credentials. > Select the means by which you'll provide the programmatic keys: Manually > Key: AKIAUH0FAB7QVEXAMPLE > Secret: **************************************** [12:28:30.739] INFO Management credentials configured in: /home/user/.aws/me/credentials [12:28:34.991] INFO Configuring assumable roles. [12:28:34.993] INFO Fetching organization accounts. [12:28:37.060] INFO Fetching MFA device serial. [12:28:39.299] INFO Backing up account profiles file. [12:28:39.941] INFO Configuring profile me-management-oaar [12:28:45.205] INFO Configuring profile me-security-oaar [12:28:50.526] INFO Configuring profile me-shared-oaar [12:28:55.953] INFO Account profiles configured in: /home/user/.aws/me/config [12:28:55.956] INFO Updating project's Terraform common configuration. Note Both of these credentials (management and security) require an MFA device to be enabled. Once either credential is configured, the next step ( Enable MFA ) becomes mandatory. If MFA is not enabled, any action on the project will be executed using the bootstrap credentials.","title":"Configure the new credentials"},{"location":"first-steps/post-deployment/#enable-mfa","text":"The last step is to enable Multi Factor Authentication locally. The procedure is slightly different for a management IAM user and security IAM user, so we'll walk through both of them.","title":"Enable MFA"},{"location":"first-steps/post-deployment/#management-user","text":"To enable MFA for a management account user, you need to enable this feature individually for the role OrganizationAccountAccessRole in all accounts of the infrastructure. So first, we'll take care of the management account: Move into the account's identities layer: cd management/global/base-identities Change the value role_requires_mfa for the role iam_assumable_role_oaar in roles.tf to true . By default this value is false , that is to say, MFA is disabled for the role. module \"iam_assumable_role_oaar\" { ... # # MFA setup # role_requires_mfa = false -> true ... } And run: leverage terraform apply You now should repeat these steps for the remaining accounts, in this guide's case, the security and shared accounts. Once the change is applied in all layers, change the value of profile in management/config/backend.tfvars # # Backend Configuration # # AWS Profile (required by the backend but also used for other resources) profile = \"me-bootstrap\" ... To <short project name>-management-oaar , which in the case of this guide, would result in: me-bootstrap \u2192 me-management-oaar By doing this, you are effectively switching from using the bootstrap credentials to the management credentials profile for this specific account. Lastly, set MFA_ENABLED in the file build.env , located in the project's root directory, to true .","title":"Management user"},{"location":"first-steps/post-deployment/#security-user","text":"To enable MFA for a security account user, the procedure is simpler but it has to be performed in all accounts but management . In the case of this guide, you need to make changes in the security account as well as in the shared account. Set profile in config/backend.tfvars for each account to <short project name>-<account>-devops . That is: me-security-oaar \u2192 me-security-devops for the security account me-shared-oaar \u2192 me-shared-devops for the shared account Similarly to the management user's MFA enabling step, you are switching from using bootstrap credentials to the respective profile for each account of the security credentials. As a last step you need to make sure that MFA_ENABLED is set to true in the build.env file.","title":"Security user"},{"location":"first-steps/post-deployment/#next-steps","text":"Now you not only have a fully functional landing zone configuration deployed, but also the users to interact with it are correctly configured in both the AWS and local environment. This concludes this first steps guide for the Leverage Reference Architecture for AWS. For more detailed information, visit the links below. How it works User guides","title":"Next steps"},{"location":"first-steps/security-and-shared-accounts/","text":"Orchestrate the Security and Shared accounts \u00b6 Deploy the Security account's layers \u00b6 The next account to orchestrate is the security account. This account is intended for centralized user management via a IAM roles based cross organization authentication approach. This means that most of the users for your organization will be defined in this account and those users will access the different accounts through this one. First, place yourself in the security directory. cd security Terraform backend layer \u00b6 Move into the us-east-1/base-tf-backend directory and run: leverage terraform init leverage terraform apply Now, to push the local .tfstate to the bucket, uncomment the backend section for the terraform configuration in security/base-tf-backend/config.tf backend \"s3\" { key = \"security/tf-backend/terraform.tfstate\" } And run again: leverage terraform init When prompted, answer yes . Now you can safely remove the terraform.tfstate and terraform.tfstate.backup files created during the apply step. Identities layer \u00b6 Now, move into the global/base-identities directory, and run: leverage terraform init Copy the files fo this accounts' users into the keys subdirectoy. For this guide's case we need the keys files for natasha.romanoff , kit.walker , edward.stark and john.wick . To prevent Terraform from erroring out you need to import the role OrganizationAccountAccessRole that was already created in the management 's account identities layer before deploying this layer. leverage terraform import module.iam_assumable_role_oaar.aws_iam_role.this [ 0 ] OrganizationAccountAccessRole leverage terraform apply zsh globbing Zsh users may need to prepend noglob to the import command for it to be recognized correctly, as an alternative, square brackets can be escaped as \\[\\] Security layer \u00b6 The last layer for the security account is the security layer. Move into the us-east-1/security-base directory and run: leverage terraform init leverage terraform apply Deploy the Shared account's layers \u00b6 The last account in this deployment is the shared account. The account's objective is managing infrastructure for shared services and resources like directory services, DNS, VPN, monitoring tools or centralized logging solutions. Place yourself in the shared directory. cd shared Terraform backend layer \u00b6 Move into the us-east-1/base-tf-backend directory and run: leverage terraform init leverage terraform apply Now, to push the local .tfstate to the bucket, uncomment the backend section for the terraform configuration in shared/base-tf-backend/config.tf backend \"s3\" { key = \"shared/tf-backend/terraform.tfstate\" } And run a second time: leverage terraform init When prompted, answer yes . Now you can safely remove the terraform.tfstate and terraform.tfstate.backup files created during the apply step. Identities layer \u00b6 Now move into the global/base-identities directory and run: leverage terraform init You also need to import the role OrganizationAccountAccessRole in this layer. leverage terraform import module.iam_assumable_role_oaar.aws_iam_role.this [ 0 ] OrganizationAccountAccessRole leverage terraform apply zsh globbing Zsh users may need to prepend noglob to the import command for it to be recognized correctly, as an alternative, square brackets can be escaped as \\[\\] Security layer \u00b6 Next, move into the us-east-1/security-base directory: leverage terraform init leverage terraform apply Network layer \u00b6 The last layer for the shared account is the network layer, so move into the us-east-1/base-network directory and run: leverage terraform init leverage terraform apply Next steps \u00b6 You have now a fully deployed landing zone configuration for the Leverage Reference Architecture for AWS, with its three accounts management , security and shared ready to be used. Next, you are going to tackle de last steps configuring the credentials for a user to interact with your Leverage project securely.","title":"Orchestrate the Security and Shared accounts"},{"location":"first-steps/security-and-shared-accounts/#orchestrate-the-security-and-shared-accounts","text":"","title":"Orchestrate the Security and Shared accounts"},{"location":"first-steps/security-and-shared-accounts/#deploy-the-security-accounts-layers","text":"The next account to orchestrate is the security account. This account is intended for centralized user management via a IAM roles based cross organization authentication approach. This means that most of the users for your organization will be defined in this account and those users will access the different accounts through this one. First, place yourself in the security directory. cd security","title":"Deploy the Security account's layers"},{"location":"first-steps/security-and-shared-accounts/#terraform-backend-layer","text":"Move into the us-east-1/base-tf-backend directory and run: leverage terraform init leverage terraform apply Now, to push the local .tfstate to the bucket, uncomment the backend section for the terraform configuration in security/base-tf-backend/config.tf backend \"s3\" { key = \"security/tf-backend/terraform.tfstate\" } And run again: leverage terraform init When prompted, answer yes . Now you can safely remove the terraform.tfstate and terraform.tfstate.backup files created during the apply step.","title":"Terraform backend layer"},{"location":"first-steps/security-and-shared-accounts/#identities-layer","text":"Now, move into the global/base-identities directory, and run: leverage terraform init Copy the files fo this accounts' users into the keys subdirectoy. For this guide's case we need the keys files for natasha.romanoff , kit.walker , edward.stark and john.wick . To prevent Terraform from erroring out you need to import the role OrganizationAccountAccessRole that was already created in the management 's account identities layer before deploying this layer. leverage terraform import module.iam_assumable_role_oaar.aws_iam_role.this [ 0 ] OrganizationAccountAccessRole leverage terraform apply zsh globbing Zsh users may need to prepend noglob to the import command for it to be recognized correctly, as an alternative, square brackets can be escaped as \\[\\]","title":"Identities layer"},{"location":"first-steps/security-and-shared-accounts/#security-layer","text":"The last layer for the security account is the security layer. Move into the us-east-1/security-base directory and run: leverage terraform init leverage terraform apply","title":"Security layer"},{"location":"first-steps/security-and-shared-accounts/#deploy-the-shared-accounts-layers","text":"The last account in this deployment is the shared account. The account's objective is managing infrastructure for shared services and resources like directory services, DNS, VPN, monitoring tools or centralized logging solutions. Place yourself in the shared directory. cd shared","title":"Deploy the Shared account's layers"},{"location":"first-steps/security-and-shared-accounts/#terraform-backend-layer_1","text":"Move into the us-east-1/base-tf-backend directory and run: leverage terraform init leverage terraform apply Now, to push the local .tfstate to the bucket, uncomment the backend section for the terraform configuration in shared/base-tf-backend/config.tf backend \"s3\" { key = \"shared/tf-backend/terraform.tfstate\" } And run a second time: leverage terraform init When prompted, answer yes . Now you can safely remove the terraform.tfstate and terraform.tfstate.backup files created during the apply step.","title":"Terraform backend layer"},{"location":"first-steps/security-and-shared-accounts/#identities-layer_1","text":"Now move into the global/base-identities directory and run: leverage terraform init You also need to import the role OrganizationAccountAccessRole in this layer. leverage terraform import module.iam_assumable_role_oaar.aws_iam_role.this [ 0 ] OrganizationAccountAccessRole leverage terraform apply zsh globbing Zsh users may need to prepend noglob to the import command for it to be recognized correctly, as an alternative, square brackets can be escaped as \\[\\]","title":"Identities layer"},{"location":"first-steps/security-and-shared-accounts/#security-layer_1","text":"Next, move into the us-east-1/security-base directory: leverage terraform init leverage terraform apply","title":"Security layer"},{"location":"first-steps/security-and-shared-accounts/#network-layer","text":"The last layer for the shared account is the network layer, so move into the us-east-1/base-network directory and run: leverage terraform init leverage terraform apply","title":"Network layer"},{"location":"first-steps/security-and-shared-accounts/#next-steps","text":"You have now a fully deployed landing zone configuration for the Leverage Reference Architecture for AWS, with its three accounts management , security and shared ready to be used. Next, you are going to tackle de last steps configuring the credentials for a user to interact with your Leverage project securely.","title":"Next steps"},{"location":"how-it-works/read-more/","text":"Read more \u00b6 Please consider some official AWS docs, blog post and whitepapers we've considered for the current Reference Solutions Architecture design: AWS Reference Articles CloudTrail for AWS Organizations: https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html Reserved Instances - Multi Account: https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ec2-on-demand-capacity-reservations-shared-across-multiple-aws-accounts/ AWS Multiple Account Security Strategy: https://d0.awsstatic.com/aws-answers/AWS_Multi_Account_Security_Strategy.pdf AWS Multiple Account Billing Strategy: https://aws.amazon.com/answers/account-management/aws-multi-account-billing-strategy/ AWS Secure Account Setup: https://aws.amazon.com/answers/security/aws-secure-account-setup/ Authentication and Access Control for AWS Organizations: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html AWS Regions: https://www.concurrencylabs.com/blog/choose-your-aws-region-wisely/ VPC Peering: https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html Route53 DNS VPC Associations: https://aws.amazon.com/premiumsupport/knowledge-center/private-hosted-zone-different-account/ AWS Well Architected Framework: https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/ AWS Tagging strategies: https://aws.amazon.com/answers/account-management/aws-tagging-strategies/ Inviting an AWS Account to Join Your Organization : https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html","title":"Read More"},{"location":"how-it-works/read-more/#read-more","text":"Please consider some official AWS docs, blog post and whitepapers we've considered for the current Reference Solutions Architecture design: AWS Reference Articles CloudTrail for AWS Organizations: https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html Reserved Instances - Multi Account: https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ec2-on-demand-capacity-reservations-shared-across-multiple-aws-accounts/ AWS Multiple Account Security Strategy: https://d0.awsstatic.com/aws-answers/AWS_Multi_Account_Security_Strategy.pdf AWS Multiple Account Billing Strategy: https://aws.amazon.com/answers/account-management/aws-multi-account-billing-strategy/ AWS Secure Account Setup: https://aws.amazon.com/answers/security/aws-secure-account-setup/ Authentication and Access Control for AWS Organizations: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html AWS Regions: https://www.concurrencylabs.com/blog/choose-your-aws-region-wisely/ VPC Peering: https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html Route53 DNS VPC Associations: https://aws.amazon.com/premiumsupport/knowledge-center/private-hosted-zone-different-account/ AWS Well Architected Framework: https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/ AWS Tagging strategies: https://aws.amazon.com/answers/account-management/aws-tagging-strategies/ Inviting an AWS Account to Join Your Organization : https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html","title":"Read more"},{"location":"how-it-works/features/features-overview/","text":"AWS Reference Architecture features \u00b6 Governance | AWS Organizations AWS Organizations Accounts Consolidated Billing Identity Management Identities IAM Roles Single Sign-On (SSO) AWS SSO + Jumpcloud IdP Cost Monitoring & Optimization Costs Security Security Services IAM Access Analyzer VPN | Pritunl Certificates Networking | VPC, TGW, NFW, DNS and NACLs Network VPC Addressing VPC Peering Transit Gateway (TGW) Network Firewall & NACLs DNS Secrets Management Secrets Compute Compute K8s EKS K8s Kops K8s Service Mesh Serverless Databases Databases RDS MySql RDS Postgres Storage Storage Content Delivery Network (CDN) AWS CloudFront CI/CD (Continuous Integration / Continuous Delivery) CI/CD K8s ArgoCD Monitoring | Metrics, Logs, APM and Tracing Monitoring Metrics Logs Tracing APM Notifications Reliability Bakcups High-Availability Health-Checks Disaster Recovery","title":"Overview"},{"location":"how-it-works/features/features-overview/#aws-reference-architecture-features","text":"Governance | AWS Organizations AWS Organizations Accounts Consolidated Billing Identity Management Identities IAM Roles Single Sign-On (SSO) AWS SSO + Jumpcloud IdP Cost Monitoring & Optimization Costs Security Security Services IAM Access Analyzer VPN | Pritunl Certificates Networking | VPC, TGW, NFW, DNS and NACLs Network VPC Addressing VPC Peering Transit Gateway (TGW) Network Firewall & NACLs DNS Secrets Management Secrets Compute Compute K8s EKS K8s Kops K8s Service Mesh Serverless Databases Databases RDS MySql RDS Postgres Storage Storage Content Delivery Network (CDN) AWS CloudFront CI/CD (Continuous Integration / Continuous Delivery) CI/CD K8s ArgoCD Monitoring | Metrics, Logs, APM and Tracing Monitoring Metrics Logs Tracing APM Notifications Reliability Bakcups High-Availability Health-Checks Disaster Recovery","title":"AWS Reference Architecture features"},{"location":"how-it-works/features/cdn/cdn/","text":"CDN \u00b6 AWS Cloud Front Amazon CloudFront is a fast content delivery network (CDN) service that securely delivers data, videos, applications, and APIs to customers globally with low latency, high transfer speeds, all within a developer-friendly environment. CloudFront is integrated with AWS \u2013 both physical locations that are directly connected to the AWS global infrastructure, as well as other AWS services. CloudFront works seamlessly with services including AWS Shield for DDoS mitigation, Amazon S3, Elastic Load Balancing, API Gateway or Amazon EC2 as origins for your applications, and Lambda@Edge to run custom code closer to customers\u2019 users and to customize the user experience. Lastly, if you use AWS origins such as Amazon S3, Amazon EC2 or Elastic Load Balancing, you don\u2019t pay for any data transferred between these services and CloudFront. Load Balancer (ALB | NLB) & S3 Cloudfront Origins \u00b6 Figure: AWS CloudFront with ELB and S3 as origin diagram. (Source: Lee Atkinson, \"How to Help Achieve Mobile App Transport Security (ATS) Compliance by Using Amazon CloudFront and AWS Certificate Manager\" , AWS Security Blog, accessed November 17th 2020). API Gateway Cloudfront Origins \u00b6 Figure: AWS CloudFront with API Gateway as origin diagram. (Source: AWS, \"AWS Solutions Library, AWS Solutions Implementations Serverless Image Handler\" , AWS Solutions Library Solutions Implementations, accessed November 17th 2020).","title":"CDN"},{"location":"how-it-works/features/cdn/cdn/#cdn","text":"AWS Cloud Front Amazon CloudFront is a fast content delivery network (CDN) service that securely delivers data, videos, applications, and APIs to customers globally with low latency, high transfer speeds, all within a developer-friendly environment. CloudFront is integrated with AWS \u2013 both physical locations that are directly connected to the AWS global infrastructure, as well as other AWS services. CloudFront works seamlessly with services including AWS Shield for DDoS mitigation, Amazon S3, Elastic Load Balancing, API Gateway or Amazon EC2 as origins for your applications, and Lambda@Edge to run custom code closer to customers\u2019 users and to customize the user experience. Lastly, if you use AWS origins such as Amazon S3, Amazon EC2 or Elastic Load Balancing, you don\u2019t pay for any data transferred between these services and CloudFront.","title":"CDN"},{"location":"how-it-works/features/cdn/cdn/#load-balancer-alb-nlb-s3-cloudfront-origins","text":"Figure: AWS CloudFront with ELB and S3 as origin diagram. (Source: Lee Atkinson, \"How to Help Achieve Mobile App Transport Security (ATS) Compliance by Using Amazon CloudFront and AWS Certificate Manager\" , AWS Security Blog, accessed November 17th 2020).","title":"Load Balancer (ALB | NLB) &amp; S3 Cloudfront Origins"},{"location":"how-it-works/features/cdn/cdn/#api-gateway-cloudfront-origins","text":"Figure: AWS CloudFront with API Gateway as origin diagram. (Source: AWS, \"AWS Solutions Library, AWS Solutions Implementations Serverless Image Handler\" , AWS Solutions Library Solutions Implementations, accessed November 17th 2020).","title":"API Gateway Cloudfront Origins"},{"location":"how-it-works/features/ci-cd/ci-cd/","text":"Continuous Integration / Continuous Delivery (CI/CD) \u00b6 Opt-1: Jenkins + ArgoCD \u00b6 Figure: ACI/CD with Jenkins + ArgoCD architecture diagram. (Source: ArgoCD, \"Overview - What Is Argo CD\" , ArgoCD documentation, accessed November 18th 2020). Opt-2: Jenkins + Spinnaker \u00b6 Figure: CI/CD with Jenkins + Spinnaker diagram. (Source: Irshad Buchh, \"Continuous Delivery using Spinnaker on Amazon EKS\" , AWS Open Source Blog, accessed November 18th 2020).","title":"Overview"},{"location":"how-it-works/features/ci-cd/ci-cd/#continuous-integration-continuous-delivery-cicd","text":"","title":"Continuous Integration / Continuous Delivery (CI/CD)"},{"location":"how-it-works/features/ci-cd/ci-cd/#opt-1-jenkins-argocd","text":"Figure: ACI/CD with Jenkins + ArgoCD architecture diagram. (Source: ArgoCD, \"Overview - What Is Argo CD\" , ArgoCD documentation, accessed November 18th 2020).","title":"Opt-1: Jenkins + ArgoCD"},{"location":"how-it-works/features/ci-cd/ci-cd/#opt-2-jenkins-spinnaker","text":"Figure: CI/CD with Jenkins + Spinnaker diagram. (Source: Irshad Buchh, \"Continuous Delivery using Spinnaker on Amazon EKS\" , AWS Open Source Blog, accessed November 18th 2020).","title":"Opt-2: Jenkins + Spinnaker"},{"location":"how-it-works/features/ci-cd/k8s-argocd/","text":"ArgoCD \u00b6 AWS Apps & Services K8s EKS accounts diagram \u00b6 The below diagram is based on our Binbash Leverage Reference Architecture CI-CD official documentation Figure: K8S reference architecture CI/CD with ArgoCD diagram. (Source: Binbash Leverage Confluence Doc, \"Implementation Diagrams\" , Binbash Leverage Doc, accessed August 4th 2021).","title":"ArgoCD"},{"location":"how-it-works/features/ci-cd/k8s-argocd/#argocd","text":"","title":"ArgoCD"},{"location":"how-it-works/features/ci-cd/k8s-argocd/#aws-apps-services-k8s-eks-accounts-diagram","text":"The below diagram is based on our Binbash Leverage Reference Architecture CI-CD official documentation Figure: K8S reference architecture CI/CD with ArgoCD diagram. (Source: Binbash Leverage Confluence Doc, \"Implementation Diagrams\" , Binbash Leverage Doc, accessed August 4th 2021).","title":"AWS Apps &amp; Services K8s EKS accounts diagram"},{"location":"how-it-works/features/compute/k8s-eks/","text":"Kubernetes AWS EKS \u00b6 Amazon Elastic Kubernetes Services (EKS) is a managed service that makes it easy for you to run Kubernetes on AWS without needing to install and operate your own Kubernetes control plane or worker nodes. Core Features Highly Secure: EKS automatically applies the latest security patches to your cluster control plane. Multiple Availability Zones: EKS auto-detects and replaces unhealthy control plane nodes and provides on-demand, zero downtime upgrades and patching. Serverless Compute: EKS supports AWS Fargate to remove the need to provision and manage servers, improving security through application isolation by design. Built with the Community: AWS actively works with the Kubernetes community, including making contributions to the Kubernetes code base helping you take advantage of AWS services. Figure: AWS K8s EKS architecture diagram (just as reference). (Source: Jay McConnell, \"A tale from the trenches: The CloudBees Core on AWS Quick Start\" , AWS Infrastructure & Automation Blog post, accessed November 18th 2020). Version support convention \u00b6 At Leverage we support the last 3 latest stable Kubernetes version releases (at best effort) within our Reference Architecture EKS layer and IaC Library EKS module We think this is a good balance between management overhead and an acceptable level of supported versions (at best effort). If your project have and older legacy version we could work along your CloudOps team to safely migrate it to a Leverage supported EKS version.","title":"K8s EKS"},{"location":"how-it-works/features/compute/k8s-eks/#kubernetes-aws-eks","text":"Amazon Elastic Kubernetes Services (EKS) is a managed service that makes it easy for you to run Kubernetes on AWS without needing to install and operate your own Kubernetes control plane or worker nodes. Core Features Highly Secure: EKS automatically applies the latest security patches to your cluster control plane. Multiple Availability Zones: EKS auto-detects and replaces unhealthy control plane nodes and provides on-demand, zero downtime upgrades and patching. Serverless Compute: EKS supports AWS Fargate to remove the need to provision and manage servers, improving security through application isolation by design. Built with the Community: AWS actively works with the Kubernetes community, including making contributions to the Kubernetes code base helping you take advantage of AWS services. Figure: AWS K8s EKS architecture diagram (just as reference). (Source: Jay McConnell, \"A tale from the trenches: The CloudBees Core on AWS Quick Start\" , AWS Infrastructure & Automation Blog post, accessed November 18th 2020).","title":"Kubernetes AWS EKS"},{"location":"how-it-works/features/compute/k8s-eks/#version-support-convention","text":"At Leverage we support the last 3 latest stable Kubernetes version releases (at best effort) within our Reference Architecture EKS layer and IaC Library EKS module We think this is a good balance between management overhead and an acceptable level of supported versions (at best effort). If your project have and older legacy version we could work along your CloudOps team to safely migrate it to a Leverage supported EKS version.","title":"Version support convention"},{"location":"how-it-works/features/compute/k8s-kops/","text":"Kubernetes Kops \u00b6 Kops is an official Kubernetes project for managing production-grade Kubernetes clusters. Kops is currently the best tool to deploy Kubernetes clusters to Amazon Web Services. The project describes itself as kubectl for clusters. Core Features Open-source & supports AWS and GCE Deploy clusters to existing virtual private clouds (VPC) or create a new VPC from scratch Supports public & private topologies Provisions single or multiple master clusters Configurable bastion machines for SSH access to individual cluster nodes Built on a state-sync model for dry-runs and automatic idempotency Direct infrastructure manipulation, or works with CloudFormation and Terraform Rolling cluster updates Supports heterogeneous clusters by creating multiple instance groups Figure: AWS K8s Kops architecture diagram (just as reference). (Source: Carlos Rodriguez, \"How to deploy a Kubernetes cluster on AWS with Terraform & kops\" , Nclouds.com Blog post, accessed November 18th 2020).","title":"K8s Kops"},{"location":"how-it-works/features/compute/k8s-kops/#kubernetes-kops","text":"Kops is an official Kubernetes project for managing production-grade Kubernetes clusters. Kops is currently the best tool to deploy Kubernetes clusters to Amazon Web Services. The project describes itself as kubectl for clusters. Core Features Open-source & supports AWS and GCE Deploy clusters to existing virtual private clouds (VPC) or create a new VPC from scratch Supports public & private topologies Provisions single or multiple master clusters Configurable bastion machines for SSH access to individual cluster nodes Built on a state-sync model for dry-runs and automatic idempotency Direct infrastructure manipulation, or works with CloudFormation and Terraform Rolling cluster updates Supports heterogeneous clusters by creating multiple instance groups Figure: AWS K8s Kops architecture diagram (just as reference). (Source: Carlos Rodriguez, \"How to deploy a Kubernetes cluster on AWS with Terraform & kops\" , Nclouds.com Blog post, accessed November 18th 2020).","title":"Kubernetes Kops"},{"location":"how-it-works/features/compute/k8s-service-mesh/","text":"Service Mesh \u00b6 Overview \u00b6 Ultra light, ultra simple, ultra powerful. Linkerd adds security, observability, and reliability to Kubernetes, without the complexity. CNCF-hosted and 100% open source. How it works \u00b6 How Linkerd works Linkerd works by installing a set of ultralight, transparent proxies next to each service instance. These proxies automatically handle all traffic to and from the service. Because they\u2019re transparent, these proxies act as highly instrumented out-of-process network stacks, sending telemetry to, and receiving control signals from, the control plane. This design allows Linkerd to measure and manipulate traffic to and from your service without introducing excessive latency. Architecture \u00b6 Figure: Figure: Linkerd v2.10 architecture diagram. (Source: Linkerd official documentation, \"High level Linkerd control plane and a data plane.\" , Linkerd Doc, accessed June 14th 2021). Dashboard \u00b6 Figure: Figure: Linkerd v2.10 dashboard. (Source: Linkerd official documentation, \"Linkerd dashboard\" , Linkerd Doc, accessed June 14th 2021). Read more \u00b6 Related resources Linkerd vs Istio benchamrks","title":"K8s Service Mesh"},{"location":"how-it-works/features/compute/k8s-service-mesh/#service-mesh","text":"","title":"Service Mesh"},{"location":"how-it-works/features/compute/k8s-service-mesh/#overview","text":"Ultra light, ultra simple, ultra powerful. Linkerd adds security, observability, and reliability to Kubernetes, without the complexity. CNCF-hosted and 100% open source.","title":"Overview"},{"location":"how-it-works/features/compute/k8s-service-mesh/#how-it-works","text":"How Linkerd works Linkerd works by installing a set of ultralight, transparent proxies next to each service instance. These proxies automatically handle all traffic to and from the service. Because they\u2019re transparent, these proxies act as highly instrumented out-of-process network stacks, sending telemetry to, and receiving control signals from, the control plane. This design allows Linkerd to measure and manipulate traffic to and from your service without introducing excessive latency.","title":"How it works"},{"location":"how-it-works/features/compute/k8s-service-mesh/#architecture","text":"Figure: Figure: Linkerd v2.10 architecture diagram. (Source: Linkerd official documentation, \"High level Linkerd control plane and a data plane.\" , Linkerd Doc, accessed June 14th 2021).","title":"Architecture"},{"location":"how-it-works/features/compute/k8s-service-mesh/#dashboard","text":"Figure: Figure: Linkerd v2.10 dashboard. (Source: Linkerd official documentation, \"Linkerd dashboard\" , Linkerd Doc, accessed June 14th 2021).","title":"Dashboard"},{"location":"how-it-works/features/compute/k8s-service-mesh/#read-more","text":"Related resources Linkerd vs Istio benchamrks","title":"Read more"},{"location":"how-it-works/features/compute/overview/","text":"Compute \u00b6 Containers and Serverless \u00b6 Overview In order to serve Client application workloads we propose to implement Kubernetes , and proceed to containerize all application stacks whenever it\u2019s the best solution (we\u2019ll also consider AWS Lambda for a Serverless approach when it fits better). Kubernetes is an open source container orchestration platform that eases the process of running containers across many different machines, scaling up or down by adding or removing containers when demand changes and provides high availability features. Also, it serves as an abstraction layer that will give Client the possibility, with minimal effort, to move the apps to other Kubernetes clusters running elsewhere, or a managed Kubernetes service such as AWS EKS, GCP GKE or others. Clusters will be provisioned with Kops and/or AWS EKS , which are solutions meant to orchestrate this compute engine in AWS. Whenever possible the initial version deployed will be the latest stable release. Figure: Kubernetes high level components architecture. (Source: Andrew Martin, \"11 Ways (Not) to Get Hacked\" , Kubernetes.io Blog post, accessed November 18th 2020). Kubernetes addons \u00b6 Some possible K8s addons could be Security IAM Authenticator Networking Kubernetes Nginx Ingress Controller Linked2 (Service Mesh) Monitoring & Logs fluentd daemonset for elasticsearch logs kube-state-metrics prometheus node-exporter Distributed Tracing jaeger opencensus UI Dashboard kube-ops-view kubernetes-dashboard weave-scope Availability & Reliability autoscaler Velero (Backups) Utilities onetimesecret","title":"Overview"},{"location":"how-it-works/features/compute/overview/#compute","text":"","title":"Compute"},{"location":"how-it-works/features/compute/overview/#containers-and-serverless","text":"Overview In order to serve Client application workloads we propose to implement Kubernetes , and proceed to containerize all application stacks whenever it\u2019s the best solution (we\u2019ll also consider AWS Lambda for a Serverless approach when it fits better). Kubernetes is an open source container orchestration platform that eases the process of running containers across many different machines, scaling up or down by adding or removing containers when demand changes and provides high availability features. Also, it serves as an abstraction layer that will give Client the possibility, with minimal effort, to move the apps to other Kubernetes clusters running elsewhere, or a managed Kubernetes service such as AWS EKS, GCP GKE or others. Clusters will be provisioned with Kops and/or AWS EKS , which are solutions meant to orchestrate this compute engine in AWS. Whenever possible the initial version deployed will be the latest stable release. Figure: Kubernetes high level components architecture. (Source: Andrew Martin, \"11 Ways (Not) to Get Hacked\" , Kubernetes.io Blog post, accessed November 18th 2020).","title":"Containers and Serverless"},{"location":"how-it-works/features/compute/overview/#kubernetes-addons","text":"Some possible K8s addons could be Security IAM Authenticator Networking Kubernetes Nginx Ingress Controller Linked2 (Service Mesh) Monitoring & Logs fluentd daemonset for elasticsearch logs kube-state-metrics prometheus node-exporter Distributed Tracing jaeger opencensus UI Dashboard kube-ops-view kubernetes-dashboard weave-scope Availability & Reliability autoscaler Velero (Backups) Utilities onetimesecret","title":"Kubernetes addons"},{"location":"how-it-works/features/compute/serverless/","text":"Serverless Compute \u00b6 As stated by AWS Serverless definitions What is serverless? Serverless is the native architecture of the cloud that enables you to shift more of your operational responsibilities to AWS, increasing your agility and innovation. Serverless allows you to build and run applications and services without thinking about servers. It eliminates infrastructure management tasks such as server or cluster provisioning, patching, operating system maintenance, and capacity provisioning. You can build them for nearly any type of application or backend service, and everything required to run and scale your application with high availability is handled for you. Why use serverless? Serverless enables you to build modern applications with increased agility and lower total cost of ownership. Building serverless applications means that your developers can focus on their core product instead of worrying about managing and operating servers or runtimes, either in the cloud or on-premises. This reduced overhead lets developers reclaim time and energy that can be spent on developing great products which scale and that are reliable. Figure: AWS serverless architecture diagram (just as reference). (Source: Nathan Peck, \"Designing a modern serverless application with AWS Lambda and AWS Fargate\" , Containers-on-AWS Medium Blog post, accessed November 18th 2020). Serverless Compute Services AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume - there is no charge when your code is not running. Lambda@Edge allows you to run Lambda functions at AWS Edge locations in response to Amazon CloudFront events. AWS Fargate is a purpose-built serverless compute engine for containers. Fargate scales and manages the infrastructure required to run your containers.","title":"Serverless"},{"location":"how-it-works/features/compute/serverless/#serverless-compute","text":"As stated by AWS Serverless definitions What is serverless? Serverless is the native architecture of the cloud that enables you to shift more of your operational responsibilities to AWS, increasing your agility and innovation. Serverless allows you to build and run applications and services without thinking about servers. It eliminates infrastructure management tasks such as server or cluster provisioning, patching, operating system maintenance, and capacity provisioning. You can build them for nearly any type of application or backend service, and everything required to run and scale your application with high availability is handled for you. Why use serverless? Serverless enables you to build modern applications with increased agility and lower total cost of ownership. Building serverless applications means that your developers can focus on their core product instead of worrying about managing and operating servers or runtimes, either in the cloud or on-premises. This reduced overhead lets developers reclaim time and energy that can be spent on developing great products which scale and that are reliable. Figure: AWS serverless architecture diagram (just as reference). (Source: Nathan Peck, \"Designing a modern serverless application with AWS Lambda and AWS Fargate\" , Containers-on-AWS Medium Blog post, accessed November 18th 2020). Serverless Compute Services AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume - there is no charge when your code is not running. Lambda@Edge allows you to run Lambda functions at AWS Edge locations in response to Amazon CloudFront events. AWS Fargate is a purpose-built serverless compute engine for containers. Fargate scales and manages the infrastructure required to run your containers.","title":"Serverless Compute"},{"location":"how-it-works/features/compute/tools/","text":"Infrastructure Instances Tools \u00b6 Overview \u00b6 Apart from the EC2 instances that are part of Kubernetes, there are going to be other instances running tools for monitoring, logging centralization, builds/tests, deployment, among others. that are to be defined at this point. Some of them can be replaced by managed services, like: CircleCI, Snyk, etc, and this can have cons and pros that will need to be considered at the time of implementation. Any OS that is provisioned will be completely reproducible as code, in the event of migration to another vendor. Other settings for all EC2 instances Ubuntu 18.04 based (Latest AMI) EBS volumes encrypted: Yes EBS volume type: gp2 (SSD) Termination protection: Yes Infrastructure EC2 instances VPN Server Pritunl (https://vpn.domain.com) Monitoring & Alerting Prometheus (https://prometheus.domain.com) Grafana (https://grafana.domain.com) Centralized Logs Elasticsearch + Kibana (https://kibana.domain.com) CI/CD Jenkins (https://jenkins.domain.com) Spinnaker (https://spinnaker.domain.com) Droneci (https://droneci.domain.com) Webhook (https://webhook.domain.com) Secret Mgmt Hashicorp Vault (https://vault.domain.com)","title":"Tools"},{"location":"how-it-works/features/compute/tools/#infrastructure-instances-tools","text":"","title":"Infrastructure Instances Tools"},{"location":"how-it-works/features/compute/tools/#overview","text":"Apart from the EC2 instances that are part of Kubernetes, there are going to be other instances running tools for monitoring, logging centralization, builds/tests, deployment, among others. that are to be defined at this point. Some of them can be replaced by managed services, like: CircleCI, Snyk, etc, and this can have cons and pros that will need to be considered at the time of implementation. Any OS that is provisioned will be completely reproducible as code, in the event of migration to another vendor. Other settings for all EC2 instances Ubuntu 18.04 based (Latest AMI) EBS volumes encrypted: Yes EBS volume type: gp2 (SSD) Termination protection: Yes Infrastructure EC2 instances VPN Server Pritunl (https://vpn.domain.com) Monitoring & Alerting Prometheus (https://prometheus.domain.com) Grafana (https://grafana.domain.com) Centralized Logs Elasticsearch + Kibana (https://kibana.domain.com) CI/CD Jenkins (https://jenkins.domain.com) Spinnaker (https://spinnaker.domain.com) Droneci (https://droneci.domain.com) Webhook (https://webhook.domain.com) Secret Mgmt Hashicorp Vault (https://vault.domain.com)","title":"Overview"},{"location":"how-it-works/features/costs/costs/","text":"Cost Estmation & Optimization \u00b6 Opportunity to optimize resources \u00b6 Compute Usage of reserved EC2 instances for stable workloads (AWS Cost Explorer Reserved Optimization | Compute Optimizer - get a -$ of up to 42% vs On-Demand) Usage of Spot EC2 instances for fault-tolerant workloads (-$ by up to 90%). Use ASG to allow your EC2 fleet to \u00b1 based on demand. Id EC2 w/ low-utiliz and -$ by stop / rightsize them. Compute Savings Plans to reduce EC2, Fargate and Lambda $ (Compute Savings Plans OK regardless of EC2 family, size, AZ, reg, OS or tenancy, OK for Fargate / Lambda too). Databases Usage of reserved RDS instances for stable workload databases. Monitoring & Automation AWS billing alarms + AWS Budget (forecasted account cost / RI Coverage) Notifications to Slack Activate AWS Trusted Advisor cost related results Id EBS w/ low-utiliz and -$ by snapshotting and then rm them Check underutilized EBS to be possibly shrunk or removed. Networking -> deleting idle LB -> Use LB check w/ RequestCount of > 100 past 7d. Setup Lambda nuke to automatically clean up AWS account resources. Setup lambda scheduler for stop and start resources on AWS (EC2, ASG & RDS) Storage & Network Traffic Check S3 usage and -$ by leveraging lower $ storage tiers. Use S3 Analytics, or automate mv for these objects into lower $ storage tier w/ Life Cycle Policies or w/ S3 Intelligent-Tiering. If DataTransferOut from EC2 to the public internet is significant $, consider implementing CloudFront. Consideration \u00b6 Reserved Instances Stable workloads will always run on reserved instances, the following calculation only considers 1yr. No Upfront mode, in which Client will not have to pay in advance but commits to this monthly usage and will be billed so, even if the instance type is not used. More aggressive Reservation strategies can be implemented to further reduce costs, these will have to be analyzed by business in conjunction with operations. Read more \u00b6 Reference links Consider the following extra links as reference: AWS Ramp-Up Guide: Cost Management How is the pricing benefit of a RI applied across an organization's consolidated bill? A Guide to Cloud Cost Optimization with HashiCorp Terraform FinOps: How Cloud Finance Management Can Save Your Cloud Programme From Extinction","title":"Costs"},{"location":"how-it-works/features/costs/costs/#cost-estmation-optimization","text":"","title":"Cost Estmation &amp; Optimization"},{"location":"how-it-works/features/costs/costs/#opportunity-to-optimize-resources","text":"Compute Usage of reserved EC2 instances for stable workloads (AWS Cost Explorer Reserved Optimization | Compute Optimizer - get a -$ of up to 42% vs On-Demand) Usage of Spot EC2 instances for fault-tolerant workloads (-$ by up to 90%). Use ASG to allow your EC2 fleet to \u00b1 based on demand. Id EC2 w/ low-utiliz and -$ by stop / rightsize them. Compute Savings Plans to reduce EC2, Fargate and Lambda $ (Compute Savings Plans OK regardless of EC2 family, size, AZ, reg, OS or tenancy, OK for Fargate / Lambda too). Databases Usage of reserved RDS instances for stable workload databases. Monitoring & Automation AWS billing alarms + AWS Budget (forecasted account cost / RI Coverage) Notifications to Slack Activate AWS Trusted Advisor cost related results Id EBS w/ low-utiliz and -$ by snapshotting and then rm them Check underutilized EBS to be possibly shrunk or removed. Networking -> deleting idle LB -> Use LB check w/ RequestCount of > 100 past 7d. Setup Lambda nuke to automatically clean up AWS account resources. Setup lambda scheduler for stop and start resources on AWS (EC2, ASG & RDS) Storage & Network Traffic Check S3 usage and -$ by leveraging lower $ storage tiers. Use S3 Analytics, or automate mv for these objects into lower $ storage tier w/ Life Cycle Policies or w/ S3 Intelligent-Tiering. If DataTransferOut from EC2 to the public internet is significant $, consider implementing CloudFront.","title":"Opportunity to optimize resources"},{"location":"how-it-works/features/costs/costs/#consideration","text":"Reserved Instances Stable workloads will always run on reserved instances, the following calculation only considers 1yr. No Upfront mode, in which Client will not have to pay in advance but commits to this monthly usage and will be billed so, even if the instance type is not used. More aggressive Reservation strategies can be implemented to further reduce costs, these will have to be analyzed by business in conjunction with operations.","title":"Consideration"},{"location":"how-it-works/features/costs/costs/#read-more","text":"Reference links Consider the following extra links as reference: AWS Ramp-Up Guide: Cost Management How is the pricing benefit of a RI applied across an organization's consolidated bill? A Guide to Cloud Cost Optimization with HashiCorp Terraform FinOps: How Cloud Finance Management Can Save Your Cloud Programme From Extinction","title":"Read more"},{"location":"how-it-works/features/database/database/","text":"Databases \u00b6 Overview \u00b6 Will implement AWS RDS databases matching the requirements of the current application stacks. If the region selected is the same you're actually using for your legacy AWS RDS instances we will be able to create a peering connection to existing databases in order to migrate the application stacks first, then databases. AWS RDS Specs RDS Instance Size Multi AZ Encryption: Yes Auto Minor version update Automated snapshots Snapshot retention","title":"Databases"},{"location":"how-it-works/features/database/database/#databases","text":"","title":"Databases"},{"location":"how-it-works/features/database/database/#overview","text":"Will implement AWS RDS databases matching the requirements of the current application stacks. If the region selected is the same you're actually using for your legacy AWS RDS instances we will be able to create a peering connection to existing databases in order to migrate the application stacks first, then databases. AWS RDS Specs RDS Instance Size Multi AZ Encryption: Yes Auto Minor version update Automated snapshots Snapshot retention","title":"Overview"},{"location":"how-it-works/features/database/mysql/","text":"RDS | MySQL \u00b6","title":"MySQL"},{"location":"how-it-works/features/database/mysql/#rds-mysql","text":"","title":"RDS | MySQL"},{"location":"how-it-works/features/database/postgres/","text":"RDS | PostgresSQL \u00b6","title":"PostgresSQL"},{"location":"how-it-works/features/database/postgres/#rds-postgressql","text":"","title":"RDS | PostgresSQL"},{"location":"how-it-works/features/identities/identities/","text":"Identity and Access Management (IAM) Layer \u00b6 Summary \u00b6 Having this official AWS resource as reference we've define a security account structure for managing multiple accounts. User Management Definitions IAM users will strictly be created and centralized in the Security account (member accounts IAM Users could be exceptionally created for very specific tools that still don\u2019t support IAM roles for cross-account auth). All access to resources within the Client organization will be assigned via policy documents attached to IAM roles or groups. All IAM roles and groups will have the least privileges required to properly work. IAM AWS and Customer managed policies will be defined, inline policies will be avoided whenever possible. All user management will be maintained as code and will reside in the DevOps repository. All users will have MFA enabled whenever possible (VPN and AWS Web Console). Root user credentials will be rotated and secured. MFA for root will be enabled. IAM Access Keys for root will be disabled. IAM root access will be monitored via CloudWatch Alerts. Why multi account IAM strategy? Creating a security relationship between accounts makes it even easier for companies to assess the security of AWS-based deployments, centralize security monitoring and management, manage identity and access, and provide audit and compliance monitoring services Figure: AWS Organization Security account structure for managing multiple accounts (just as reference). (Source: Yoriyasu Yano, \"How to Build an End to End Production-Grade Architecture on AWS Part 2\" , Gruntwork.io Blog, accessed November 18th 2020). IAM Groups & Roles definition \u00b6 AWS Org member accounts IAM groups : Account Name AWS Org Member Accounts IAM Groups Admin Auditor DevOps DeployMaster project-management x project-security x x x x AWS Org member accounts IAM roles : Account Name AWS Org Member Accounts IAM Roles Admin Auditor DevOps DeployMaster OrganizationAccountAccessRole project-management x project-security x x x x project-shared x x x x x project-legacy x x x project-apps-devstg x x x x x project-apps-prd x x x x x","title":"Overview"},{"location":"how-it-works/features/identities/identities/#identity-and-access-management-iam-layer","text":"","title":"Identity and Access Management (IAM) Layer"},{"location":"how-it-works/features/identities/identities/#summary","text":"Having this official AWS resource as reference we've define a security account structure for managing multiple accounts. User Management Definitions IAM users will strictly be created and centralized in the Security account (member accounts IAM Users could be exceptionally created for very specific tools that still don\u2019t support IAM roles for cross-account auth). All access to resources within the Client organization will be assigned via policy documents attached to IAM roles or groups. All IAM roles and groups will have the least privileges required to properly work. IAM AWS and Customer managed policies will be defined, inline policies will be avoided whenever possible. All user management will be maintained as code and will reside in the DevOps repository. All users will have MFA enabled whenever possible (VPN and AWS Web Console). Root user credentials will be rotated and secured. MFA for root will be enabled. IAM Access Keys for root will be disabled. IAM root access will be monitored via CloudWatch Alerts. Why multi account IAM strategy? Creating a security relationship between accounts makes it even easier for companies to assess the security of AWS-based deployments, centralize security monitoring and management, manage identity and access, and provide audit and compliance monitoring services Figure: AWS Organization Security account structure for managing multiple accounts (just as reference). (Source: Yoriyasu Yano, \"How to Build an End to End Production-Grade Architecture on AWS Part 2\" , Gruntwork.io Blog, accessed November 18th 2020).","title":"Summary"},{"location":"how-it-works/features/identities/identities/#iam-groups-roles-definition","text":"AWS Org member accounts IAM groups : Account Name AWS Org Member Accounts IAM Groups Admin Auditor DevOps DeployMaster project-management x project-security x x x x AWS Org member accounts IAM roles : Account Name AWS Org Member Accounts IAM Roles Admin Auditor DevOps DeployMaster OrganizationAccountAccessRole project-management x project-security x x x x project-shared x x x x x project-legacy x x x project-apps-devstg x x x x x project-apps-prd x x x x x","title":"IAM Groups &amp; Roles definition"},{"location":"how-it-works/features/identities/roles/","text":"IAM roles \u00b6 What are AWS IAM Roles? For the Leverage AWS Reference Architecture we heavily depend on AWS IAM roles , which is a standalone IAM entity that: Allows you to attach IAM policies to it, Specify which other IAM entities to trust, and then Those other IAM entities can assume the IAM role to be temporarily get access to the permissions in those IAM policies. The two most common use cases for IAM roles are Service roles: Whereas an IAM user allows a human being to access AWS resources, one of the most common use cases for an IAM role is to allow a service\u2014e.g., one of your applications, a CI server, or an AWS service\u2014to access specific resources in your AWS account. For example, you could create an IAM role that gives access to a specific S3 bucket and allow that role to be assumed by one of your EC2 instances or Lambda functions. The code running on that AWS compute service will then be able to access that S3 bucket (or any other service you granted through this IAM roles) without you having to manually copy AWS credentials (i.e., access keys) onto that instance. Cross account access: Allow to grant an IAM entity in one AWS account access to specific resources in another AWS account. For example, if you have an IAM user in AWS account A, then by default, that IAM user cannot access anything in AWS account B. However, you could create an IAM role in account B that gives access to a specific S3 bucket (or any necessary AWS services) in AWS account B and allow that role to be assumed by an IAM user in account A. That IAM user will then be able to access the contents of the S3 bucket by assuming the IAM role in account B. This ability to assume IAM roles across different AWS accounts is the critical glue that truly makes a multi AWS account structure possible. How IAM roles work? \u00b6 Figure: Example of AWS cross-account AWS access. (Source: Kai Zhao, \"AWS CloudTrail Now Tracks Cross-Account Activity to Its Origin\" , AWS Security Blog, accessed November 17th 2020). Main IAM Roles related entities IAM policies \u00b6 Just as you can attach IAM policies to an IAM user and IAM group, you can attach IAM policies to an IAM role. Trust policy \u00b6 You must define a trust policy for each IAM role, which is a JSON document (very similar to an IAM policy) that specifies who can assume this IAM role. For example, we present below a trust policy that allows this IAM role to be assumed by an IAM user named John in AWS account 111111111111: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : \"sts:AssumeRole\" , \"Principal\" : { \"AWS\" : \"arn:aws:iam::111111111111:user/John\" } } ] } Note that a trust policy alone does NOT automatically give John permissions to assume this IAM role. Cross-account access always requires permissions in both accounts (2 way authorization). So, if John is in AWS account 111111111111 and you want him to have access to an IAM role called DevOps in account B ID 222222222222, then you need to configure permissions in both accounts: 1. In account 222222222222, the DevOps IAM role must have a trust policy that gives sts:AssumeRole permissions to AWS account A ID 111111111111 (as shown above). 2. 2 nd , in account A 111111111111, you also need to attach an IAM policy to John\u2019s IAM user that allows him to assume the DevOps IAM role, which might look like this: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : \"sts:AssumeRole\" , \"Resource\" : \"arn:aws:iam::222222222222:role/DevOps\" } ] } Assuming an AWS IAM role \u00b6 How does it work? IAM roles do not have a user name, password, or permanent access keys. To use an IAM role, you must assume it by making an AssumeRole API call (v\u00eda SDKs API , CLI or Web Console , which will return temporary access keys you can use in follow-up API calls to authenticate as the IAM role. The temporary access keys will be valid for 1-12 hours (depending on your current validity expiration config), after which you must call AssumeRole again to fetch new temporary keys. Note that to make the AssumeRole API call, you must first authenticate to AWS using some other mechanism. For example, for an IAM user to assume an IAM role, the workflow looks like this: Figure: Assuming an AWS IAM role. (Source: Gruntwork.io, \"How to configure a production-grade AWS account structure using Gruntwork AWS Landing Zone\" , Gruntwork.io Production deployment guides, accessed November 17th 2020). Basic AssumeRole workflow Authenticate using the IAM user\u2019s permanent AWS access keys Make the AssumeRole API call AWS sends back temporary access keys You authenticate using those temporary access keys Now all of your subsequent API calls will be on behalf of the assumed IAM role, with access to whatever permissions are attached to that role IAM roles and AWS services Most AWS services have native support built-in for assuming IAM roles. For example: You can associate an IAM role directly with an EC2 instance (instance profile), and that instance will automatically assume the IAM role every few hours, making the temporary credentials available in EC2 instance metadata. Just about every AWS CLI and SDK tool knows how to read and periodically update temporary credentials from EC2 instance metadata, so in practice, as soon as you attach an IAM role to an EC2 instance, any code running on that EC2 instance can automatically make API calls on behalf of that IAM role, with whatever permissions are attached to that role. This allows you to give code on your EC2 instances IAM permissions without having to manually figure out how to copy credentials (access keys) onto that instance. The same strategy works with many other AWS services: e.g., you use IAM roles as a secure way to give your Lambda functions, ECS services, Step Functions, and many other AWS services permissions to access specific resources in your AWS account. Read more \u00b6 AWS reference links Consider the following AWS official links as reference: AWS Identities | Roles terms and concepts AWS Identities | Common scenarios","title":"IAM Roles"},{"location":"how-it-works/features/identities/roles/#iam-roles","text":"What are AWS IAM Roles? For the Leverage AWS Reference Architecture we heavily depend on AWS IAM roles , which is a standalone IAM entity that: Allows you to attach IAM policies to it, Specify which other IAM entities to trust, and then Those other IAM entities can assume the IAM role to be temporarily get access to the permissions in those IAM policies. The two most common use cases for IAM roles are Service roles: Whereas an IAM user allows a human being to access AWS resources, one of the most common use cases for an IAM role is to allow a service\u2014e.g., one of your applications, a CI server, or an AWS service\u2014to access specific resources in your AWS account. For example, you could create an IAM role that gives access to a specific S3 bucket and allow that role to be assumed by one of your EC2 instances or Lambda functions. The code running on that AWS compute service will then be able to access that S3 bucket (or any other service you granted through this IAM roles) without you having to manually copy AWS credentials (i.e., access keys) onto that instance. Cross account access: Allow to grant an IAM entity in one AWS account access to specific resources in another AWS account. For example, if you have an IAM user in AWS account A, then by default, that IAM user cannot access anything in AWS account B. However, you could create an IAM role in account B that gives access to a specific S3 bucket (or any necessary AWS services) in AWS account B and allow that role to be assumed by an IAM user in account A. That IAM user will then be able to access the contents of the S3 bucket by assuming the IAM role in account B. This ability to assume IAM roles across different AWS accounts is the critical glue that truly makes a multi AWS account structure possible.","title":"IAM roles"},{"location":"how-it-works/features/identities/roles/#how-iam-roles-work","text":"Figure: Example of AWS cross-account AWS access. (Source: Kai Zhao, \"AWS CloudTrail Now Tracks Cross-Account Activity to Its Origin\" , AWS Security Blog, accessed November 17th 2020). Main IAM Roles related entities","title":"How IAM roles work?"},{"location":"how-it-works/features/identities/roles/#iam-policies","text":"Just as you can attach IAM policies to an IAM user and IAM group, you can attach IAM policies to an IAM role.","title":"IAM policies"},{"location":"how-it-works/features/identities/roles/#trust-policy","text":"You must define a trust policy for each IAM role, which is a JSON document (very similar to an IAM policy) that specifies who can assume this IAM role. For example, we present below a trust policy that allows this IAM role to be assumed by an IAM user named John in AWS account 111111111111: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : \"sts:AssumeRole\" , \"Principal\" : { \"AWS\" : \"arn:aws:iam::111111111111:user/John\" } } ] } Note that a trust policy alone does NOT automatically give John permissions to assume this IAM role. Cross-account access always requires permissions in both accounts (2 way authorization). So, if John is in AWS account 111111111111 and you want him to have access to an IAM role called DevOps in account B ID 222222222222, then you need to configure permissions in both accounts: 1. In account 222222222222, the DevOps IAM role must have a trust policy that gives sts:AssumeRole permissions to AWS account A ID 111111111111 (as shown above). 2. 2 nd , in account A 111111111111, you also need to attach an IAM policy to John\u2019s IAM user that allows him to assume the DevOps IAM role, which might look like this: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : \"sts:AssumeRole\" , \"Resource\" : \"arn:aws:iam::222222222222:role/DevOps\" } ] }","title":"Trust policy"},{"location":"how-it-works/features/identities/roles/#assuming-an-aws-iam-role","text":"How does it work? IAM roles do not have a user name, password, or permanent access keys. To use an IAM role, you must assume it by making an AssumeRole API call (v\u00eda SDKs API , CLI or Web Console , which will return temporary access keys you can use in follow-up API calls to authenticate as the IAM role. The temporary access keys will be valid for 1-12 hours (depending on your current validity expiration config), after which you must call AssumeRole again to fetch new temporary keys. Note that to make the AssumeRole API call, you must first authenticate to AWS using some other mechanism. For example, for an IAM user to assume an IAM role, the workflow looks like this: Figure: Assuming an AWS IAM role. (Source: Gruntwork.io, \"How to configure a production-grade AWS account structure using Gruntwork AWS Landing Zone\" , Gruntwork.io Production deployment guides, accessed November 17th 2020). Basic AssumeRole workflow Authenticate using the IAM user\u2019s permanent AWS access keys Make the AssumeRole API call AWS sends back temporary access keys You authenticate using those temporary access keys Now all of your subsequent API calls will be on behalf of the assumed IAM role, with access to whatever permissions are attached to that role IAM roles and AWS services Most AWS services have native support built-in for assuming IAM roles. For example: You can associate an IAM role directly with an EC2 instance (instance profile), and that instance will automatically assume the IAM role every few hours, making the temporary credentials available in EC2 instance metadata. Just about every AWS CLI and SDK tool knows how to read and periodically update temporary credentials from EC2 instance metadata, so in practice, as soon as you attach an IAM role to an EC2 instance, any code running on that EC2 instance can automatically make API calls on behalf of that IAM role, with whatever permissions are attached to that role. This allows you to give code on your EC2 instances IAM permissions without having to manually figure out how to copy credentials (access keys) onto that instance. The same strategy works with many other AWS services: e.g., you use IAM roles as a secure way to give your Lambda functions, ECS services, Step Functions, and many other AWS services permissions to access specific resources in your AWS account.","title":"Assuming an AWS IAM role"},{"location":"how-it-works/features/identities/roles/#read-more","text":"AWS reference links Consider the following AWS official links as reference: AWS Identities | Roles terms and concepts AWS Identities | Common scenarios","title":"Read more"},{"location":"how-it-works/features/monitoring/apm/","text":"Application Performance Monitoring (APM) and Business Performance \u00b6 Custom Prometheus BlackBox Exporter + Grafana & Elastic Application performance monitoring (APM) delivers real-time and trending data about your web application's performance and the level of satisfaction that your end users experience. With end to end transaction tracing and a variety of color-coded charts and reports, APM visualizes your data, down to the deepest code levels. Your DevOps teams don't need to guess whether a performance blocker comes from the app itself, CPU availability, database loads, or something else entirely unexpected. With APM, you can quickly identify potential problems before they affect your end users. APM's user interface provides both current and historical information about memory usage, CPU utilization, database query performance, web browser rendering performance, app availability and error analysis, external services, and other useful metrics. SLIs / KPIs \u00b6 Service Level Indicators (SLIs) latency throughput availability error rate KPI for business performance General DOM readiness Page render Apdex Mobile crash rate Web Session count Session duration Page views Error % Mobile App launches User counts Load time Crash rates Crash locations Error rates API errors KPI for app and infrastructure teams App/Infra Availability Throughput App/Api/Db Response time Memory footprint CPU workload DevOps Builds Commits Deploys Errors Support incidents MTTR Read More \u00b6 NewRelic | Optimize customer experience (KPIs)","title":"APM"},{"location":"how-it-works/features/monitoring/apm/#application-performance-monitoring-apm-and-business-performance","text":"Custom Prometheus BlackBox Exporter + Grafana & Elastic Application performance monitoring (APM) delivers real-time and trending data about your web application's performance and the level of satisfaction that your end users experience. With end to end transaction tracing and a variety of color-coded charts and reports, APM visualizes your data, down to the deepest code levels. Your DevOps teams don't need to guess whether a performance blocker comes from the app itself, CPU availability, database loads, or something else entirely unexpected. With APM, you can quickly identify potential problems before they affect your end users. APM's user interface provides both current and historical information about memory usage, CPU utilization, database query performance, web browser rendering performance, app availability and error analysis, external services, and other useful metrics.","title":"Application Performance Monitoring (APM) and Business Performance"},{"location":"how-it-works/features/monitoring/apm/#slis-kpis","text":"Service Level Indicators (SLIs) latency throughput availability error rate KPI for business performance General DOM readiness Page render Apdex Mobile crash rate Web Session count Session duration Page views Error % Mobile App launches User counts Load time Crash rates Crash locations Error rates API errors KPI for app and infrastructure teams App/Infra Availability Throughput App/Api/Db Response time Memory footprint CPU workload DevOps Builds Commits Deploys Errors Support incidents MTTR","title":"SLIs / KPIs"},{"location":"how-it-works/features/monitoring/apm/#read-more","text":"NewRelic | Optimize customer experience (KPIs)","title":"Read More"},{"location":"how-it-works/features/monitoring/logs/","text":"Logs \u00b6 Overview \u00b6 Centralized Logs Solution For this purpose we propose the usage of Elasticsearch + Kibana for database and visualization respectively. By deploying the Fluentd daemonset on the Kubernetes clusters we can send all logs from running pods to Elasticsearch, and with \u2018beat\u2019 we can send specific logs for resources outside of Kubernetes. There will be many components across the environment generating different types of logs: ALB access logs, s3 access logs, cloudfront access logs, application request logs, application error logs. Access logs on AWS based resources can be stored in a centralized bucket for that purpose, on the security account and given the need these can be streamed to Elasticsearch as well if needed. Figure: Monitoring metrics and log architecture diagram (just as reference). (Source: Binbash Leverage, \"AWS Well Architected Reliability Report example\" , Binbash Leverage Doc, accessed November 18th 2020). Alerting based on Logs Certain features that were only available under licence were recently made available by Elastic, and included in the open source project of Elasticsearch. Elastalert allow us to generate alerts based on certain log entries or even after counting a certain amount of a type of entry, providing great flexibility. -- Alternatives Comparison Table \u00b6 Leverage Confluence Documentation You'll find here a detailed comparison table between EC2 Self-hosted and AWS ElasticSearch Elastic-Kibana Stack.","title":"Logs"},{"location":"how-it-works/features/monitoring/logs/#logs","text":"","title":"Logs"},{"location":"how-it-works/features/monitoring/logs/#overview","text":"Centralized Logs Solution For this purpose we propose the usage of Elasticsearch + Kibana for database and visualization respectively. By deploying the Fluentd daemonset on the Kubernetes clusters we can send all logs from running pods to Elasticsearch, and with \u2018beat\u2019 we can send specific logs for resources outside of Kubernetes. There will be many components across the environment generating different types of logs: ALB access logs, s3 access logs, cloudfront access logs, application request logs, application error logs. Access logs on AWS based resources can be stored in a centralized bucket for that purpose, on the security account and given the need these can be streamed to Elasticsearch as well if needed. Figure: Monitoring metrics and log architecture diagram (just as reference). (Source: Binbash Leverage, \"AWS Well Architected Reliability Report example\" , Binbash Leverage Doc, accessed November 18th 2020). Alerting based on Logs Certain features that were only available under licence were recently made available by Elastic, and included in the open source project of Elasticsearch. Elastalert allow us to generate alerts based on certain log entries or even after counting a certain amount of a type of entry, providing great flexibility. --","title":"Overview"},{"location":"how-it-works/features/monitoring/logs/#alternatives-comparison-table","text":"Leverage Confluence Documentation You'll find here a detailed comparison table between EC2 Self-hosted and AWS ElasticSearch Elastic-Kibana Stack.","title":"Alternatives Comparison Table"},{"location":"how-it-works/features/monitoring/metrics/","text":"Metrics \u00b6 There are metrics that are going to be of interest both in the infrastructure itself (CPU, Memory, disk) and also on application level (amount of non 200 responses, latency, % of errors) and we will have two key sources for this: Prometheus and AWS CloudWatch metrics . Metric collectors CloudWatch metrics: Is where amazon stores a great number of default metrics for each of its services. Useful data here can be interpreted and alerts can be generated with Cloudwatch alerts and can also be used as a source for Grafana. Although this is a very good offering, we have found it to be incomplete and highly bound to AWS services but not integrated enough with the rest of the ecosystem. Prometheus: This is an open source tool (by Soundcloud) that is essentially a time-series database. It stores metrics, and it has the advantage of being highly integrated with all Kubernetes things. In fact, Kubernetes is already publishing various metrics in Prometheus format \u201cout of the box\u201d. It\u2019s alerting capabilities are also remarkable, and it can all be kept as code in a repository. It has a big community behind it, and it\u2019s not far fetched at this point to include a library in your own application that provides you with the ability to create an endpoint that publishes certain metrics about your own application, that we can graph or alert based on them. Figure: Monitoring metrics and log architecture diagram (just as reference). (Source: Binbash Leverage, \"AWS Well Architected Reliability Report example\" , Binbash Leverage Doc, accessed November 18th 2020). Graphing metrics Grafana is the standard open source visualization tool which can be used on top of a variety of different data stores. It can use prometheus as a source, and there are many open source dashboards and plugins available that provide great visualization of how things are running, and we can also build our own if necessary. If something is left out of prometheus and already available in Cloudwatch metrics we can easily integrate it as a source for Grafana as well, and build dashboards that integrate these metrics and even do some intelligence on them coming from multiple origins. Figure: Grafana K8s cluster metrics monitoring dashboard reference screenshot. (Source: DevOpsProdigy, \"Grafana DevOpsProdigy KubeGraf Plugin\" , Grafana plugins, accessed November 18th 2020). Figure: Grafana K8s cluster metrics monitoring dashboard reference screenshot. (Source: DevOpsProdigy, \"Grafana DevOpsProdigy KubeGraf Plugin\" , Grafana plugins, accessed November 18th 2020). Alerting based on metrics Although Grafana already has alerting capabilities built in, we rather (most of the times) have Prometheus alerting engine configured, because we can have really customize and specify alerts. We can have them as code in their extremely readable syntax. Example: Figure: Prometheus Alert Manager `CriticalRamUsage` alert screenshot (just as reference). (Source: Binbash Leverage).","title":"Metrics"},{"location":"how-it-works/features/monitoring/metrics/#metrics","text":"There are metrics that are going to be of interest both in the infrastructure itself (CPU, Memory, disk) and also on application level (amount of non 200 responses, latency, % of errors) and we will have two key sources for this: Prometheus and AWS CloudWatch metrics . Metric collectors CloudWatch metrics: Is where amazon stores a great number of default metrics for each of its services. Useful data here can be interpreted and alerts can be generated with Cloudwatch alerts and can also be used as a source for Grafana. Although this is a very good offering, we have found it to be incomplete and highly bound to AWS services but not integrated enough with the rest of the ecosystem. Prometheus: This is an open source tool (by Soundcloud) that is essentially a time-series database. It stores metrics, and it has the advantage of being highly integrated with all Kubernetes things. In fact, Kubernetes is already publishing various metrics in Prometheus format \u201cout of the box\u201d. It\u2019s alerting capabilities are also remarkable, and it can all be kept as code in a repository. It has a big community behind it, and it\u2019s not far fetched at this point to include a library in your own application that provides you with the ability to create an endpoint that publishes certain metrics about your own application, that we can graph or alert based on them. Figure: Monitoring metrics and log architecture diagram (just as reference). (Source: Binbash Leverage, \"AWS Well Architected Reliability Report example\" , Binbash Leverage Doc, accessed November 18th 2020). Graphing metrics Grafana is the standard open source visualization tool which can be used on top of a variety of different data stores. It can use prometheus as a source, and there are many open source dashboards and plugins available that provide great visualization of how things are running, and we can also build our own if necessary. If something is left out of prometheus and already available in Cloudwatch metrics we can easily integrate it as a source for Grafana as well, and build dashboards that integrate these metrics and even do some intelligence on them coming from multiple origins. Figure: Grafana K8s cluster metrics monitoring dashboard reference screenshot. (Source: DevOpsProdigy, \"Grafana DevOpsProdigy KubeGraf Plugin\" , Grafana plugins, accessed November 18th 2020). Figure: Grafana K8s cluster metrics monitoring dashboard reference screenshot. (Source: DevOpsProdigy, \"Grafana DevOpsProdigy KubeGraf Plugin\" , Grafana plugins, accessed November 18th 2020). Alerting based on metrics Although Grafana already has alerting capabilities built in, we rather (most of the times) have Prometheus alerting engine configured, because we can have really customize and specify alerts. We can have them as code in their extremely readable syntax. Example: Figure: Prometheus Alert Manager `CriticalRamUsage` alert screenshot (just as reference). (Source: Binbash Leverage).","title":"Metrics"},{"location":"how-it-works/features/monitoring/monitoring/","text":"SRE & Monitoring: Metrics, Logs & Tracing \u00b6 Overview \u00b6 There are two key approaches that we will cover with the proposed tools, Logs based monitoring and Metrics based monitoring. Monitoring tools Metrics: Prometheus - node-exporter - blackbox-exporter - alert-manager Metrics Dashboard: Grafana Data Sources Prometheus CloudWatch Plugins piechart-panel devopsprodigy-kubegraf-app Centralized Logs: Elasticsearch-Fluent-Kibana (EFK) Query Logs Dashboards Alerts based on logs Distributed Tracing: Jaeger + Opensensus","title":"Monitoring"},{"location":"how-it-works/features/monitoring/monitoring/#sre-monitoring-metrics-logs-tracing","text":"","title":"SRE &amp; Monitoring: Metrics, Logs &amp; Tracing"},{"location":"how-it-works/features/monitoring/monitoring/#overview","text":"There are two key approaches that we will cover with the proposed tools, Logs based monitoring and Metrics based monitoring. Monitoring tools Metrics: Prometheus - node-exporter - blackbox-exporter - alert-manager Metrics Dashboard: Grafana Data Sources Prometheus CloudWatch Plugins piechart-panel devopsprodigy-kubegraf-app Centralized Logs: Elasticsearch-Fluent-Kibana (EFK) Query Logs Dashboards Alerts based on logs Distributed Tracing: Jaeger + Opensensus","title":"Overview"},{"location":"how-it-works/features/monitoring/notification_escalation/","text":"Notification & Escalation Procedure \u00b6 Overview \u00b6 Urgency Service Notification Setting Use When Response High 24/7 High-priority PagerDuty Alert 24/7/365 Issue is in Production Or affects the applications/services and in turn affects the normal operation of the clinics Or prevents clinic patients to interact with the applications/services Requires immediate human action Escalate as needed The engineer should be woken up High during support hours High-priority Slack Notifications during support hours Issue impacts development team productivity Issue impacts the normal business operation Requires immediate human action ONLY during business hours Low Low Priority Slack Notification Any issue, on any environment, that occurs during working hours Requires human action at some point Do not escalate An engineer should not be woken up Service Notification Settings \u00b6 Service Notification Setting Description High-priority PagerDuty Alert 24/7/365 Notify on-call engineers --- At first, notify via SMS/Push --- Notify via Phone Call if after 10 minutes the previous has not acknowledged Notify person X (this is a person who needs to be aware of any of these issues always) Notify to Slack => engineering-urgent-alerts channel High-priority Slack Notifications during support hours Notify to Slack => engineering-alerts channel Low Priority Slack Notification Notify to Slack => engineering-alerts channel Alert Types \u00b6 UpTimeRobot (black box) https://uptimerobot.com/ Sites or APIs are down Prometheus Alert Manager (black box, metrics-based) http://prometheus.aws.domain.com/ Clusters issues (masters/nodes high resources usage) Instance issues (Pritunl VPN, Jenkins, Spinnaker, Grafana, Kibana, etc) Alerts from Prometheus Blackbox Exporter Kibana ElastAlert (black box, logs-based) Intended for applications/services logs Applications/services issues (frontends, backend services) Cluster components issues (nginx-ingress, cert-manager, linkerd, etc) PagerDuty https://domain.pagerduty.com/ Incident management Implementation Reference Example \u00b6 Slack All alerts are sent to #engineering-urgent-alerts channel. Members that are online can have visibility from there. AlertManager takes care of sending such alerts according to the rules defined here: TODO Note: there is a channel named engineering-alerts but is used for Github notifications. It didn\u2019t make sense to mix real alerts with that, that is why a new engineering-urgent-alerts channel was created. As a recommendation, Github notifications should be sent to a channel named like #engineering-notifications and leave engineering-alerts for real alerts. PagerDuty AlertManager only sends to PagerDuty alerts that are labeled as severity: critical . PagerDuty is configured to turn these into incidents according to the settings defined here for the Prometheus Critical Alerts service . The aforementioned service uses HiPriorityAllYearRound escalation policy to define who gets notified and how. Note: currently only the TechOwnership role gets notified as we don\u2019t have agreements or rules about on-call support but this can be easily changed in the future to accommodate business decisions. UpTimeRobot We are doing basic http monitoring on the following sites: * www.domain_1.com * www.domain_2.com * www.domain_3.com Note: a personal account has been set up for this. As a recommendation, an new account should be created using an email account that belongs to your project.","title":"Notifications"},{"location":"how-it-works/features/monitoring/notification_escalation/#notification-escalation-procedure","text":"","title":"Notification &amp; Escalation Procedure"},{"location":"how-it-works/features/monitoring/notification_escalation/#overview","text":"Urgency Service Notification Setting Use When Response High 24/7 High-priority PagerDuty Alert 24/7/365 Issue is in Production Or affects the applications/services and in turn affects the normal operation of the clinics Or prevents clinic patients to interact with the applications/services Requires immediate human action Escalate as needed The engineer should be woken up High during support hours High-priority Slack Notifications during support hours Issue impacts development team productivity Issue impacts the normal business operation Requires immediate human action ONLY during business hours Low Low Priority Slack Notification Any issue, on any environment, that occurs during working hours Requires human action at some point Do not escalate An engineer should not be woken up","title":"Overview"},{"location":"how-it-works/features/monitoring/notification_escalation/#service-notification-settings","text":"Service Notification Setting Description High-priority PagerDuty Alert 24/7/365 Notify on-call engineers --- At first, notify via SMS/Push --- Notify via Phone Call if after 10 minutes the previous has not acknowledged Notify person X (this is a person who needs to be aware of any of these issues always) Notify to Slack => engineering-urgent-alerts channel High-priority Slack Notifications during support hours Notify to Slack => engineering-alerts channel Low Priority Slack Notification Notify to Slack => engineering-alerts channel","title":"Service Notification Settings"},{"location":"how-it-works/features/monitoring/notification_escalation/#alert-types","text":"UpTimeRobot (black box) https://uptimerobot.com/ Sites or APIs are down Prometheus Alert Manager (black box, metrics-based) http://prometheus.aws.domain.com/ Clusters issues (masters/nodes high resources usage) Instance issues (Pritunl VPN, Jenkins, Spinnaker, Grafana, Kibana, etc) Alerts from Prometheus Blackbox Exporter Kibana ElastAlert (black box, logs-based) Intended for applications/services logs Applications/services issues (frontends, backend services) Cluster components issues (nginx-ingress, cert-manager, linkerd, etc) PagerDuty https://domain.pagerduty.com/ Incident management","title":"Alert Types"},{"location":"how-it-works/features/monitoring/notification_escalation/#implementation-reference-example","text":"Slack All alerts are sent to #engineering-urgent-alerts channel. Members that are online can have visibility from there. AlertManager takes care of sending such alerts according to the rules defined here: TODO Note: there is a channel named engineering-alerts but is used for Github notifications. It didn\u2019t make sense to mix real alerts with that, that is why a new engineering-urgent-alerts channel was created. As a recommendation, Github notifications should be sent to a channel named like #engineering-notifications and leave engineering-alerts for real alerts. PagerDuty AlertManager only sends to PagerDuty alerts that are labeled as severity: critical . PagerDuty is configured to turn these into incidents according to the settings defined here for the Prometheus Critical Alerts service . The aforementioned service uses HiPriorityAllYearRound escalation policy to define who gets notified and how. Note: currently only the TechOwnership role gets notified as we don\u2019t have agreements or rules about on-call support but this can be easily changed in the future to accommodate business decisions. UpTimeRobot We are doing basic http monitoring on the following sites: * www.domain_1.com * www.domain_2.com * www.domain_3.com Note: a personal account has been set up for this. As a recommendation, an new account should be created using an email account that belongs to your project.","title":"Implementation Reference Example"},{"location":"how-it-works/features/monitoring/tracing/","text":"Distributed Tracing \u00b6 Solution Design Distributed tracing, also called distributed request tracing, is a method used to profile and monitor applications, especially those built using a microservices architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance. Figure: Figure: Distributed tracing architecture diagram (just as reference). (Source: Binbash Leverage, \"AWS Well Architected Reliability Report example\" , Binbash Leverage Doc, accessed November 18th 2020). Read more \u00b6 Related resources Jaeger Opensensus","title":"Tracing"},{"location":"how-it-works/features/monitoring/tracing/#distributed-tracing","text":"Solution Design Distributed tracing, also called distributed request tracing, is a method used to profile and monitor applications, especially those built using a microservices architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance. Figure: Figure: Distributed tracing architecture diagram (just as reference). (Source: Binbash Leverage, \"AWS Well Architected Reliability Report example\" , Binbash Leverage Doc, accessed November 18th 2020).","title":"Distributed Tracing"},{"location":"how-it-works/features/monitoring/tracing/#read-more","text":"Related resources Jaeger Opensensus","title":"Read more"},{"location":"how-it-works/features/network/dns/","text":"Route53 DNS hosted zones \u00b6 Route53 Considerations Route53 private hosted zone will have associations with VPCs on different AWS organization accounts Route53 should ideally be hosted in the Shared account, although sometimes Route53 is already deployed in a Legacy account where it can be imported and fully supported as code. Route53 zero downtime migration (active-active hosted zones) is completely possible and achievable with Leverage terraform code Figure: AWS Organization shared account Route53 DNS diagram. (Source: Cristian Southall, \"Using CloudFormation Custom Resources to Configure Route53 Aliases\" , Abstractable.io Blog post, accessed November 18th 2020).","title":"DNS"},{"location":"how-it-works/features/network/dns/#route53-dns-hosted-zones","text":"Route53 Considerations Route53 private hosted zone will have associations with VPCs on different AWS organization accounts Route53 should ideally be hosted in the Shared account, although sometimes Route53 is already deployed in a Legacy account where it can be imported and fully supported as code. Route53 zero downtime migration (active-active hosted zones) is completely possible and achievable with Leverage terraform code Figure: AWS Organization shared account Route53 DNS diagram. (Source: Cristian Southall, \"Using CloudFormation Custom Resources to Configure Route53 Aliases\" , Abstractable.io Blog post, accessed November 18th 2020).","title":"Route53 DNS hosted zones"},{"location":"how-it-works/features/network/tgw-topology/","text":"Network Topology with AWS Transit Gateway \u00b6 Transit Gateway \u00b6 Dedicated TGW Network Account Architecture \u00b6 Figure: Multi-account dedicated network transit gateway architecture diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture dedicated network account TGW implementation\", Binbash Leverage Doc, accessed August 4th 2021).","title":"TGW Topology"},{"location":"how-it-works/features/network/tgw-topology/#network-topology-with-aws-transit-gateway","text":"","title":"Network Topology with AWS Transit Gateway"},{"location":"how-it-works/features/network/tgw-topology/#transit-gateway","text":"","title":"Transit Gateway"},{"location":"how-it-works/features/network/tgw-topology/#dedicated-tgw-network-account-architecture","text":"Figure: Multi-account dedicated network transit gateway architecture diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture dedicated network account TGW implementation\", Binbash Leverage Doc, accessed August 4th 2021).","title":"Dedicated TGW Network Account Architecture"},{"location":"how-it-works/features/network/vpc-addressing/","text":"Network Layer \u00b6 In this section we detail all the network design related specifications VPCs CIDR blocks VPC Gateways: Internet, NAT, VPN. VPC Peerings VPC DNS Private Hosted Zones Associations. Network ACLS (NACLs) VPCs IP Addressing Plan (CIDR blocks sizing) \u00b6 Introduction VPCs can vary in size from 16 addresses (/28 netmask) to 65,536 addresses (/16 netmask). In order to size a VPC correctly, it is important to understand the number, types, and sizes of workloads expected to run in it, as well as workload elasticity and load balancing requirements. Keep in mind that there is no charge for using Amazon VPC (aside from EC2 charges), therefore cost should not be a factor when determining the appropriate size for your VPC, so make sure you size your VPC for growth. Moving workloads or AWS resources between networks is not a trivial task, so be generous in your IP address estimates to give yourself plenty of room to grow, deploy new workloads, or change your VPC design configuration from one to another. The majority of AWS customers use VPCs with a /16 netmask and subnets with /24 netmasks. The primary reason AWS customers select smaller VPC and subnet sizes is to avoid overlapping network addresses with existing networks. So having AWS single VPC Design we've chosen a Medium/Small VPC/Subnet addressing plan which would probably fit a broad range variety of use cases Networking - IP Addressing \u00b6 Starting CIDR Segment (AWS Org) AWS Org IP Addressing calculation is presented below based on segment 172.16.0.0.0/12 We started from 172.16.0.0.0/12 and subnetted to /20 Resulting in Total Subnets: 256 2 x AWS Account with Hosts/SubNet: 4094 1ry VPC + 2ry VPC 1ry VPC DR + 2ry VPC DR Individual CIDR Segments (VPCs) Then each of these are /20 to /24 Considering the whole Starting CIDR Segment (AWS Org) before declared, we'll start at 172.18.0.0/20 shared 1ry VPC CIDR: 172.18.0.0/24 2ry VPC CIDR: 172.18.16.0/24 1ry VPC DR CIDR: 172.18.32.0/24 2ry VPC DR CIDR: 172.18.48.0/24 apps-devstg 1ry VPC CIDR: 172.18.64.0/24 2ry VPC CIDR: 172.18.80.0/24 1ry VPC DR CIDR: 172.18.96.0/24 2ry VPC DR CIDR: 172.18.112.0/24 apps-prd 1ry VPC CIDR: 172.18.128.0/24 2ry VPC CIDR: 172.18.144.0/24 1ry VPC DR CIDR: 172.18.160.0/24 2ry VPC DR CIDR: 172.18.176.0/24 Resulting in Subnets: 16 x VPC VPC Subnets with Hosts/Net: 256. Eg: apps-devstg account \u2192 us-east-1 w/ 3 AZs \u2192 3 x Private Subnets /az + 3 x Public Subnets /az 1ry VPC CIDR: 172.18.64.0/24 Subnets: Private 172.18.64.0/24, 172.18.66.0/24 and 172.18.68.0/24 Public 172.18.65.0/24, 172.18.67.0/24 and 172.18.69.0/24 Planned VPCs \u00b6 Having defined the initial VPC that will be created in the different accounts that were defined, we are going to create subnets in each of these VPCs defining Private and Public subnets split among different availability zones: Subnet address Netmask Range of addresses Hosts Assignment 172.18.0.0/20 255.255.240.0 172.18.0.0 - 172.18.15.255 4094 1ry VPC: shared 172.18.16.0/20 255.255.240.0 172.18.16.0 - 172.18.31.255 4094 2ry VPC: shared 172.18.32.0/20 255.255.240.0 172.18.32.0 - 172.18.47.255 4094 1ry VPC DR: shared 172.18.48.0/20 255.255.240.0 172.18.48.0 - 172.18.63.255 4094 2ry VPC DR: shared 172.18.64.0/20 255.255.240.0 172.18.64.0 - 172.18.79.255 4094 1ry VPC: apps-devstg 172.18.80.0/20 255.255.240.0 172.18.80.0 - 172.18.95.255 4094 2ry VPC: apps-devstg 172.18.96.0/20 255.255.240.0 172.18.96.0 - 172.18.111.255 4094 1ry VPC DR: apps-devstg 172.18.112.0/20 255.255.240.0 172.18.112.0 - 172.18.127.255 4094 2ry VPC DR: apps-devstg 172.18.128.0/20 255.255.240.0 172.18.128.0 - 172.18.143.255 4094 1ry VPC: apps-prd 172.18.144.0/20 255.255.240.0 172.18.144.0 - 172.18.159.255 4094 2ry VPC: apps-prd 172.18.160.0/20 255.255.240.0 172.18.160.0 - 172.18.175.255 4094 1ry VPC DR: apps-prd 172.18.176.0/20 255.255.240.0 172.18.176.0 - 172.18.191.255 4094 2ry VPC DR: apps-prd Considerations \u00b6 Design considerations AWS EKS: Docker runs in the 172.17.0.0/16 CIDR range in Amazon EKS clusters. We recommend that your cluster's VPC subnets do not overlap this range. Otherwise, you will receive the following error: Error: : error upgrading connection: error dialing backend: dial tcp 172.17.nn.nn:10250: getsockopt: no route to host Read more: AWS EKS network requirements Reserved IP Addresses The first four IP addresses and the last IP address in each subnet CIDR block are not available for you to use, and cannot be assigned to an instance. For example, in a subnet with CIDR block 10.0.0.0/24, the following five IP addresses are reserved. For more AWS VPC Subnets IP addressing","title":"VPC Adressing"},{"location":"how-it-works/features/network/vpc-addressing/#network-layer","text":"In this section we detail all the network design related specifications VPCs CIDR blocks VPC Gateways: Internet, NAT, VPN. VPC Peerings VPC DNS Private Hosted Zones Associations. Network ACLS (NACLs)","title":"Network Layer"},{"location":"how-it-works/features/network/vpc-addressing/#vpcs-ip-addressing-plan-cidr-blocks-sizing","text":"Introduction VPCs can vary in size from 16 addresses (/28 netmask) to 65,536 addresses (/16 netmask). In order to size a VPC correctly, it is important to understand the number, types, and sizes of workloads expected to run in it, as well as workload elasticity and load balancing requirements. Keep in mind that there is no charge for using Amazon VPC (aside from EC2 charges), therefore cost should not be a factor when determining the appropriate size for your VPC, so make sure you size your VPC for growth. Moving workloads or AWS resources between networks is not a trivial task, so be generous in your IP address estimates to give yourself plenty of room to grow, deploy new workloads, or change your VPC design configuration from one to another. The majority of AWS customers use VPCs with a /16 netmask and subnets with /24 netmasks. The primary reason AWS customers select smaller VPC and subnet sizes is to avoid overlapping network addresses with existing networks. So having AWS single VPC Design we've chosen a Medium/Small VPC/Subnet addressing plan which would probably fit a broad range variety of use cases","title":"VPCs IP Addressing Plan (CIDR blocks sizing)"},{"location":"how-it-works/features/network/vpc-addressing/#networking-ip-addressing","text":"Starting CIDR Segment (AWS Org) AWS Org IP Addressing calculation is presented below based on segment 172.16.0.0.0/12 We started from 172.16.0.0.0/12 and subnetted to /20 Resulting in Total Subnets: 256 2 x AWS Account with Hosts/SubNet: 4094 1ry VPC + 2ry VPC 1ry VPC DR + 2ry VPC DR Individual CIDR Segments (VPCs) Then each of these are /20 to /24 Considering the whole Starting CIDR Segment (AWS Org) before declared, we'll start at 172.18.0.0/20 shared 1ry VPC CIDR: 172.18.0.0/24 2ry VPC CIDR: 172.18.16.0/24 1ry VPC DR CIDR: 172.18.32.0/24 2ry VPC DR CIDR: 172.18.48.0/24 apps-devstg 1ry VPC CIDR: 172.18.64.0/24 2ry VPC CIDR: 172.18.80.0/24 1ry VPC DR CIDR: 172.18.96.0/24 2ry VPC DR CIDR: 172.18.112.0/24 apps-prd 1ry VPC CIDR: 172.18.128.0/24 2ry VPC CIDR: 172.18.144.0/24 1ry VPC DR CIDR: 172.18.160.0/24 2ry VPC DR CIDR: 172.18.176.0/24 Resulting in Subnets: 16 x VPC VPC Subnets with Hosts/Net: 256. Eg: apps-devstg account \u2192 us-east-1 w/ 3 AZs \u2192 3 x Private Subnets /az + 3 x Public Subnets /az 1ry VPC CIDR: 172.18.64.0/24 Subnets: Private 172.18.64.0/24, 172.18.66.0/24 and 172.18.68.0/24 Public 172.18.65.0/24, 172.18.67.0/24 and 172.18.69.0/24","title":"Networking - IP Addressing"},{"location":"how-it-works/features/network/vpc-addressing/#planned-vpcs","text":"Having defined the initial VPC that will be created in the different accounts that were defined, we are going to create subnets in each of these VPCs defining Private and Public subnets split among different availability zones: Subnet address Netmask Range of addresses Hosts Assignment 172.18.0.0/20 255.255.240.0 172.18.0.0 - 172.18.15.255 4094 1ry VPC: shared 172.18.16.0/20 255.255.240.0 172.18.16.0 - 172.18.31.255 4094 2ry VPC: shared 172.18.32.0/20 255.255.240.0 172.18.32.0 - 172.18.47.255 4094 1ry VPC DR: shared 172.18.48.0/20 255.255.240.0 172.18.48.0 - 172.18.63.255 4094 2ry VPC DR: shared 172.18.64.0/20 255.255.240.0 172.18.64.0 - 172.18.79.255 4094 1ry VPC: apps-devstg 172.18.80.0/20 255.255.240.0 172.18.80.0 - 172.18.95.255 4094 2ry VPC: apps-devstg 172.18.96.0/20 255.255.240.0 172.18.96.0 - 172.18.111.255 4094 1ry VPC DR: apps-devstg 172.18.112.0/20 255.255.240.0 172.18.112.0 - 172.18.127.255 4094 2ry VPC DR: apps-devstg 172.18.128.0/20 255.255.240.0 172.18.128.0 - 172.18.143.255 4094 1ry VPC: apps-prd 172.18.144.0/20 255.255.240.0 172.18.144.0 - 172.18.159.255 4094 2ry VPC: apps-prd 172.18.160.0/20 255.255.240.0 172.18.160.0 - 172.18.175.255 4094 1ry VPC DR: apps-prd 172.18.176.0/20 255.255.240.0 172.18.176.0 - 172.18.191.255 4094 2ry VPC DR: apps-prd","title":"Planned VPCs"},{"location":"how-it-works/features/network/vpc-addressing/#considerations","text":"Design considerations AWS EKS: Docker runs in the 172.17.0.0/16 CIDR range in Amazon EKS clusters. We recommend that your cluster's VPC subnets do not overlap this range. Otherwise, you will receive the following error: Error: : error upgrading connection: error dialing backend: dial tcp 172.17.nn.nn:10250: getsockopt: no route to host Read more: AWS EKS network requirements Reserved IP Addresses The first four IP addresses and the last IP address in each subnet CIDR block are not available for you to use, and cannot be assigned to an instance. For example, in a subnet with CIDR block 10.0.0.0/24, the following five IP addresses are reserved. For more AWS VPC Subnets IP addressing","title":"Considerations"},{"location":"how-it-works/features/network/vpc-peering/","text":"Diagram: Network Service (cross-account VPC peering ) \u00b6 Figure: AWS multi account Organization VPC peering diagram. (Source: AWS, \"Amazon Virtual Private Cloud VPC Peering\" , AWS Documentation Amazon VPC User Guide, accessed November 18th 2020). Figure: AWS multi account Organization peering detailed diagram. (Source: AWS, \"Amazon Virtual Private Cloud VPC Peering\" , AWS Documentation Amazon VPC User Guide, accessed November 18th 2020).","title":"VPC Peering"},{"location":"how-it-works/features/network/vpc-peering/#diagram-network-service-cross-account-vpc-peering","text":"Figure: AWS multi account Organization VPC peering diagram. (Source: AWS, \"Amazon Virtual Private Cloud VPC Peering\" , AWS Documentation Amazon VPC User Guide, accessed November 18th 2020). Figure: AWS multi account Organization peering detailed diagram. (Source: AWS, \"Amazon Virtual Private Cloud VPC Peering\" , AWS Documentation Amazon VPC User Guide, accessed November 18th 2020).","title":"Diagram: Network Service (cross-account VPC peering)"},{"location":"how-it-works/features/network/vpc-topology/","text":"Network Layer \u00b6 Network Topology \u00b6 VPC with public and private subnets (NAT) The configuration for this scenario includes a virtual private cloud (VPC) with public subnets and a private subnets (it's number will change depending on our specific needs). We recommend this scenario if you want to run a public-facing web application, while maintaining back-end servers that aren't publicly accessible. A common example is a multi-tier website, with a Load Balancer (ALB | NLB) in a public subnet, or other public facing routing service like AWS CloudFront or Api Gateway, and our web servers (Lambda, EKS, ECS, EC2) and database (RDS, DynamoDB, etc) servers in private subnets. You can set up security (SGs, ACLs, WAF) and routing so that the web servers can communicate internally (even between VPC accounts or VPN Endpoints) with all necessary services and components such as databases, cache, queues, among others. The services running in the public subnet, like an ALB or NLB can send outbound traffic directly to the Internet, whereas the instances in the private subnet can't. Instead, the instances in the private subnet can access the Internet by using a network address translation (NAT) gateway that resides in the public subnet. The database servers can connect to the Internet for software updates using the NAT gateway (if using RDS this is transparently provided by AWS), but the Internet cannot establish connections to the database servers. So, whenever possible all our AWS resources like EC2, EKS, RDS, Lambda, SQS will be deployed in VPC private subnets and we'll use a NAT device (Nat Gateway) to enable instances in a private subnet to connect to the internet (for example, for software updates) or other AWS services, but prevent the internet from initiating connections with the instances. A NAT device forwards traffic from the instances in the private subnet to the internet (via the VPC Internet Gateway) or other AWS services, and then sends the response back to the instances. When traffic goes to the internet, the source IPv4 address is replaced with the NAT device\u2019s address and similarly, when the response traffic goes to those instances, the NAT device translates the address back to those instances\u2019 private IPv4 addresses. Figure: VPC topology diagram. (Source: AWS, \"VPC with public and private subnets (NAT)\" , AWS Documentation Amazon VPC User Guide, accessed November 18th 2020). Figure: VPC topology diagram with multiple Nat Gateways for HA. (Source: Andreas Wittig, \"Advanced AWS Networking: Pitfalls That You Should Avoid\" , Cloudonaut.io Blog, accessed November 18th 2020). Read more \u00b6 AWS reference links Consider the following AWS official links as reference: VPC with public and private subnets (NAT) AWS Elastic Load Balancing","title":"VPC Topology"},{"location":"how-it-works/features/network/vpc-topology/#network-layer","text":"","title":"Network Layer"},{"location":"how-it-works/features/network/vpc-topology/#network-topology","text":"VPC with public and private subnets (NAT) The configuration for this scenario includes a virtual private cloud (VPC) with public subnets and a private subnets (it's number will change depending on our specific needs). We recommend this scenario if you want to run a public-facing web application, while maintaining back-end servers that aren't publicly accessible. A common example is a multi-tier website, with a Load Balancer (ALB | NLB) in a public subnet, or other public facing routing service like AWS CloudFront or Api Gateway, and our web servers (Lambda, EKS, ECS, EC2) and database (RDS, DynamoDB, etc) servers in private subnets. You can set up security (SGs, ACLs, WAF) and routing so that the web servers can communicate internally (even between VPC accounts or VPN Endpoints) with all necessary services and components such as databases, cache, queues, among others. The services running in the public subnet, like an ALB or NLB can send outbound traffic directly to the Internet, whereas the instances in the private subnet can't. Instead, the instances in the private subnet can access the Internet by using a network address translation (NAT) gateway that resides in the public subnet. The database servers can connect to the Internet for software updates using the NAT gateway (if using RDS this is transparently provided by AWS), but the Internet cannot establish connections to the database servers. So, whenever possible all our AWS resources like EC2, EKS, RDS, Lambda, SQS will be deployed in VPC private subnets and we'll use a NAT device (Nat Gateway) to enable instances in a private subnet to connect to the internet (for example, for software updates) or other AWS services, but prevent the internet from initiating connections with the instances. A NAT device forwards traffic from the instances in the private subnet to the internet (via the VPC Internet Gateway) or other AWS services, and then sends the response back to the instances. When traffic goes to the internet, the source IPv4 address is replaced with the NAT device\u2019s address and similarly, when the response traffic goes to those instances, the NAT device translates the address back to those instances\u2019 private IPv4 addresses. Figure: VPC topology diagram. (Source: AWS, \"VPC with public and private subnets (NAT)\" , AWS Documentation Amazon VPC User Guide, accessed November 18th 2020). Figure: VPC topology diagram with multiple Nat Gateways for HA. (Source: Andreas Wittig, \"Advanced AWS Networking: Pitfalls That You Should Avoid\" , Cloudonaut.io Blog, accessed November 18th 2020).","title":"Network Topology"},{"location":"how-it-works/features/network/vpc-topology/#read-more","text":"AWS reference links Consider the following AWS official links as reference: VPC with public and private subnets (NAT) AWS Elastic Load Balancing","title":"Read more"},{"location":"how-it-works/features/network/vpc-traffic-out/","text":"Network Security \u00b6 Control Internet access outbound traffic \u00b6 Goals \u00b6 Review and analyse available alternatives for controlling outbound traffic in VPCs. All possible candidates need to offer a reasonable balance between features and pricing. Solutions Leverage currently supports \u00b6 Network ACL (Subnet firewall) Security Groups (Instance firewall) What alternatives do we have? \u00b6 Pre-considerations \u00b6 First of all, keep in mind the following points before and while you go through the data in the table: 1 EBS pricing at the moment of this writing: GP2: $0.10 per GB-month GP3: $0.08 per GB-month) 2 DataTransfer costs will be incurred in all options Dedicated Network NAT-GW + Network Firewall Account \u00b6 Centralized Network Firewall deployment model , North-South: Centralized internet egress (VPC to internet via Transit Gateway) and NAT gateway. Figure: Multi-account dedicated network transit gateway + network firewall architecture diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture dedicated network account TGW + NFW implementation\", Binbash Leverage Doc, accessed August 4th 2021). Comparison of the alternatives analysed \u00b6 Leverage Confluence Documentation You'll find here a detailed comparison table including the alternative product and solution types, pricing model, features, pros & cons.","title":"VPC Outbound Traffic"},{"location":"how-it-works/features/network/vpc-traffic-out/#network-security","text":"","title":"Network Security"},{"location":"how-it-works/features/network/vpc-traffic-out/#control-internet-access-outbound-traffic","text":"","title":"Control Internet access outbound traffic"},{"location":"how-it-works/features/network/vpc-traffic-out/#goals","text":"Review and analyse available alternatives for controlling outbound traffic in VPCs. All possible candidates need to offer a reasonable balance between features and pricing. Solutions","title":"Goals"},{"location":"how-it-works/features/network/vpc-traffic-out/#leverage-currently-supports","text":"Network ACL (Subnet firewall) Security Groups (Instance firewall)","title":"Leverage currently supports"},{"location":"how-it-works/features/network/vpc-traffic-out/#what-alternatives-do-we-have","text":"","title":"What alternatives do we have?"},{"location":"how-it-works/features/network/vpc-traffic-out/#pre-considerations","text":"First of all, keep in mind the following points before and while you go through the data in the table: 1 EBS pricing at the moment of this writing: GP2: $0.10 per GB-month GP3: $0.08 per GB-month) 2 DataTransfer costs will be incurred in all options","title":"Pre-considerations"},{"location":"how-it-works/features/network/vpc-traffic-out/#dedicated-network-nat-gw-network-firewall-account","text":"Centralized Network Firewall deployment model , North-South: Centralized internet egress (VPC to internet via Transit Gateway) and NAT gateway. Figure: Multi-account dedicated network transit gateway + network firewall architecture diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture dedicated network account TGW + NFW implementation\", Binbash Leverage Doc, accessed August 4th 2021).","title":"Dedicated Network NAT-GW + Network Firewall Account"},{"location":"how-it-works/features/network/vpc-traffic-out/#comparison-of-the-alternatives-analysed","text":"Leverage Confluence Documentation You'll find here a detailed comparison table including the alternative product and solution types, pricing model, features, pros & cons.","title":"Comparison of the alternatives analysed"},{"location":"how-it-works/features/organization/accounts/","text":"AWS Organization Accounts description \u00b6 Our default AWS Organizations terraform layout solution includes 5 accounts + 1 or N Accts (if you invite pre-existing AWS Account/s). Account Description Management (Root) Used to manage configuration and access to AWS Org managed accounts. The AWS Organizations account provides the ability to create and financially manage member accounts, it contains AWS Organizations Service Control Policies(SCPs). Shared Services / Resources Reference for creating infrastructure shared services such as directory services, DNS, VPN Solution, Monitoring tools like Prometheus and Grafana, CI/CD server (Jenkins, Drone, Spinnaker, etc), centralized logging solution like ELK and Vault Server (Hashicorp Vault) Security Intended for centralized user management via IAM roles based cross-org auth approach (IAM roles per account to be assumed still needed. Also to centralize AWS CloudTrail and AWS Config logs, and used as the master AWS GuardDuty Account Network Intended for centralized networking management via Transit Gateway (TGW), supports a centralized outbound traffic setup and the integration of AWS Network Firewall (NFW) Legacy Your pre existing AWS Accounts to be invited as members of the new AWS Organization, probably several services and workloads are going to be progressively migrated to your new Accounts. Apps DevStg Host your DEV, QA and STG environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues & Servers, Data, Storage, CDN Apps Prod Host your PROD environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues & Servers, Data, Storage, CDN Account: Shared Services | Resources \u00b6 Account: Apps DevStg | Prod \u00b6","title":"Accounts"},{"location":"how-it-works/features/organization/accounts/#aws-organization-accounts-description","text":"Our default AWS Organizations terraform layout solution includes 5 accounts + 1 or N Accts (if you invite pre-existing AWS Account/s). Account Description Management (Root) Used to manage configuration and access to AWS Org managed accounts. The AWS Organizations account provides the ability to create and financially manage member accounts, it contains AWS Organizations Service Control Policies(SCPs). Shared Services / Resources Reference for creating infrastructure shared services such as directory services, DNS, VPN Solution, Monitoring tools like Prometheus and Grafana, CI/CD server (Jenkins, Drone, Spinnaker, etc), centralized logging solution like ELK and Vault Server (Hashicorp Vault) Security Intended for centralized user management via IAM roles based cross-org auth approach (IAM roles per account to be assumed still needed. Also to centralize AWS CloudTrail and AWS Config logs, and used as the master AWS GuardDuty Account Network Intended for centralized networking management via Transit Gateway (TGW), supports a centralized outbound traffic setup and the integration of AWS Network Firewall (NFW) Legacy Your pre existing AWS Accounts to be invited as members of the new AWS Organization, probably several services and workloads are going to be progressively migrated to your new Accounts. Apps DevStg Host your DEV, QA and STG environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues & Servers, Data, Storage, CDN Apps Prod Host your PROD environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues & Servers, Data, Storage, CDN","title":"AWS Organization Accounts description"},{"location":"how-it-works/features/organization/accounts/#account-shared-services-resources","text":"","title":"Account: Shared Services | Resources"},{"location":"how-it-works/features/organization/accounts/#account-apps-devstg-prod","text":"","title":"Account: Apps DevStg | Prod"},{"location":"how-it-works/features/organization/billing/","text":"AWS Organizations Billing \u00b6 Overview \u00b6 Each month AWS charges your payer Root Account for all the linked accounts in a consolidated bill. The following illustration shows an example of a consolidated bill. Figure: AWS Organization Multi-Account structure (just as reference). (Source: Andreas Wittig, \"AWS Account Structure: Think twice before using AWS Organizations\" , Cloudonaut.io Blog, accessed November 18th 2020). Figure: AWS Organization Multi-Account billing structure (just as reference). (Source: AWS, \"Consolidated billing process\" , AWS Documentation AWS Billing and Cost Management User Guide, accessed November 18th 2020). Reference Architecture AWS Organizations features AWS Multiple Account Billing Strategy: consolidated billing for all your accounts within organization, enhanced per account cost filtering and RI usage A single monthly bill accumulates the spending among many AWS accounts. Benefit from volume pricing across more than one AWS account. AWS Organizations Billing FAQs What does AWS Organizations cost? AWS Organizations is offered at no additional charge. Who pays for usage incurred by users under an AWS member account in my organization? The owner of the master account is responsible for paying for all usage, data, and resources used by the accounts in the organization. Will my bill reflect the organizational unit structure that I created in my organization? No. For now, your bill will not reflect the structure that you have defined in your organization. You can use cost allocation tags in individual AWS accounts to categorize and track your AWS costs, and this allocation will be visible in the consolidated bill for your organization. Source | AWS Organizations FAQs Read more \u00b6 Reference links Consider the following extra links as reference: Cloudnout.io | AWS Account Structure AWS Ramp-Up Guide: Cost Management","title":"Billing"},{"location":"how-it-works/features/organization/billing/#aws-organizations-billing","text":"","title":"AWS Organizations Billing"},{"location":"how-it-works/features/organization/billing/#overview","text":"Each month AWS charges your payer Root Account for all the linked accounts in a consolidated bill. The following illustration shows an example of a consolidated bill. Figure: AWS Organization Multi-Account structure (just as reference). (Source: Andreas Wittig, \"AWS Account Structure: Think twice before using AWS Organizations\" , Cloudonaut.io Blog, accessed November 18th 2020). Figure: AWS Organization Multi-Account billing structure (just as reference). (Source: AWS, \"Consolidated billing process\" , AWS Documentation AWS Billing and Cost Management User Guide, accessed November 18th 2020). Reference Architecture AWS Organizations features AWS Multiple Account Billing Strategy: consolidated billing for all your accounts within organization, enhanced per account cost filtering and RI usage A single monthly bill accumulates the spending among many AWS accounts. Benefit from volume pricing across more than one AWS account. AWS Organizations Billing FAQs What does AWS Organizations cost? AWS Organizations is offered at no additional charge. Who pays for usage incurred by users under an AWS member account in my organization? The owner of the master account is responsible for paying for all usage, data, and resources used by the accounts in the organization. Will my bill reflect the organizational unit structure that I created in my organization? No. For now, your bill will not reflect the structure that you have defined in your organization. You can use cost allocation tags in individual AWS accounts to categorize and track your AWS costs, and this allocation will be visible in the consolidated bill for your organization. Source | AWS Organizations FAQs","title":"Overview"},{"location":"how-it-works/features/organization/billing/#read-more","text":"Reference links Consider the following extra links as reference: Cloudnout.io | AWS Account Structure AWS Ramp-Up Guide: Cost Management","title":"Read more"},{"location":"how-it-works/features/organization/organization/","text":"Reference Architecture: Terraform AWS Organizations Account Baseline \u00b6 Overview \u00b6 This repository contains all Terraform configuration files used to create Binbash Leverage Reference AWS Organizations Multi-Account baseline layout. Why AWS Organizations? This approach allows it to have a hierarchical structure of AWS accounts, providing additional security isolation and the ability to separate resources into Organizational Units with it associated Service Control Policies (SCP). Considering that a current AWS account/s was/were already active (Client AWS Legacy Account), this one will then be invited to be a \u201cmember account\u201d of the AWS Organization architecture. In the future, once all Client\u2019s Legacy dev, stage, prod and other resources for the Project applications are running in the new accounts architecture, meaning a full AWS Organizations approach, all the already migrated assets from the \u2018Legacy\u2019 account should be decommissioned. This account will remain with the necessary services, such as DNS, among others. AWS Organization Accounts Layout \u00b6 The following block provides a brief explanation of the chosen AWS Organization Accounts layout: + devstg/ (resources for dev apps/services account) ... + prod/ (resources for prod apps/services account) ... + management/ (resources for the management account) ... + security/ (resources for the security + users account) ... + shared/ (resources for the shared account) ... + legacy/ (resources for the legacy/pre-existing account) ... Figure: AWS Organization multi-account architecture diagram (just as reference). (Source: Binbash Leverage, \"Leverage Reference Architecture components\", Binbash Leverage Doc, accessed August 4th 2021). Benefits of AWS Organizations Billing: Consolidated billing for all your accounts within organization, enhanced per account cost filtering and RI usage Security I: Extra security layer: You get fully isolated infrastructure for different organizations units in your projects, eg: Dev, Prod, Shared Resources, Security, Users, BI, etc. Security II: Using AWS Organization you may use Service Control Policies (SCPs) to control which AWS services are available within different accounts. Networking: Connectivity and access will be securely setup via VPC peering + NACLS + Sec Groups everything with private endpoints only accessible v\u00eda Pritunl VPN significantly reducing the surface of attack. User Mgmt: You can manage all your IAM resources (users/groups/roles) and policies in one place (usually, security/users account) and use AssumeRole to works with org accounts. Operations: Will reduce the blast radius to the maximum possible. Compatibility: Legacy accounts can (probably should) be invited as a member of the new Organization and afterwards even imported into your terraform code . Migration: After having your baseline AWS Org reference cloud solutions architecture deployed (IAM, VPC, NACLS, VPC-Peering, DNS Cross-Org, CloudTrail, etc) you're ready to start progressively orchestrating new resources in order to segregate different Environment and Services per account. This approach will allow you to start a 1 by 1 Blue/Green (Red/Black) migration without affecting any of your services at all . You would like to take advantage of an Active-Active DNS switchover approach (nice as DR exercise too). EXAMPLE: Jenkins CI Server Migration steps: Let's say you have your EC2_A ( jenkins.aws.domain.com ) in Account_A (Legacy), so you could deploy a brand new EC2_B Jenkins Instance in Account_B (Shared Resources). Temporally associated with jenkins2.aws.domain.com Sync it's current data ( /var/lib/jenkins ) Test and fully validate every job and pipeline works as expected. In case you haven't finished your validations we highly recommend to declare everything as code and fully automated so as to destroy and re-create your under development env on demand to save costs. Finally switch jenkins2.aws.domain.com -> to -> jenkins.aws.domain.com Stop your old EC2_A. If everything looks fine after after 2/4 weeks you could terminate your EC2_A (hope everything is as code and just terraform destroy ) Considering the previously detailed steps plan your roadmap to move forward with every other component to be migrated. Read more \u00b6 AWS reference links Consider the following AWS official links as reference: Why should I set up a multi-account AWS environment? AWS Multiple Account User Management Strategy AWS Muttiple Account Security Strategy AWS Multiple Account Billing Strategy AWS Secure Account Setup Authentication and Access Control for AWS Organizations (keep in mind EC2 and other services can also use AWS IAM Roles to get secure cross-account access)","title":"Organization"},{"location":"how-it-works/features/organization/organization/#reference-architecture-terraform-aws-organizations-account-baseline","text":"","title":"Reference Architecture: Terraform AWS Organizations Account Baseline"},{"location":"how-it-works/features/organization/organization/#overview","text":"This repository contains all Terraform configuration files used to create Binbash Leverage Reference AWS Organizations Multi-Account baseline layout. Why AWS Organizations? This approach allows it to have a hierarchical structure of AWS accounts, providing additional security isolation and the ability to separate resources into Organizational Units with it associated Service Control Policies (SCP). Considering that a current AWS account/s was/were already active (Client AWS Legacy Account), this one will then be invited to be a \u201cmember account\u201d of the AWS Organization architecture. In the future, once all Client\u2019s Legacy dev, stage, prod and other resources for the Project applications are running in the new accounts architecture, meaning a full AWS Organizations approach, all the already migrated assets from the \u2018Legacy\u2019 account should be decommissioned. This account will remain with the necessary services, such as DNS, among others.","title":"Overview"},{"location":"how-it-works/features/organization/organization/#aws-organization-accounts-layout","text":"The following block provides a brief explanation of the chosen AWS Organization Accounts layout: + devstg/ (resources for dev apps/services account) ... + prod/ (resources for prod apps/services account) ... + management/ (resources for the management account) ... + security/ (resources for the security + users account) ... + shared/ (resources for the shared account) ... + legacy/ (resources for the legacy/pre-existing account) ... Figure: AWS Organization multi-account architecture diagram (just as reference). (Source: Binbash Leverage, \"Leverage Reference Architecture components\", Binbash Leverage Doc, accessed August 4th 2021). Benefits of AWS Organizations Billing: Consolidated billing for all your accounts within organization, enhanced per account cost filtering and RI usage Security I: Extra security layer: You get fully isolated infrastructure for different organizations units in your projects, eg: Dev, Prod, Shared Resources, Security, Users, BI, etc. Security II: Using AWS Organization you may use Service Control Policies (SCPs) to control which AWS services are available within different accounts. Networking: Connectivity and access will be securely setup via VPC peering + NACLS + Sec Groups everything with private endpoints only accessible v\u00eda Pritunl VPN significantly reducing the surface of attack. User Mgmt: You can manage all your IAM resources (users/groups/roles) and policies in one place (usually, security/users account) and use AssumeRole to works with org accounts. Operations: Will reduce the blast radius to the maximum possible. Compatibility: Legacy accounts can (probably should) be invited as a member of the new Organization and afterwards even imported into your terraform code . Migration: After having your baseline AWS Org reference cloud solutions architecture deployed (IAM, VPC, NACLS, VPC-Peering, DNS Cross-Org, CloudTrail, etc) you're ready to start progressively orchestrating new resources in order to segregate different Environment and Services per account. This approach will allow you to start a 1 by 1 Blue/Green (Red/Black) migration without affecting any of your services at all . You would like to take advantage of an Active-Active DNS switchover approach (nice as DR exercise too). EXAMPLE: Jenkins CI Server Migration steps: Let's say you have your EC2_A ( jenkins.aws.domain.com ) in Account_A (Legacy), so you could deploy a brand new EC2_B Jenkins Instance in Account_B (Shared Resources). Temporally associated with jenkins2.aws.domain.com Sync it's current data ( /var/lib/jenkins ) Test and fully validate every job and pipeline works as expected. In case you haven't finished your validations we highly recommend to declare everything as code and fully automated so as to destroy and re-create your under development env on demand to save costs. Finally switch jenkins2.aws.domain.com -> to -> jenkins.aws.domain.com Stop your old EC2_A. If everything looks fine after after 2/4 weeks you could terminate your EC2_A (hope everything is as code and just terraform destroy ) Considering the previously detailed steps plan your roadmap to move forward with every other component to be migrated.","title":"AWS Organization Accounts Layout"},{"location":"how-it-works/features/organization/organization/#read-more","text":"AWS reference links Consider the following AWS official links as reference: Why should I set up a multi-account AWS environment? AWS Multiple Account User Management Strategy AWS Muttiple Account Security Strategy AWS Multiple Account Billing Strategy AWS Secure Account Setup Authentication and Access Control for AWS Organizations (keep in mind EC2 and other services can also use AWS IAM Roles to get secure cross-account access)","title":"Read more"},{"location":"how-it-works/features/reliability/backups/","text":"Backups \u00b6 AWS Backup \u00b6 As defined by AWS AWS Backup is a fully managed backup service that makes it easy to centralize and automate the backup of data across AWS services. Using AWS Backup, you can centrally configure backup policies and monitor backup activity for AWS resources, such as: Amazon EBS volumes , Amazon EC2 instances , Amazon RDS databases , Amazon DynamoDB tables , Amazon EFS file systems , and AWS Storage Gateway volumes . AWS Backup automates and consolidates backup tasks previously performed service-by-service, removing the need to create custom scripts and manual processes. With just a few clicks in the AWS Backup console, you can create backup policies that automate backup schedules and retention management. AWS Backup provides a fully managed, policy-based backup solution, simplifying your backup management, enabling you to meet your business and regulatory backup compliance requirements. Figure: AWS Backup service diagram (just as reference). (Source: AWS, \"AWS Backup - Centrally manage and automate backups across AWS services\" , AWS Documentation, accessed November 18th 2020). S3 bucket region replication \u00b6 Buckets that hold data critical to business or to application operation can be replicated to another region almost synchronously. This can be setup on request to increase durability and along with database backup can constitute the base for a Business Continuity strategy. Comparison of the backup and retention policies strategies \u00b6 In this sub-section you'll find the resources to review and adjust your backup retention policies to adhere to compliance rules that govern your specific institutions regulations. This post is a summarised write-up of how we approached this sensitive task, the alternatives we analysed and the recommended solutions we provided in order to meet the requirements. We hope it can be useful for others as well. Leverage Confluence Documentation You'll find here a detailed comparison including the alternative product and solution types, pricing model, features, pros & cons.","title":"Backups"},{"location":"how-it-works/features/reliability/backups/#backups","text":"","title":"Backups"},{"location":"how-it-works/features/reliability/backups/#aws-backup","text":"As defined by AWS AWS Backup is a fully managed backup service that makes it easy to centralize and automate the backup of data across AWS services. Using AWS Backup, you can centrally configure backup policies and monitor backup activity for AWS resources, such as: Amazon EBS volumes , Amazon EC2 instances , Amazon RDS databases , Amazon DynamoDB tables , Amazon EFS file systems , and AWS Storage Gateway volumes . AWS Backup automates and consolidates backup tasks previously performed service-by-service, removing the need to create custom scripts and manual processes. With just a few clicks in the AWS Backup console, you can create backup policies that automate backup schedules and retention management. AWS Backup provides a fully managed, policy-based backup solution, simplifying your backup management, enabling you to meet your business and regulatory backup compliance requirements. Figure: AWS Backup service diagram (just as reference). (Source: AWS, \"AWS Backup - Centrally manage and automate backups across AWS services\" , AWS Documentation, accessed November 18th 2020).","title":"AWS Backup"},{"location":"how-it-works/features/reliability/backups/#s3-bucket-region-replication","text":"Buckets that hold data critical to business or to application operation can be replicated to another region almost synchronously. This can be setup on request to increase durability and along with database backup can constitute the base for a Business Continuity strategy.","title":"S3 bucket region replication"},{"location":"how-it-works/features/reliability/backups/#comparison-of-the-backup-and-retention-policies-strategies","text":"In this sub-section you'll find the resources to review and adjust your backup retention policies to adhere to compliance rules that govern your specific institutions regulations. This post is a summarised write-up of how we approached this sensitive task, the alternatives we analysed and the recommended solutions we provided in order to meet the requirements. We hope it can be useful for others as well. Leverage Confluence Documentation You'll find here a detailed comparison including the alternative product and solution types, pricing model, features, pros & cons.","title":"Comparison of the backup and retention policies strategies"},{"location":"how-it-works/features/reliability/dr/","text":"Disaster Recovery & Business Continuity Plan \u00b6 Overview \u00b6 Applications that are business critical should always have a plan in place to recover in case of a catastrophic failure or disaster. There are many strategies that can be implemented to achieve this, and deciding between them is a matter of analyzing how much is worth to invest based on calculation of damages suffered if the application is not available for a given period of time. It is based on this factor (time) that disaster recovery plans are based on. Factors that need to be determined per application are: RTO and RPO Recovery time objective (RTO): This represents the time it takes after a disruption to restore a business process to its service level. For example, if a disaster occurs at 12:00 PM (noon) and the RTO is eight hours, the DR process should restore the business process to the acceptable service level by 8:00 PM. Recovery point objective (RPO): This is the acceptable amount of data loss measured in time. For example, if a disaster occurs at 12:00 PM (noon) and the RPO is one hour, the system should recover all data that was in the system before that hour. High Availability Configuration Strategies \u00b6 After deciding RTO and RPO we have options available to achieve the time objectives: HA Strategies Backup and restore: In most traditional environments, data is backed up to tape and sent off-site regularly. The equivalent in AWS would be to take backups in the form of snapshots and copy them to another region for RDS instances, EBS volumes, EFS and S3 buckets. The plan details the step-by-step procedure to recover a fully working production environment based on these backups being restored on freshly provisioned infrastructure, and how to rollback to a regular production site once the emergency is over. Pilot Light Method: The term pilot light is often used to describe a DR scenario in which a minimal version of an environment is always running in AWS. Very similar to \u201cBackup and restore\u201d except a minimal version of key infrastructure components is provisioned in a separate region and then scaled up in case of disaster declaration. Warm standby active-passive method: The term warm-standby is used to describe a DR scenario in which a scaled-down version of a fully-functional environment is always running in the cloud. Enhancement of Pilot Light in which a minimal version is created of all components, not just critical ones. Multi-Region active-active method: By architecting multi region applications and using DNS to balance between them in normal production status, you can adjust the DNS weighting and send all traffic to the AWS region that is available, this can even be performed automatically with Route53 or other DNS services that provide health check mechanisms as well as load balancing. Figure: 2 sets of app instances, each behind an elastic load balancer in two separate regions (just as reference). (Source: Randika Rathugamage, \"High Availability with Route53 DNS Failover\" , Medium blogpost, accessed December 1st 2020). Figure: AWS calculated \u2014 or parent \u2014 health check, we can fail on any number of child health checks (just as reference). (Source: Simon Tabor, \"How to implement the perfect failover strategy using Amazon Route53\" , Medium blogpost, accessed December 1st 2020). Read more \u00b6 AWS reference links Consider the following AWS official links as reference: AWS Documentation Amazon Route 53 Developer Guide | Configuring DNS failover","title":"Disaster Recovery"},{"location":"how-it-works/features/reliability/dr/#disaster-recovery-business-continuity-plan","text":"","title":"Disaster Recovery &amp; Business Continuity Plan"},{"location":"how-it-works/features/reliability/dr/#overview","text":"Applications that are business critical should always have a plan in place to recover in case of a catastrophic failure or disaster. There are many strategies that can be implemented to achieve this, and deciding between them is a matter of analyzing how much is worth to invest based on calculation of damages suffered if the application is not available for a given period of time. It is based on this factor (time) that disaster recovery plans are based on. Factors that need to be determined per application are: RTO and RPO Recovery time objective (RTO): This represents the time it takes after a disruption to restore a business process to its service level. For example, if a disaster occurs at 12:00 PM (noon) and the RTO is eight hours, the DR process should restore the business process to the acceptable service level by 8:00 PM. Recovery point objective (RPO): This is the acceptable amount of data loss measured in time. For example, if a disaster occurs at 12:00 PM (noon) and the RPO is one hour, the system should recover all data that was in the system before that hour.","title":"Overview"},{"location":"how-it-works/features/reliability/dr/#high-availability-configuration-strategies","text":"After deciding RTO and RPO we have options available to achieve the time objectives: HA Strategies Backup and restore: In most traditional environments, data is backed up to tape and sent off-site regularly. The equivalent in AWS would be to take backups in the form of snapshots and copy them to another region for RDS instances, EBS volumes, EFS and S3 buckets. The plan details the step-by-step procedure to recover a fully working production environment based on these backups being restored on freshly provisioned infrastructure, and how to rollback to a regular production site once the emergency is over. Pilot Light Method: The term pilot light is often used to describe a DR scenario in which a minimal version of an environment is always running in AWS. Very similar to \u201cBackup and restore\u201d except a minimal version of key infrastructure components is provisioned in a separate region and then scaled up in case of disaster declaration. Warm standby active-passive method: The term warm-standby is used to describe a DR scenario in which a scaled-down version of a fully-functional environment is always running in the cloud. Enhancement of Pilot Light in which a minimal version is created of all components, not just critical ones. Multi-Region active-active method: By architecting multi region applications and using DNS to balance between them in normal production status, you can adjust the DNS weighting and send all traffic to the AWS region that is available, this can even be performed automatically with Route53 or other DNS services that provide health check mechanisms as well as load balancing. Figure: 2 sets of app instances, each behind an elastic load balancer in two separate regions (just as reference). (Source: Randika Rathugamage, \"High Availability with Route53 DNS Failover\" , Medium blogpost, accessed December 1st 2020). Figure: AWS calculated \u2014 or parent \u2014 health check, we can fail on any number of child health checks (just as reference). (Source: Simon Tabor, \"How to implement the perfect failover strategy using Amazon Route53\" , Medium blogpost, accessed December 1st 2020).","title":"High Availability Configuration Strategies"},{"location":"how-it-works/features/reliability/dr/#read-more","text":"AWS reference links Consider the following AWS official links as reference: AWS Documentation Amazon Route 53 Developer Guide | Configuring DNS failover","title":"Read more"},{"location":"how-it-works/features/reliability/health-checks/","text":"","title":"Health Checks"},{"location":"how-it-works/features/reliability/high-availability/","text":"High Availability & Helthchecks \u00b6 Recovery from Failures \u00b6 Automatic recovery from failure It keeps an AWS environment reliable. Using logs and metrics from CloudWatch, designing a system where the failures themselves trigger recovery is the way to move forward. Figure: AWS HA architecture diagrams (just as reference). Recovery Procedures \u00b6 Test recovery procedures The risks faced by cloud environment and systems, the points of failure for systems and ecosystems, as well as details about the most probable attacks are known and can be simulated. Testing recovery procedures are something that can be done using these insights. Real points of failure are exploited and the way the environment reacts to the emergency shows just how reliable the system it. Figure: AWS HA architecture diagrams (just as reference). Scalability and Availability \u00b6 Scale horizontally to increase aggregate system availability The cloud environment needs to have multiple redundancies and additional modules as added security measures. Of course, multiple redundancies require good management and maintenance for them to remain active through the environment\u2019s lifecycle. Figure: AWS HA scalable architecture diagrams (just as reference). Healthchecks & Self-healing \u00b6 K8s and containers \u00b6 K8s readiness and liveness probes Distributed systems can be hard to manage. A big reason is that there are many moving parts that all need to work for the system to function. If a small part breaks, the system has to detect it, route around it, and fix it. And this all needs to be done automatically! Health checks are a simple way to let the system know if an instance of your app is working or not working. If an instance of your app is not working, then other services should not access it or send a request to it. Instead, requests should be sent to another instance of the app that is ready, or re-tried at a later time. The system should also bring your app back to a healthy state. By default, Kubernetes starts to send traffic to a pod when all the containers inside the pod start, and restarts containers when they crash. While this can be \u201cgood enough\u201d when you are starting out, you can make your deployments more robust by creating custom health checks. Fortunately, Kubernetes make this relatively straightforward, so there is no excuse not to!\u201d So aside from the monitoring and alerting that underlying infrastructure will have, application container will have their own mechanisms to determine readiness and liveness. These are features that our scheduler of choice Kubernetes natively allows, to read more click here .","title":"High Availability"},{"location":"how-it-works/features/reliability/high-availability/#high-availability-helthchecks","text":"","title":"High Availability &amp; Helthchecks"},{"location":"how-it-works/features/reliability/high-availability/#recovery-from-failures","text":"Automatic recovery from failure It keeps an AWS environment reliable. Using logs and metrics from CloudWatch, designing a system where the failures themselves trigger recovery is the way to move forward. Figure: AWS HA architecture diagrams (just as reference).","title":"Recovery from Failures"},{"location":"how-it-works/features/reliability/high-availability/#recovery-procedures","text":"Test recovery procedures The risks faced by cloud environment and systems, the points of failure for systems and ecosystems, as well as details about the most probable attacks are known and can be simulated. Testing recovery procedures are something that can be done using these insights. Real points of failure are exploited and the way the environment reacts to the emergency shows just how reliable the system it. Figure: AWS HA architecture diagrams (just as reference).","title":"Recovery Procedures"},{"location":"how-it-works/features/reliability/high-availability/#scalability-and-availability","text":"Scale horizontally to increase aggregate system availability The cloud environment needs to have multiple redundancies and additional modules as added security measures. Of course, multiple redundancies require good management and maintenance for them to remain active through the environment\u2019s lifecycle. Figure: AWS HA scalable architecture diagrams (just as reference).","title":"Scalability and Availability"},{"location":"how-it-works/features/reliability/high-availability/#healthchecks-self-healing","text":"","title":"Healthchecks &amp; Self-healing"},{"location":"how-it-works/features/reliability/high-availability/#k8s-and-containers","text":"K8s readiness and liveness probes Distributed systems can be hard to manage. A big reason is that there are many moving parts that all need to work for the system to function. If a small part breaks, the system has to detect it, route around it, and fix it. And this all needs to be done automatically! Health checks are a simple way to let the system know if an instance of your app is working or not working. If an instance of your app is not working, then other services should not access it or send a request to it. Instead, requests should be sent to another instance of the app that is ready, or re-tried at a later time. The system should also bring your app back to a healthy state. By default, Kubernetes starts to send traffic to a pod when all the containers inside the pod start, and restarts containers when they crash. While this can be \u201cgood enough\u201d when you are starting out, you can make your deployments more robust by creating custom health checks. Fortunately, Kubernetes make this relatively straightforward, so there is no excuse not to!\u201d So aside from the monitoring and alerting that underlying infrastructure will have, application container will have their own mechanisms to determine readiness and liveness. These are features that our scheduler of choice Kubernetes natively allows, to read more click here .","title":"K8s and containers"},{"location":"how-it-works/features/secrets/secrets/","text":"Secret and password mgmt tools \u00b6 Overview \u00b6 Ensure scalability, availability and persistence, as well as secure, hierarchical storage to manage configuration and secret data for: Secret Managers AWS KMS AWS SSM Parameter Store Ansible Vault Hashicorp Vault Strengths Improve the level of security by validating separation of environment variables and code secrets. Control and audit granular access in detail Store secure chain and configuration data in hierarchies and track versions. Configure integration with AWS KMS, Amazon SNS, Amazon CloudWatch, and AWS CloudTrail to notify, monitor, and audit functionality. Read more \u00b6 Related articles A Comparison of Secrets Managers for AWS Clean Up Your Secrets & Credential Management","title":"Secrets"},{"location":"how-it-works/features/secrets/secrets/#secret-and-password-mgmt-tools","text":"","title":"Secret and password mgmt tools"},{"location":"how-it-works/features/secrets/secrets/#overview","text":"Ensure scalability, availability and persistence, as well as secure, hierarchical storage to manage configuration and secret data for: Secret Managers AWS KMS AWS SSM Parameter Store Ansible Vault Hashicorp Vault Strengths Improve the level of security by validating separation of environment variables and code secrets. Control and audit granular access in detail Store secure chain and configuration data in hierarchies and track versions. Configure integration with AWS KMS, Amazon SNS, Amazon CloudWatch, and AWS CloudTrail to notify, monitor, and audit functionality.","title":"Overview"},{"location":"how-it-works/features/secrets/secrets/#read-more","text":"Related articles A Comparison of Secrets Managers for AWS Clean Up Your Secrets & Credential Management","title":"Read more"},{"location":"how-it-works/features/security/audit-cloudtrail/","text":"Audit | CloudTrail \u00b6 AWS CloudTrail monitors and records account activity across your AWS infrastructure, giving you control over storage, analysis, and remediation actions. Leverage Reference Architecture | Security Audit CloudTrail module . Key elements: Destination bucket KMS Key to files encrypt files Include global services Enable multi-regional trail S3 Bucket Module . Key elements: Lifecycle rule Expiration KMS Key Module . Key elements: Deletion Window Policy Grant permission to the rest of the accounts to use the key Read More \u00b6 AWS Cloudtrail Overview Security Pillar - AWS Well-Architected Framework","title":"Audit | CloudTrail"},{"location":"how-it-works/features/security/audit-cloudtrail/#audit-cloudtrail","text":"AWS CloudTrail monitors and records account activity across your AWS infrastructure, giving you control over storage, analysis, and remediation actions. Leverage Reference Architecture | Security Audit CloudTrail module . Key elements: Destination bucket KMS Key to files encrypt files Include global services Enable multi-regional trail S3 Bucket Module . Key elements: Lifecycle rule Expiration KMS Key Module . Key elements: Deletion Window Policy Grant permission to the rest of the accounts to use the key","title":"Audit | CloudTrail"},{"location":"how-it-works/features/security/audit-cloudtrail/#read-more","text":"AWS Cloudtrail Overview Security Pillar - AWS Well-Architected Framework","title":"Read More"},{"location":"how-it-works/features/security/certificates/","text":"Certificate Management \u00b6 AWS Certificate Manager \u00b6 Why AWS Certificate Manager (ACM)\u2753 As stated at the official AWS website \"AWS Certificate Manager is a service that lets you easily provision, manage, and deploy public and private Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS services and your internal connected resources. SSL/TLS certificates are used to secure network communications and establish the identity of websites over the Internet as well as resources on private networks. AWS Certificate Manager removes the time-consuming manual process of purchasing, uploading, and renewing SSL/TLS certificates.\" \"With AWS Certificate Manager, you can quickly request a certificate, deploy it on ACM-integrated AWS resources , such as: Elastic Load Balancers, Amazon CloudFront distributions, and APIs on API Gateway, and let AWS Certificate Manager handle certificate renewals. It also enables you to create private certificates for your internal resources and manage the certificate lifecycle centrally. Public and private certificates provisioned through AWS Certificate Manager for use with ACM-integrated services are free. You pay only for the AWS resources you create to run your application. With AWS Certificate Manager Private Certificate Authority, you pay monthly for the operation of the private CA and for the private certificates you issue.\" Figure: AWS certificate manager (ACM) service integration diagram. (Source: AWS, \"Amazon Certificate Manager intro diagram\" , AWS Documentation Amazon ACM User Guide, accessed August 4th 2021). Cert-manager + Let's Encrypt \u00b6 Why Cert-manager + Let's Encrypt\u2753 cert-manager adds certificates and certificate issuers as resource types in Kubernetes clusters, and simplifies the process of obtaining, renewing and using those certificates. It can issue certificates from a variety of supported sources, including Let\u2019s Encrypt, HashiCorp Vault, and Venafi as well as private PKI. It will ensure certificates are valid and up to date, and attempt to renew certificates at a configured time before expiry. It is loosely based upon the work of kube-lego and has borrowed some wisdom from other similar projects such as kube-cert-manager. Figure: Certificate manager high level components architecture diagram. (Source: Cert-manager official documentation, \"Cert-manager manager intro overview\" , Cert-manager Documentation main intro section, accessed August 4th 2021).","title":"Certificates"},{"location":"how-it-works/features/security/certificates/#certificate-management","text":"","title":"Certificate Management"},{"location":"how-it-works/features/security/certificates/#aws-certificate-manager","text":"Why AWS Certificate Manager (ACM)\u2753 As stated at the official AWS website \"AWS Certificate Manager is a service that lets you easily provision, manage, and deploy public and private Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS services and your internal connected resources. SSL/TLS certificates are used to secure network communications and establish the identity of websites over the Internet as well as resources on private networks. AWS Certificate Manager removes the time-consuming manual process of purchasing, uploading, and renewing SSL/TLS certificates.\" \"With AWS Certificate Manager, you can quickly request a certificate, deploy it on ACM-integrated AWS resources , such as: Elastic Load Balancers, Amazon CloudFront distributions, and APIs on API Gateway, and let AWS Certificate Manager handle certificate renewals. It also enables you to create private certificates for your internal resources and manage the certificate lifecycle centrally. Public and private certificates provisioned through AWS Certificate Manager for use with ACM-integrated services are free. You pay only for the AWS resources you create to run your application. With AWS Certificate Manager Private Certificate Authority, you pay monthly for the operation of the private CA and for the private certificates you issue.\" Figure: AWS certificate manager (ACM) service integration diagram. (Source: AWS, \"Amazon Certificate Manager intro diagram\" , AWS Documentation Amazon ACM User Guide, accessed August 4th 2021).","title":"AWS Certificate Manager"},{"location":"how-it-works/features/security/certificates/#cert-manager-lets-encrypt","text":"Why Cert-manager + Let's Encrypt\u2753 cert-manager adds certificates and certificate issuers as resource types in Kubernetes clusters, and simplifies the process of obtaining, renewing and using those certificates. It can issue certificates from a variety of supported sources, including Let\u2019s Encrypt, HashiCorp Vault, and Venafi as well as private PKI. It will ensure certificates are valid and up to date, and attempt to renew certificates at a configured time before expiry. It is loosely based upon the work of kube-lego and has borrowed some wisdom from other similar projects such as kube-cert-manager. Figure: Certificate manager high level components architecture diagram. (Source: Cert-manager official documentation, \"Cert-manager manager intro overview\" , Cert-manager Documentation main intro section, accessed August 4th 2021).","title":"Cert-manager + Let's Encrypt"},{"location":"how-it-works/features/security/iam-access-analyzer/","text":"IAM Access Analyzer \u00b6 Overview \u00b6 Access Analyzer analyzes the resource-based policies that are applied to AWS resources in the Region where you enabled Access Analyzer. Only resource-based policies are analyzed. Supported resource types: Amazon Simple Storage Service buckets AWS Identity and Access Management roles AWS Key Management Service keys AWS Lambda functions and layers Amazon Simple Queue Service queues AWS Secrets Manager secrets Figure: AWS IAM access analysis features. (Source: AWS, \"How it works - monitoring external access to resources\" , AWS Documentation, accessed June 11th 2021). AWS Organizations \u00b6 CONSIDERATION: AWS Organization integration In order to enable AccessAnalyzer with the Organization at the zone of of trust in the Security account, this account needs to be set as a delegated administrator . Such step cannot be performed by Terraform yet so it was set up manually as described below: https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-settings.html If you're configuring AWS IAM Access Analyzer in your AWS Organizations management account, you can add a member account in the organization as the delegated administrator to manage Access Analyzer for your organization. The delegated administrator has permissions to create and manage analyzers with the organization as the zone of trust. Only the management account can add a delegated administrator. Reference Architecture implementation code \u00b6 Reference Architecture Code: le-tf-infra-aws/security/security-base/iam_access_analizer.tf resource \"aws_accessanalyzer_analyzer\" \"default\" { analyzer_name = \"ConsoleAnalyzer-bc3bc4d6-09cb-XXXX-XXXX-XXXXXXXXXX\" type = \"ORGANIZATION\" tags = local.tags } AWS Web Console \u00b6 Figure: AWS Web Console screenshot. (Source: Binbash, \"IAM access analyzer service\", accessed June 11th 2021).","title":"IAM Access Analyzer"},{"location":"how-it-works/features/security/iam-access-analyzer/#iam-access-analyzer","text":"","title":"IAM Access Analyzer"},{"location":"how-it-works/features/security/iam-access-analyzer/#overview","text":"Access Analyzer analyzes the resource-based policies that are applied to AWS resources in the Region where you enabled Access Analyzer. Only resource-based policies are analyzed. Supported resource types: Amazon Simple Storage Service buckets AWS Identity and Access Management roles AWS Key Management Service keys AWS Lambda functions and layers Amazon Simple Queue Service queues AWS Secrets Manager secrets Figure: AWS IAM access analysis features. (Source: AWS, \"How it works - monitoring external access to resources\" , AWS Documentation, accessed June 11th 2021).","title":"Overview"},{"location":"how-it-works/features/security/iam-access-analyzer/#aws-organizations","text":"CONSIDERATION: AWS Organization integration In order to enable AccessAnalyzer with the Organization at the zone of of trust in the Security account, this account needs to be set as a delegated administrator . Such step cannot be performed by Terraform yet so it was set up manually as described below: https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-settings.html If you're configuring AWS IAM Access Analyzer in your AWS Organizations management account, you can add a member account in the organization as the delegated administrator to manage Access Analyzer for your organization. The delegated administrator has permissions to create and manage analyzers with the organization as the zone of trust. Only the management account can add a delegated administrator.","title":"AWS Organizations"},{"location":"how-it-works/features/security/iam-access-analyzer/#reference-architecture-implementation-code","text":"Reference Architecture Code: le-tf-infra-aws/security/security-base/iam_access_analizer.tf resource \"aws_accessanalyzer_analyzer\" \"default\" { analyzer_name = \"ConsoleAnalyzer-bc3bc4d6-09cb-XXXX-XXXX-XXXXXXXXXX\" type = \"ORGANIZATION\" tags = local.tags }","title":"Reference Architecture implementation code"},{"location":"how-it-works/features/security/iam-access-analyzer/#aws-web-console","text":"Figure: AWS Web Console screenshot. (Source: Binbash, \"IAM access analyzer service\", accessed June 11th 2021).","title":"AWS Web Console"},{"location":"how-it-works/features/security/overview/","text":"AWS Reference Architecture security features \u00b6 VPN VPN Services Services Certificates Certificates Audit CloudTrail Monitoring IAM Access Analyzer","title":"Overview"},{"location":"how-it-works/features/security/overview/#aws-reference-architecture-security-features","text":"VPN VPN Services Services Certificates Certificates Audit CloudTrail Monitoring IAM Access Analyzer","title":"AWS Reference Architecture security features"},{"location":"how-it-works/features/security/services/","text":"AWS Security & Compliance Services \u00b6 Security Directives There will not be any instance port or service port open to general access, unless justified by business reasons, and we\u2019ll take alternative means of security to mitigate any possible risk. Every account will have a set of active services that will allow for administrative users (SecOps) to audit all actions and track potentially dangerous behavior. All services will be enabled via IaC (Terraform or SDK and tracked in the proper git repo). AWS Managed Security Services AWS IAM Access Analyzer: Generates comprehensive findings that identify resources policies for public or cross-account accessibility, monitors and helps you refine permissions. Provides the highest levels of security assurance. AWS Config: Tracks changes made to AWS resources over time, making possible to return to a previous state. Monitors and records your AWS resource configurations and allows you to automate the evaluation of recorded configurations against desired compliance rule set. Adds accountability factor. AWS Cloudtrail: Stores logs over all calls made to AWS APIs, coming from web console, command line or any other. Allowing us to monitor it via CW Dashboards and notifications. AWS VPC Flow Logs: Enables us to examine individual Network Interfaces logs, to address network issues and also monitor suspicious behavior. AWS Web Application Firewall: Optional but if not used, it is recommended that a similar service is used, such as Cloudflare. When paired to an Application Load Balancer or Cloudfront distribution, it checks incoming requests to detect and block OWASP Top10 attacks, such as SQL injection, XSS and others. AWS Inspector: Is an automated security assessment service that helps improve the security and compliance of infrastructure and applications deployed on AWS. AWS Guard Duty: Is a managed threat detection service that continuously monitors for malicious or unauthorized behavior to help you protect your AWS accounts and workloads. Detects unusual API calls or potentially unauthorized deployments (possible account compromise) and potentially compromised instances or reconnaissance by attackers. AWS Security Logs Other access logs from client-facing resources will be stored in the Security account. AWS Firewall Manager Is a security management service which allows you to centrally configure and manage firewall rules across your accounts and applications in AWS Organizations. This service lets you build firewall rules, create security policies, and enforce them in a consistent, hierarchical manner across your entire infrastructure, from a central administrator account. Security Layer \u00b6 AWS Firewall Manager \u00b6 Scenarios Network Firewall rules : Security administrators will be able to deploy firewall rules for AWS Network Firewall to control traffic leaving and entering your network across accounts and Amazon VPCs, from the Security account. WAF & WAF v2 : Your security administrators will able to deploy WAF and WAF v2 rules, and Managed rules for WAF to be used on Application Load Balancers, API Gateways and Amazon CloudFront distributions. Route 53 Resolver DNS Firewall rules : Deploy Route 53 Resolver DNS Firewall rules from the Security account to enforce firewall rules across your organization. Audit Security Groups : You can create policies to set guardrails that define what security groups are allowed/disallowed across your VPCs. AWS Firewall Manager continuously monitors security groups to detect overly permissive rules, and helps improve firewall posture. You can get notifications of accounts and resources that are non-compliant or allow AWS Firewall Manager to take action directly through auto-remediation. Security Groups : Use AWS Firewall Manager to create a common primary security group across your EC2 instances in your VPCs. Read More \u00b6 AWS Firewall Manager","title":"Services"},{"location":"how-it-works/features/security/services/#aws-security-compliance-services","text":"Security Directives There will not be any instance port or service port open to general access, unless justified by business reasons, and we\u2019ll take alternative means of security to mitigate any possible risk. Every account will have a set of active services that will allow for administrative users (SecOps) to audit all actions and track potentially dangerous behavior. All services will be enabled via IaC (Terraform or SDK and tracked in the proper git repo). AWS Managed Security Services AWS IAM Access Analyzer: Generates comprehensive findings that identify resources policies for public or cross-account accessibility, monitors and helps you refine permissions. Provides the highest levels of security assurance. AWS Config: Tracks changes made to AWS resources over time, making possible to return to a previous state. Monitors and records your AWS resource configurations and allows you to automate the evaluation of recorded configurations against desired compliance rule set. Adds accountability factor. AWS Cloudtrail: Stores logs over all calls made to AWS APIs, coming from web console, command line or any other. Allowing us to monitor it via CW Dashboards and notifications. AWS VPC Flow Logs: Enables us to examine individual Network Interfaces logs, to address network issues and also monitor suspicious behavior. AWS Web Application Firewall: Optional but if not used, it is recommended that a similar service is used, such as Cloudflare. When paired to an Application Load Balancer or Cloudfront distribution, it checks incoming requests to detect and block OWASP Top10 attacks, such as SQL injection, XSS and others. AWS Inspector: Is an automated security assessment service that helps improve the security and compliance of infrastructure and applications deployed on AWS. AWS Guard Duty: Is a managed threat detection service that continuously monitors for malicious or unauthorized behavior to help you protect your AWS accounts and workloads. Detects unusual API calls or potentially unauthorized deployments (possible account compromise) and potentially compromised instances or reconnaissance by attackers. AWS Security Logs Other access logs from client-facing resources will be stored in the Security account. AWS Firewall Manager Is a security management service which allows you to centrally configure and manage firewall rules across your accounts and applications in AWS Organizations. This service lets you build firewall rules, create security policies, and enforce them in a consistent, hierarchical manner across your entire infrastructure, from a central administrator account.","title":"AWS Security &amp; Compliance Services"},{"location":"how-it-works/features/security/services/#security-layer","text":"","title":"Security Layer"},{"location":"how-it-works/features/security/services/#aws-firewall-manager","text":"Scenarios Network Firewall rules : Security administrators will be able to deploy firewall rules for AWS Network Firewall to control traffic leaving and entering your network across accounts and Amazon VPCs, from the Security account. WAF & WAF v2 : Your security administrators will able to deploy WAF and WAF v2 rules, and Managed rules for WAF to be used on Application Load Balancers, API Gateways and Amazon CloudFront distributions. Route 53 Resolver DNS Firewall rules : Deploy Route 53 Resolver DNS Firewall rules from the Security account to enforce firewall rules across your organization. Audit Security Groups : You can create policies to set guardrails that define what security groups are allowed/disallowed across your VPCs. AWS Firewall Manager continuously monitors security groups to detect overly permissive rules, and helps improve firewall posture. You can get notifications of accounts and resources that are non-compliant or allow AWS Firewall Manager to take action directly through auto-remediation. Security Groups : Use AWS Firewall Manager to create a common primary security group across your EC2 instances in your VPCs.","title":"AWS Firewall Manager"},{"location":"how-it-works/features/security/services/#read-more","text":"AWS Firewall Manager","title":"Read More"},{"location":"how-it-works/features/security/vpn/","text":"VPN Server \u00b6 To securely and scalable privately access AWS Cross Organization resources we\u2019ll implement Pritunl VPN Server \u00b6 Security Directives Private HTTP endpoints for Applications (FrontEnd + APIs), SSH, monitoring & logging (UI / Dashboards) among others. Eg: Jenkins, DroneCI, EFK, Prometheus, Spinnaker, Grafana. K8s API via kubectl private endpoint eg: avoiding emergency K8s API vulnerability patching. Limit exposure: Limit the exposure of the workload to the internet and internal networks by only allowing minimum required access -> Avoiding exposure for Dev/QA/Stg http endpoints The Pritunl OpenVPN Linux instance is hardened and only runs this VPN solution. All other ports/access is restricted. Each VPN user can be required to use MFA to connect via VPN (as well as strong passwords). This combination makes almost impossible for an outsider to gain access via VPN. Centralized access and audit logs. Figure: Securing access to a private network with Pritunl diagram. (Source: Pritunl, \"Accessing a Private Network\" , Pritunl documentation v1 Guides, accessed November 17th 2020). Read More \u00b6 Pritunl - Open Source Enterprise Distributed OpenVPN, IPsec and WireGuard Server Specifications","title":"VPN"},{"location":"how-it-works/features/security/vpn/#vpn-server","text":"","title":"VPN Server"},{"location":"how-it-works/features/security/vpn/#to-securely-and-scalable-privately-access-aws-cross-organization-resources-well-implement-pritunl-vpn-server","text":"Security Directives Private HTTP endpoints for Applications (FrontEnd + APIs), SSH, monitoring & logging (UI / Dashboards) among others. Eg: Jenkins, DroneCI, EFK, Prometheus, Spinnaker, Grafana. K8s API via kubectl private endpoint eg: avoiding emergency K8s API vulnerability patching. Limit exposure: Limit the exposure of the workload to the internet and internal networks by only allowing minimum required access -> Avoiding exposure for Dev/QA/Stg http endpoints The Pritunl OpenVPN Linux instance is hardened and only runs this VPN solution. All other ports/access is restricted. Each VPN user can be required to use MFA to connect via VPN (as well as strong passwords). This combination makes almost impossible for an outsider to gain access via VPN. Centralized access and audit logs. Figure: Securing access to a private network with Pritunl diagram. (Source: Pritunl, \"Accessing a Private Network\" , Pritunl documentation v1 Guides, accessed November 17th 2020).","title":"To securely and scalable privately access AWS Cross Organization resources we\u2019ll implement Pritunl VPN Server"},{"location":"how-it-works/features/security/vpn/#read-more","text":"Pritunl - Open Source Enterprise Distributed OpenVPN, IPsec and WireGuard Server Specifications","title":"Read More"},{"location":"how-it-works/features/sso/sso/","text":"AWS SSO \u00b6 Single Sign-On (SSO) \u00b6 JumpCloud will be configured as the Identity Provider (IdP) that we will integrate with AWS SSO in order to grant users access to AWS resources from a centralized service. Users will be able to log in to JumpCloud in order to access AWS accounts, using specific permission sets that will in turn determine what kind of actions they are allowed on AWS resources. Figure: AWS Organization with SSO + JumpCloud IdP diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture components\", Binbash Leverage Doc, accessed January 4th 2022). SSO Strengths \u00b6 100% cloud-based Secure directory services Unified device management SSO and user lifecycle management Secure app and server authentication with cloud LDAP Event logging, reporting, and monitoring SSO Users \u00b6 Users will be defined in JumpCloud and used for deploying AWS resources with scoped permissions. SSO Groups \u00b6 Account / Groups Administrators DevOps FinOps SecurityAuditors Management x x x x Consideration This definition could be fully customized based on the project specific needs SSO Permission Sets (w/ Account Associations) \u00b6 Account / Permission Sets Administrator DevOps FinOps SecurityAuditors Management x x Security x x x Shared x x x Network x x x Apps-DevStg x x x Apps-Prd x x x Considerations Devops Engineers will assume this permission set through JumpCloud + AWS SSO. Developers could have their specific SSO Group + Permission Set policy association. This definition could be fully customized based on the project specific needs","title":"SSO"},{"location":"how-it-works/features/sso/sso/#aws-sso","text":"","title":"AWS SSO"},{"location":"how-it-works/features/sso/sso/#single-sign-on-sso","text":"JumpCloud will be configured as the Identity Provider (IdP) that we will integrate with AWS SSO in order to grant users access to AWS resources from a centralized service. Users will be able to log in to JumpCloud in order to access AWS accounts, using specific permission sets that will in turn determine what kind of actions they are allowed on AWS resources. Figure: AWS Organization with SSO + JumpCloud IdP diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture components\", Binbash Leverage Doc, accessed January 4th 2022).","title":"Single Sign-On (SSO)"},{"location":"how-it-works/features/sso/sso/#sso-strengths","text":"100% cloud-based Secure directory services Unified device management SSO and user lifecycle management Secure app and server authentication with cloud LDAP Event logging, reporting, and monitoring","title":"SSO Strengths"},{"location":"how-it-works/features/sso/sso/#sso-users","text":"Users will be defined in JumpCloud and used for deploying AWS resources with scoped permissions.","title":"SSO Users"},{"location":"how-it-works/features/sso/sso/#sso-groups","text":"Account / Groups Administrators DevOps FinOps SecurityAuditors Management x x x x Consideration This definition could be fully customized based on the project specific needs","title":"SSO Groups"},{"location":"how-it-works/features/sso/sso/#sso-permission-sets-w-account-associations","text":"Account / Permission Sets Administrator DevOps FinOps SecurityAuditors Management x x Security x x x Shared x x x Network x x x Apps-DevStg x x x Apps-Prd x x x Considerations Devops Engineers will assume this permission set through JumpCloud + AWS SSO. Developers could have their specific SSO Group + Permission Set policy association. This definition could be fully customized based on the project specific needs","title":"SSO Permission Sets (w/ Account Associations)"},{"location":"how-it-works/features/storage/storage/","text":"Storage \u00b6 We will review all S3 buckets in the existing account to determine if it\u2019s necessary to copy over to the new account, evaluate existing bucket policy and tightening permissions to be absolutely minimum required for users and applications. As for EBS volumes, our recommendation is to create all encrypted by default. Overhead created by this process is negligible. S3 buckets \u00b6 Tech specs Encryption: Yes (by default) Object versioning: TBD per bucket Access logs enabled: TBD per bucket MFA delete: Yes on critical buckets Replication to another region: TBD per bucket Storage class Designed for Durability (designed for) Availability (designed for) Availability Zones Min storage duration Min billable object size Other considerations S3 Standard Frequently accessed data 99.999999999% 99.99% >= 3 None None None S3 Standard-IA Long-lived, infrequently accessed data 99.999999999% 99.9% >= 3 30 days 128 KB Per GB retrieval fees apply. S3 Intelligent-Tiering Long-lived data with changing or unknown access patterns 99.999999999% 99.9% >= 3 30 days None Monitoring and automation fees per object apply. No retrieval fees. S3 One Zone-IA Long-lived, infrequently accessed, non-critical data 99.999999999% 99.5% 1 30 days 128 KB Per GB retrieval fees apply. Not resilient to the loss of the Availability Zone. S3 Glacier Long-term data archiving with retrieval times ranging from minutes to hours 99.999999999% 99.99% (after you restore objects) >= 3 90 days 40 KB Per GB retrieval fees apply. You must first restore archived objects before you can access them. For more information, see Restoring archived objects. S3 Glacier Deep Archive Archiving rarely accessed data with a default retrieval time of 12 hours 99.999999999% 99.99% (after you restore objects) >= 3 180 days 40 KB Per GB retrieval fees apply. You must first restore archived objects before you can access them. For more information, see Restoring archived objects. RRS (Not recommended) Frequently accessed, non-critical data 99.99% 99.99% >= 3 None None None EBS Volumes \u00b6 Tech specs Backups: Periodic EBS snapshots with retention policy Encryption: Yes (by default) Type: SSD (gp2) by default, Throughput Optimized HDD (st1) for some database workloads, if needed. Read more \u00b6 Reference links Consider the following extra links as reference: Amazon S3 FAQs Amazon S3 storage classes - Developer Guide Amazon S3 Storage Classes","title":"Storage"},{"location":"how-it-works/features/storage/storage/#storage","text":"We will review all S3 buckets in the existing account to determine if it\u2019s necessary to copy over to the new account, evaluate existing bucket policy and tightening permissions to be absolutely minimum required for users and applications. As for EBS volumes, our recommendation is to create all encrypted by default. Overhead created by this process is negligible.","title":"Storage"},{"location":"how-it-works/features/storage/storage/#s3-buckets","text":"Tech specs Encryption: Yes (by default) Object versioning: TBD per bucket Access logs enabled: TBD per bucket MFA delete: Yes on critical buckets Replication to another region: TBD per bucket Storage class Designed for Durability (designed for) Availability (designed for) Availability Zones Min storage duration Min billable object size Other considerations S3 Standard Frequently accessed data 99.999999999% 99.99% >= 3 None None None S3 Standard-IA Long-lived, infrequently accessed data 99.999999999% 99.9% >= 3 30 days 128 KB Per GB retrieval fees apply. S3 Intelligent-Tiering Long-lived data with changing or unknown access patterns 99.999999999% 99.9% >= 3 30 days None Monitoring and automation fees per object apply. No retrieval fees. S3 One Zone-IA Long-lived, infrequently accessed, non-critical data 99.999999999% 99.5% 1 30 days 128 KB Per GB retrieval fees apply. Not resilient to the loss of the Availability Zone. S3 Glacier Long-term data archiving with retrieval times ranging from minutes to hours 99.999999999% 99.99% (after you restore objects) >= 3 90 days 40 KB Per GB retrieval fees apply. You must first restore archived objects before you can access them. For more information, see Restoring archived objects. S3 Glacier Deep Archive Archiving rarely accessed data with a default retrieval time of 12 hours 99.999999999% 99.99% (after you restore objects) >= 3 180 days 40 KB Per GB retrieval fees apply. You must first restore archived objects before you can access them. For more information, see Restoring archived objects. RRS (Not recommended) Frequently accessed, non-critical data 99.99% 99.99% >= 3 None None None","title":"S3 buckets"},{"location":"how-it-works/features/storage/storage/#ebs-volumes","text":"Tech specs Backups: Periodic EBS snapshots with retention policy Encryption: Yes (by default) Type: SSD (gp2) by default, Throughput Optimized HDD (st1) for some database workloads, if needed.","title":"EBS Volumes"},{"location":"how-it-works/features/storage/storage/#read-more","text":"Reference links Consider the following extra links as reference: Amazon S3 FAQs Amazon S3 storage classes - Developer Guide Amazon S3 Storage Classes","title":"Read more"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library-forks/","text":"Leverage Open Source Modules management. \u00b6 We\u2019ll fork every Infrastructure as Code (IaC) Library dependency repo, why? Grant full governance over the lib repositories Availability: Since our project resilience and continuity (including the clients) depends on this repositories (via requirement files or imports) and we want and need total control over the repository used as a dependency. NOTE: There could be few exceptions when using official open source modules such as the ones shared and maintained by Nginx, Weave, Hashiport, etc. Reliability (Avoid unforeseen events): in the event that the original project becomes discontinued while we are still working or depending on it (the owners, generally individual maintainers of the original repository might decide to move from github, ansible galaxy, etc or even close their repo for personal reasons). Stability: Our forks form modules (ansible roles / terraform / dockerfiles, etc) are always going to be locked to fixed versions for every client so no unexpected behavior will occur. Projects that don't tag versions: having the fork protects us against breaking changes. Write access: to every Leverage library component repository ensuring at all times that we can support, update, maintain, test, customize and release a new version of this component. Centralized Org source of truth: for improved customer experience and keeping dependencies consistently imported from binbash repos at Leverage Github Scope: Binbash grants and responds for all this dependencies. Metrics: Dashboards w/ internal measurements. Automation: We\u2019ll maintain all this workflow cross-tech as standardized and automated as possible adding any extra validation like testing, security check, etc if needed -> Leverage dev-tools Licence & Ownership: Since we fork open-source and commercially reusable components w/ MIT and Apache 2.0 license . We keep full rights to all commercial, modification, distribution, and private use of the code (No Lock-In w/ owners) through forks inside our own Leverage Project repos. As a result, when time comes, we can make our libs private at any moment if necessary for the time being Open Source looks like the best option). Collaborators considerations We look forward to have every Binbash Leverage repo open sourced favoring the collaboration of the open source community. Repos that are still private must not be forked by our internal collaborators till we've done a detailed and rigorous review in order to open source them. As a result any person looking forward to use, extend or update Leverage public repos could also fork them in its personal or company Github account and create an upstream PR to contribute.","title":"Forks workflow"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library-forks/#leverage-open-source-modules-management","text":"We\u2019ll fork every Infrastructure as Code (IaC) Library dependency repo, why? Grant full governance over the lib repositories Availability: Since our project resilience and continuity (including the clients) depends on this repositories (via requirement files or imports) and we want and need total control over the repository used as a dependency. NOTE: There could be few exceptions when using official open source modules such as the ones shared and maintained by Nginx, Weave, Hashiport, etc. Reliability (Avoid unforeseen events): in the event that the original project becomes discontinued while we are still working or depending on it (the owners, generally individual maintainers of the original repository might decide to move from github, ansible galaxy, etc or even close their repo for personal reasons). Stability: Our forks form modules (ansible roles / terraform / dockerfiles, etc) are always going to be locked to fixed versions for every client so no unexpected behavior will occur. Projects that don't tag versions: having the fork protects us against breaking changes. Write access: to every Leverage library component repository ensuring at all times that we can support, update, maintain, test, customize and release a new version of this component. Centralized Org source of truth: for improved customer experience and keeping dependencies consistently imported from binbash repos at Leverage Github Scope: Binbash grants and responds for all this dependencies. Metrics: Dashboards w/ internal measurements. Automation: We\u2019ll maintain all this workflow cross-tech as standardized and automated as possible adding any extra validation like testing, security check, etc if needed -> Leverage dev-tools Licence & Ownership: Since we fork open-source and commercially reusable components w/ MIT and Apache 2.0 license . We keep full rights to all commercial, modification, distribution, and private use of the code (No Lock-In w/ owners) through forks inside our own Leverage Project repos. As a result, when time comes, we can make our libs private at any moment if necessary for the time being Open Source looks like the best option). Collaborators considerations We look forward to have every Binbash Leverage repo open sourced favoring the collaboration of the open source community. Repos that are still private must not be forked by our internal collaborators till we've done a detailed and rigorous review in order to open source them. As a result any person looking forward to use, extend or update Leverage public repos could also fork them in its personal or company Github account and create an upstream PR to contribute.","title":"Leverage Open Source Modules management."},{"location":"how-it-works/infra-as-code-library/infra-as-code-library-specs/","text":"Tech Specifications \u00b6 As Code: Hundred of thousands lines of code Written in: - [x] Terraform - [x] Groovy (Jenkinsfiles) - [x] Ansible - [x] Makefiles + Bash - [x] Dockerfiles - [x] Helm Charts Stop reinventing the wheel, automated and fully as code automated (executable from a single source). as code. parameterized variables input parameters return / output parameters \"Stop reinventing the wheel\" avoid re-building the same things more than X times. avoid wasting time. not healthy, not secure and slows us down. DoD of a highly reusable, configurable, and composible sub-modules Which will be 100% - modular - equivalent to other programming languages functions - Example for terraform - https://www.terraform.io/docs/modules/usage.html (but can be propagated for other languages and tools): 1. inputs, outputs parameters. 2. code reuse (reusable): consider tf modules and sub-modules approach. 3. testable by module / function. 1. Since TF it's oriented to work through 3 rd party API calls, then tests are more likely to be integration tests rather than unit tests . If we don't allow integration for terraform then we can't work at all. 1. This has to be analyzed for every language we'll be using and how we implement it (terraform, cloudformation, ansible, python, bash, docker, kops and k8s kubeclt cmds) 4. composition (composable): have multiple functions and use it together 2. eg: def_add(x,y){return x+y} ; def_sub(x,y){return x-y}; sub(add(3,4), add(7,5)) 5. abstraction (abstract away complexity): we have a very complex function but we only expose it's definition to the API, eg: def_ai_processing(data_set){very complex algorithm here}; ai_processing([our_data_set_here]) 6. Avoid inline: blocks The configuration for some Terraform resources can be defined either as inline blocks or as separate resources. When creating a module, you should always use a separate resource. For example, the aws_route_table resource allows you to define routes via inline blocks. Otherwise, your module will be less flexible and configurable. So If you try to use a mix of both inline blocks and separate resources, you run into bugs where they will conflict and overwrite each other. Therefore, you must use one or the other (ref: https://blog.gruntwork.io/how-to-create-reusable-infrastructure-with-terraform-modules-25526d65f73d )) 7. Use module-relative paths: The catch is that the file path you use has to be relative (since you could run Terraform on many different computers)\u200a\u2014\u200abut what is it relative to? By default, Terraform interprets the path relative to the working directory. That\u2019s a good default for normal Terraform templates, but it won\u2019t work if the file is part of a module. To solve this issue, always use a path variable in file paths. eg: resource \"aws_instance\" \"example\" { ami = \"ami-2d39803a\" instance_type = \"t2.micro\" user_data = \"${file(\"${path.module}/user-data.sh\")}\" } Solutions must be versioned So as to be able to manage them as a software product with releases and change log. In this way we'll be able to know which version is currently deployed in a certain client and consider it's upgrade. Env Parity Promote immutable, versioned infra modules based across envs. Updated Continually make updates, additions, and fixes to the libraries and modules. Orchestrated in automation We use the leverage-cli for this purpose Proven & Tested Customers & every commit goes through a suite of automated tests to gran code styling and functional testing . * [ x ] Develop a wrapper / jobs together with specific testing tools in order to grant the modules are working as expected . * [ x ] Ansible : * [ Testing your ansible roles w/ molecule ] ( https : // www . jeffgeerling . com / blog / 2018 / testing - your - ansible - roles - molecule ) * [ How to test ansible roles with molecule on ubuntu ] ( https : // www . digitalocean . com / community / tutorials / how - to - test - ansible - roles - with - molecule - on - ubuntu - 16 - 04 ) * [ x ] Terraform : * [ gruntwork-io/terratest ] ( https : // github . com / gruntwork - io / terratest ) Cost savings by design The architecture for our Library / Code Modules helps an organization to analyze its current IT and DevSecOps Cloud strategy and identify areas where changes could lead to cost savings. For instance, the architecture may show that multiple database systems could be changed so only one product is used, reducing software and support costs. Provides a basis for reuse. The process of architecting can support both the use and creation of reusable assets. Reusable assets are beneficial to an organization, since they can reduce the overall cost of a system and also improve its quality, given that a reusable asset has already been proven. Full Code Access & No Lock-In You get access to 100% of the code under Open Source license ( https://choosealicense.com/ ) so If you ever choose to cancel, you keep rights to all the code. Documented Includes example code, use case and thorough documentation, such as README.md , --help command, doc-string and in line comments. Supported & Customizable Commercially maintained and supported by Binbash .","title":"Specifications"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library-specs/#tech-specifications","text":"As Code: Hundred of thousands lines of code Written in: - [x] Terraform - [x] Groovy (Jenkinsfiles) - [x] Ansible - [x] Makefiles + Bash - [x] Dockerfiles - [x] Helm Charts Stop reinventing the wheel, automated and fully as code automated (executable from a single source). as code. parameterized variables input parameters return / output parameters \"Stop reinventing the wheel\" avoid re-building the same things more than X times. avoid wasting time. not healthy, not secure and slows us down. DoD of a highly reusable, configurable, and composible sub-modules Which will be 100% - modular - equivalent to other programming languages functions - Example for terraform - https://www.terraform.io/docs/modules/usage.html (but can be propagated for other languages and tools): 1. inputs, outputs parameters. 2. code reuse (reusable): consider tf modules and sub-modules approach. 3. testable by module / function. 1. Since TF it's oriented to work through 3 rd party API calls, then tests are more likely to be integration tests rather than unit tests . If we don't allow integration for terraform then we can't work at all. 1. This has to be analyzed for every language we'll be using and how we implement it (terraform, cloudformation, ansible, python, bash, docker, kops and k8s kubeclt cmds) 4. composition (composable): have multiple functions and use it together 2. eg: def_add(x,y){return x+y} ; def_sub(x,y){return x-y}; sub(add(3,4), add(7,5)) 5. abstraction (abstract away complexity): we have a very complex function but we only expose it's definition to the API, eg: def_ai_processing(data_set){very complex algorithm here}; ai_processing([our_data_set_here]) 6. Avoid inline: blocks The configuration for some Terraform resources can be defined either as inline blocks or as separate resources. When creating a module, you should always use a separate resource. For example, the aws_route_table resource allows you to define routes via inline blocks. Otherwise, your module will be less flexible and configurable. So If you try to use a mix of both inline blocks and separate resources, you run into bugs where they will conflict and overwrite each other. Therefore, you must use one or the other (ref: https://blog.gruntwork.io/how-to-create-reusable-infrastructure-with-terraform-modules-25526d65f73d )) 7. Use module-relative paths: The catch is that the file path you use has to be relative (since you could run Terraform on many different computers)\u200a\u2014\u200abut what is it relative to? By default, Terraform interprets the path relative to the working directory. That\u2019s a good default for normal Terraform templates, but it won\u2019t work if the file is part of a module. To solve this issue, always use a path variable in file paths. eg: resource \"aws_instance\" \"example\" { ami = \"ami-2d39803a\" instance_type = \"t2.micro\" user_data = \"${file(\"${path.module}/user-data.sh\")}\" } Solutions must be versioned So as to be able to manage them as a software product with releases and change log. In this way we'll be able to know which version is currently deployed in a certain client and consider it's upgrade. Env Parity Promote immutable, versioned infra modules based across envs. Updated Continually make updates, additions, and fixes to the libraries and modules. Orchestrated in automation We use the leverage-cli for this purpose Proven & Tested Customers & every commit goes through a suite of automated tests to gran code styling and functional testing . * [ x ] Develop a wrapper / jobs together with specific testing tools in order to grant the modules are working as expected . * [ x ] Ansible : * [ Testing your ansible roles w/ molecule ] ( https : // www . jeffgeerling . com / blog / 2018 / testing - your - ansible - roles - molecule ) * [ How to test ansible roles with molecule on ubuntu ] ( https : // www . digitalocean . com / community / tutorials / how - to - test - ansible - roles - with - molecule - on - ubuntu - 16 - 04 ) * [ x ] Terraform : * [ gruntwork-io/terratest ] ( https : // github . com / gruntwork - io / terratest ) Cost savings by design The architecture for our Library / Code Modules helps an organization to analyze its current IT and DevSecOps Cloud strategy and identify areas where changes could lead to cost savings. For instance, the architecture may show that multiple database systems could be changed so only one product is used, reducing software and support costs. Provides a basis for reuse. The process of architecting can support both the use and creation of reusable assets. Reusable assets are beneficial to an organization, since they can reduce the overall cost of a system and also improve its quality, given that a reusable asset has already been proven. Full Code Access & No Lock-In You get access to 100% of the code under Open Source license ( https://choosealicense.com/ ) so If you ever choose to cancel, you keep rights to all the code. Documented Includes example code, use case and thorough documentation, such as README.md , --help command, doc-string and in line comments. Supported & Customizable Commercially maintained and supported by Binbash .","title":"Tech Specifications"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library/","text":"Leverage Infrastructure as Code (IaC) Library \u00b6 Overview \u00b6 A collection of reusable, tested, production-ready E2E infrastructure as code solutions, leveraged by modules written in Terraform, Ansible, Jenkinsfiles, Dockerfiles, Helm charts and Makefiles). Model \u00b6 Our development model is strongly based on code reusability Reusability \u00b6 High level summary of the the code reusability efficiency Considerations Above detailed % are to be seen as estimates AWS PCI-DSS Reference article AWS HIPAA Reference article AWS GDPR Reference article Modules \u00b6 Infrastructure as Code (IaC) Library development and implementation workflow","title":"Overview"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library/#leverage-infrastructure-as-code-iac-library","text":"","title":"Leverage Infrastructure as Code (IaC) Library"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library/#overview","text":"A collection of reusable, tested, production-ready E2E infrastructure as code solutions, leveraged by modules written in Terraform, Ansible, Jenkinsfiles, Dockerfiles, Helm charts and Makefiles).","title":"Overview"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library/#model","text":"Our development model is strongly based on code reusability","title":"Model"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library/#reusability","text":"High level summary of the the code reusability efficiency Considerations Above detailed % are to be seen as estimates AWS PCI-DSS Reference article AWS HIPAA Reference article AWS GDPR Reference article","title":"Reusability"},{"location":"how-it-works/infra-as-code-library/infra-as-code-library/#modules","text":"Infrastructure as Code (IaC) Library development and implementation workflow","title":"Modules"},{"location":"how-it-works/infra-as-code-library/modules-library-per-tech/","text":"Infrastructure as Code (IaC) library modules \u00b6 Open Source Modules Repos \u00b6 Category URLs Ansible Galaxy Roles bb-leverage-ansible-roles-list Dockerfiles bb-leverage-dockerfiles-list Helm Charts bb-leverage-helm-charts-list Jenkinsfiles Library bb-leverage-jenkinsfiles-lib Terraform Modules bb-leverage-terraform-modules-list Open Source + Private Modules Repos (via GitHub Teams) \u00b6 Repositories Details Reference Architecture Most of the AWS resources are here, divided by account. Dockerfiles These are Terraform module we created/imported to build reusable resources / stacks. Ansible Playbooks & Roles Playbooks we use for provisioning servers such as Jenkins, Spinnaker, Vault, and so on. Jenkins Modules Module we use in our Jenkins pipelines to perform repeated tasks such as posting to Slack, interacting with AWS CLI, etc. Helm Charts Complementary Jenkins pipelines to clean docker images, unseal Vault, and more. Also SecOps jobs can be found here. Terraform Modules Jenkins pipelines, docker images, and other resources used for load testing.","title":"Modules per Tech"},{"location":"how-it-works/infra-as-code-library/modules-library-per-tech/#infrastructure-as-code-iac-library-modules","text":"","title":"Infrastructure as Code (IaC) library modules"},{"location":"how-it-works/infra-as-code-library/modules-library-per-tech/#open-source-modules-repos","text":"Category URLs Ansible Galaxy Roles bb-leverage-ansible-roles-list Dockerfiles bb-leverage-dockerfiles-list Helm Charts bb-leverage-helm-charts-list Jenkinsfiles Library bb-leverage-jenkinsfiles-lib Terraform Modules bb-leverage-terraform-modules-list","title":"Open Source Modules Repos"},{"location":"how-it-works/infra-as-code-library/modules-library-per-tech/#open-source-private-modules-repos-via-github-teams","text":"Repositories Details Reference Architecture Most of the AWS resources are here, divided by account. Dockerfiles These are Terraform module we created/imported to build reusable resources / stacks. Ansible Playbooks & Roles Playbooks we use for provisioning servers such as Jenkins, Spinnaker, Vault, and so on. Jenkins Modules Module we use in our Jenkins pipelines to perform repeated tasks such as posting to Slack, interacting with AWS CLI, etc. Helm Charts Complementary Jenkins pipelines to clean docker images, unseal Vault, and more. Also SecOps jobs can be found here. Terraform Modules Jenkins pipelines, docker images, and other resources used for load testing.","title":"Open Source + Private Modules Repos (via GitHub Teams)"},{"location":"how-it-works/leverage-cli/","text":"Leverage CLI \u00b6 Leverage CLI is the tool used to manage and interact with any Leverage project. It transparently handles the most complex and error prone tasks that arise from working with a state-of-the-art infrastructure definition like our Leverage Reference Architecture. Leverage CLI uses a dockerized approach to encapsulate the tools needed to perform such tasks and to free the user from having to deal with the configuration and management of said tools. Leverage CLI Documentation Sources \u00b6 leverage-cli github leverage-cli pypi How Leverage CLI came about \u00b6 The multiple tools and technologies required to work with a Leverage project were initially handled through a Makefiles system. Not only to automate and simplify the different tasks, but also to provide a uniform user experience during the management of a project. As a result of more and more features being added and the Leverage Reference Architecture becoming broader and broader, our Makefiles were growing large and becoming too repetitive, and thus, harder to maintain. Also, some limitations and the desire for a more friendly and flexible language than that of Makefiles made evident the need for a new tool to take their place. Python, a language broadly adopted for automation due to its flexibility and a very gentle learning curve seemed ideal. Even more so, Pynt, a package that provides the ability to define and manage tasks as simple Python functions satisfied most of our requirements, and thus, was selected for the job. Some gaps still remained but with minor modifications these were bridged. Gradually, all capabilities originally implemented through Makefiles were migrated to Python as libraries of tasks that still resided within the Leverage Reference Architecture. But soon, the need to deliver these capabilities pre-packaged in a tool instead of embedded in the infrastructure definition became apparent, and were re-implemented in the shape of built-in commands of Leverage CLI. Currently, the core functionality needed to interact with a Leverage project is native to Leverage CLI but a system for custom tasks definition and execution heavily inspired in that of Pynt is retained.","title":"Leverage CLI"},{"location":"how-it-works/leverage-cli/#leverage-cli","text":"Leverage CLI is the tool used to manage and interact with any Leverage project. It transparently handles the most complex and error prone tasks that arise from working with a state-of-the-art infrastructure definition like our Leverage Reference Architecture. Leverage CLI uses a dockerized approach to encapsulate the tools needed to perform such tasks and to free the user from having to deal with the configuration and management of said tools. Leverage CLI Documentation","title":"Leverage CLI"},{"location":"how-it-works/leverage-cli/#sources","text":"leverage-cli github leverage-cli pypi","title":"Sources"},{"location":"how-it-works/leverage-cli/#how-leverage-cli-came-about","text":"The multiple tools and technologies required to work with a Leverage project were initially handled through a Makefiles system. Not only to automate and simplify the different tasks, but also to provide a uniform user experience during the management of a project. As a result of more and more features being added and the Leverage Reference Architecture becoming broader and broader, our Makefiles were growing large and becoming too repetitive, and thus, harder to maintain. Also, some limitations and the desire for a more friendly and flexible language than that of Makefiles made evident the need for a new tool to take their place. Python, a language broadly adopted for automation due to its flexibility and a very gentle learning curve seemed ideal. Even more so, Pynt, a package that provides the ability to define and manage tasks as simple Python functions satisfied most of our requirements, and thus, was selected for the job. Some gaps still remained but with minor modifications these were bridged. Gradually, all capabilities originally implemented through Makefiles were migrated to Python as libraries of tasks that still resided within the Leverage Reference Architecture. But soon, the need to deliver these capabilities pre-packaged in a tool instead of embedded in the infrastructure definition became apparent, and were re-implemented in the shape of built-in commands of Leverage CLI. Currently, the core functionality needed to interact with a Leverage project is native to Leverage CLI but a system for custom tasks definition and execution heavily inspired in that of Pynt is retained.","title":"How Leverage CLI came about"},{"location":"how-it-works/ref-architecture/","text":"How it works \u00b6 The objective of this document is to explain how the Binbash Leverage Reference Architecture for AWS works, in particular how the Reference Architecture model is built and why we need it. Overview \u00b6 This documentation contains all the guidelines to create Binbash Leverage Reference Architecture for AWS that will be implemented on the Projects\u2019 AWS infrastructure. We're assuming you've already have in place your AWS Landing Zone based on the First Steps guide. Our Purpose Democratize advanced technologies: As complex as it may sound, the basic idea behind this design principle is simple. It is not always possible for a business to maintain a capable in-house IT department while staying up to date. It is entirely feasible to set up your own cloud computing ecosystem from scratch without experience, but that would take a considerable amount of resources; it is definitely not the most efficient way to go. An efficient business-minded way to go is to employ AWS as a service allows organizations to benefit from the advanced technologies integrated into AWS without learning, researching, or creating teams specifically for those technologies. Info This documentation will provide a detailed reference of the tools and techs used, the needs they address and how they fit with the multiple practices we will be implementing.","title":"Overview"},{"location":"how-it-works/ref-architecture/#how-it-works","text":"The objective of this document is to explain how the Binbash Leverage Reference Architecture for AWS works, in particular how the Reference Architecture model is built and why we need it.","title":"How it works"},{"location":"how-it-works/ref-architecture/#overview","text":"This documentation contains all the guidelines to create Binbash Leverage Reference Architecture for AWS that will be implemented on the Projects\u2019 AWS infrastructure. We're assuming you've already have in place your AWS Landing Zone based on the First Steps guide. Our Purpose Democratize advanced technologies: As complex as it may sound, the basic idea behind this design principle is simple. It is not always possible for a business to maintain a capable in-house IT department while staying up to date. It is entirely feasible to set up your own cloud computing ecosystem from scratch without experience, but that would take a considerable amount of resources; it is definitely not the most efficient way to go. An efficient business-minded way to go is to employ AWS as a service allows organizations to benefit from the advanced technologies integrated into AWS without learning, researching, or creating teams specifically for those technologies. Info This documentation will provide a detailed reference of the tools and techs used, the needs they address and how they fit with the multiple practices we will be implementing.","title":"Overview"},{"location":"how-it-works/ref-architecture/considerations/","text":"Important Considerations \u00b6 Assumptions AWS Regions: Multi Region setup \u2192 1ry: us-east-1 (N. Virginia) & 2ry: us-west-2 (Oregon). Repositories & Branching Strategy DevOps necessary repositories will be created. Consultant will use a trunk-based branching strategy with short-lived feature branches ( feature/ID-XXX -> `master), and members from either the Consultant or the Client will be reviewers of every code delivery to said repositories (at least 1 approver per Pull Request). Infra as code deployments should run from the new feature/ID-XXX or master branch. feature/ID-XXX branch must be merged immediately (ASAP) via PR to the master branch. Consideration: validating that the changes within the code will only affect the desired target resources is the responsibility of the executor (to ensure everything is OK please consider exec after review/approved PR). Infra as Code + GitOps After deployment via IaC (Terraform, Ansible & Helm) all subsequent changes will be performed via versioned controlled code, by modifying the corresponding repository and running the proper IaC Automation execution. All AWS resources will be deployed via Terraform and rarely occasional CloudFormation, Python SDK & AWS CLI when the resource is not defined by Terraform (almost none scenario). All code and scripts will be included in the repository. We'll start the process via Local Workstations. Afterwards full exec automation will be considered via: Github Actions, ,Gitlab Pipelines or equivalent preferred service. Consideration: Note that any change manually performed will generate inconsistencies on the deployed resources (which left them out of governance and support scope). Server OS provisioning : Provisioning via Ansible for resources that need to be provisioned on an OS. Containers Orchestration: Orchestration via Terraform + Helm Charts for resources that need to be provisioned in Kubernetes (with Docker as preferred container engine). Pre-existing AWS Accounts: All resources will be deployed in several new AWS accounts created inside the Client AWS Organization. Except for the AWS Legacy Account invitation to the AWS Org and OrganizationAccountAccessRole creation in it, there will be no intervention whatsoever in Client Pre-existing accounts, unless required by Client authority and given a specific requirement. Info We will explore the details of all the relevant Client application stacks, CI/CD processes, monitoring, security, target service level objective (SLO) and others in a separate document.","title":"Considerations"},{"location":"how-it-works/ref-architecture/considerations/#important-considerations","text":"Assumptions AWS Regions: Multi Region setup \u2192 1ry: us-east-1 (N. Virginia) & 2ry: us-west-2 (Oregon). Repositories & Branching Strategy DevOps necessary repositories will be created. Consultant will use a trunk-based branching strategy with short-lived feature branches ( feature/ID-XXX -> `master), and members from either the Consultant or the Client will be reviewers of every code delivery to said repositories (at least 1 approver per Pull Request). Infra as code deployments should run from the new feature/ID-XXX or master branch. feature/ID-XXX branch must be merged immediately (ASAP) via PR to the master branch. Consideration: validating that the changes within the code will only affect the desired target resources is the responsibility of the executor (to ensure everything is OK please consider exec after review/approved PR). Infra as Code + GitOps After deployment via IaC (Terraform, Ansible & Helm) all subsequent changes will be performed via versioned controlled code, by modifying the corresponding repository and running the proper IaC Automation execution. All AWS resources will be deployed via Terraform and rarely occasional CloudFormation, Python SDK & AWS CLI when the resource is not defined by Terraform (almost none scenario). All code and scripts will be included in the repository. We'll start the process via Local Workstations. Afterwards full exec automation will be considered via: Github Actions, ,Gitlab Pipelines or equivalent preferred service. Consideration: Note that any change manually performed will generate inconsistencies on the deployed resources (which left them out of governance and support scope). Server OS provisioning : Provisioning via Ansible for resources that need to be provisioned on an OS. Containers Orchestration: Orchestration via Terraform + Helm Charts for resources that need to be provisioned in Kubernetes (with Docker as preferred container engine). Pre-existing AWS Accounts: All resources will be deployed in several new AWS accounts created inside the Client AWS Organization. Except for the AWS Legacy Account invitation to the AWS Org and OrganizationAccountAccessRole creation in it, there will be no intervention whatsoever in Client Pre-existing accounts, unless required by Client authority and given a specific requirement. Info We will explore the details of all the relevant Client application stacks, CI/CD processes, monitoring, security, target service level objective (SLO) and others in a separate document.","title":"Important Considerations"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/","text":"Reference Architecture \u00b6 Overview Reference Architecture for AWS has been designed under optimal configs for the most popular modern web and mobile applications needs. Its design is fully based on AWS \u201cWell Architected Framework\u201d . Reusing the Leverage Infrastructure as Code (IaC) Library via leverage cli to rapidly implement it. It will solve your entire infrastructure and will grant you complete control of the source code and of course you'll be able to run it without us. Structural concepts \u00b6 The Reference Architecture is designed with modularity in mind. A multi-accounts approach is leveraged in order to improve security isolation and resources separation. Furthermore each account infrastructure is divided in smaller units that we call layers . Each layer contains all the required resources and definitions for a specific service or feature to function. Each individual configuration of the Reference Architecture is referred to as a project . A Leverage project is comprised of all the relevant accounts and layers. Reference Architecture Model \u00b6 Strengths Faster updates (new features and bug fixes). Better code quality and modules maturity (proven and tested). Supported by Binbash, and public modules even by 1000's of top talented Open Source community contributors. Increase development cost savings. Clients keep full rights to all commercial, modification, distribution, and private use of the code (No Lock-In) through forks inside their own projects' repositories (open-source and commercially reusable via license MIT and Apache 2.0 . Reference Architecture Design \u00b6 AWS Organizations multi-account diagram \u00b6 Figure: AWS Organization multi-account reference architecture diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture components\", Binbash Leverage Doc, accessed August 4th 2021). Read More \u00b6 Related articles Don't get locked up into avoiding lock-in AWS Managed Services","title":"Reference Architecture | AWS"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#reference-architecture","text":"Overview Reference Architecture for AWS has been designed under optimal configs for the most popular modern web and mobile applications needs. Its design is fully based on AWS \u201cWell Architected Framework\u201d . Reusing the Leverage Infrastructure as Code (IaC) Library via leverage cli to rapidly implement it. It will solve your entire infrastructure and will grant you complete control of the source code and of course you'll be able to run it without us.","title":"Reference Architecture"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#structural-concepts","text":"The Reference Architecture is designed with modularity in mind. A multi-accounts approach is leveraged in order to improve security isolation and resources separation. Furthermore each account infrastructure is divided in smaller units that we call layers . Each layer contains all the required resources and definitions for a specific service or feature to function. Each individual configuration of the Reference Architecture is referred to as a project . A Leverage project is comprised of all the relevant accounts and layers.","title":"Structural concepts"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#reference-architecture-model","text":"Strengths Faster updates (new features and bug fixes). Better code quality and modules maturity (proven and tested). Supported by Binbash, and public modules even by 1000's of top talented Open Source community contributors. Increase development cost savings. Clients keep full rights to all commercial, modification, distribution, and private use of the code (No Lock-In) through forks inside their own projects' repositories (open-source and commercially reusable via license MIT and Apache 2.0 .","title":"Reference Architecture Model"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#reference-architecture-design","text":"","title":"Reference Architecture Design"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#aws-organizations-multi-account-diagram","text":"Figure: AWS Organization multi-account reference architecture diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture components\", Binbash Leverage Doc, accessed August 4th 2021).","title":"AWS Organizations multi-account diagram"},{"location":"how-it-works/ref-architecture/ref-architecture-aws/#read-more","text":"Related articles Don't get locked up into avoiding lock-in AWS Managed Services","title":"Read More"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/","text":"AWS EKS Reference Architecture \u00b6 Amazon EKS Resources \u00b6 Control Plane (aka. Master Nodes) \u00b6 This is the primary resource which defines the cluster. We will create one cluster on each account: apps-devstg/us-east-1/k8s-eks apps-prd/us-east-1/k8s-eks Important In case of multiple environments hosted in the same cluster as for the one with Apps Dev and Stage, the workload isolation will be achieved through Kubernetes features such as namespaces, network policies, RBAC, and others. Data Plane (Worker Nodes) \u00b6 We have 3 options here: Managed Nodes Fargate Fargate Spot Considerations Each option has its pros and cons with regard to cost, operation complexity, extensibility, customization capabilities, features, and management. In general we implement Managed Nodes. The main reasons being: They allow a high degree of control in terms of the components we can deploy and the features those components can provide to us. For instance we can run ingress controllers and service mesh, among other very customizable resources. AWS takes care of provisioning and lifecycle management of nodes which is one less task to worry about. Upgrading Kubernetes versions becomes much simpler and quicker to perform. We still can, at any time, start using Fargate and Fargate Spot by simply creating a profile for one or both of them, then we only need to move the workloads that we want to run on Fargate profiles of our choice. Amazon EKS Architecture Diagram \u00b6 Higl-Level components diagram \u00b6 Figure: K8S EKS reference architecture components diagram. (Source: Binbash Leverage Confluence Doc, \"Implementation Diagrams\" , Binbash Leverage Doc, accessed January 5th 2022). Detailed components diagram \u00b6 Figure: K8S EKS reference architecture detailed components diagram. (Source: Binbash Leverage Confluence Doc, \"Implementation Diagrams\" , Binbash Leverage Doc, accessed January 5th 2022).","title":"Reference Architecture | EKS"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#aws-eks-reference-architecture","text":"","title":"AWS EKS Reference Architecture"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#amazon-eks-resources","text":"","title":"Amazon EKS Resources"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#control-plane-aka-master-nodes","text":"This is the primary resource which defines the cluster. We will create one cluster on each account: apps-devstg/us-east-1/k8s-eks apps-prd/us-east-1/k8s-eks Important In case of multiple environments hosted in the same cluster as for the one with Apps Dev and Stage, the workload isolation will be achieved through Kubernetes features such as namespaces, network policies, RBAC, and others.","title":"Control Plane (aka. Master Nodes)"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#data-plane-worker-nodes","text":"We have 3 options here: Managed Nodes Fargate Fargate Spot Considerations Each option has its pros and cons with regard to cost, operation complexity, extensibility, customization capabilities, features, and management. In general we implement Managed Nodes. The main reasons being: They allow a high degree of control in terms of the components we can deploy and the features those components can provide to us. For instance we can run ingress controllers and service mesh, among other very customizable resources. AWS takes care of provisioning and lifecycle management of nodes which is one less task to worry about. Upgrading Kubernetes versions becomes much simpler and quicker to perform. We still can, at any time, start using Fargate and Fargate Spot by simply creating a profile for one or both of them, then we only need to move the workloads that we want to run on Fargate profiles of our choice.","title":"Data Plane (Worker Nodes)"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#amazon-eks-architecture-diagram","text":"","title":"Amazon EKS Architecture Diagram"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#higl-level-components-diagram","text":"Figure: K8S EKS reference architecture components diagram. (Source: Binbash Leverage Confluence Doc, \"Implementation Diagrams\" , Binbash Leverage Doc, accessed January 5th 2022).","title":"Higl-Level components diagram"},{"location":"how-it-works/ref-architecture/ref-architecture-eks/#detailed-components-diagram","text":"Figure: K8S EKS reference architecture detailed components diagram. (Source: Binbash Leverage Confluence Doc, \"Implementation Diagrams\" , Binbash Leverage Doc, accessed January 5th 2022).","title":"Detailed components diagram"},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/","text":"Why Leverage? \u00b6 The problem \u00b6 Figure: Why Leverage? The problem. (Source: Binbash, \"Leverage Presentation: Why you should use Leverage?\", accessed June 15th 2021). Our solution \u00b6 Figure: Why Leverage? The solution. (Source: Binbash, \"Leverage Presentation: Why you should use Leverage?\", accessed June 15th 2021). The problem & our solution intro video \u00b6 Why Leverage for CIOs, CTOs and VPs of Engineering? \u00b6 Accelerate development and optimize costs Annual cost savings are a new standard and best practice. Profits are being targeted to business development, regulatory and compliance needs. Resulting in a reduction of pressure on IT and development budgets, granting the opportunity to focus in new features and boost innovation. Modernize applications architecture (loosely coupled and modular) Strategically decompose the monolith into a fine-grained, loosely coupled modular architecture to increase both development and business agility. When the system architecture is designed to allow teams to test, deploy and change systems without relying on other teams, they require little communication to get the job done. In other words, both the architecture and the teams are loosely coupled. Innovation - Rapidly adopt new technologies and reduce development time: Use Leverage Reference Architecture and for AWS + our libraries to provide a collection of cloud application architecture components to build and deploy faster in the cloud. Building a cloud Landing Zone is complex, especially since most companies have little or no expertise in this area. And it can take a significant amount of time to get it right. Leverage a reference architecture to give you an AWS Landing Zone that provides a consistent and solid \"foundations\" to bootstrap your project in the cloud. The code solution implements the best AWS Well-Architected Framework practices as well as the battle-tested tech experience and years of knowledge of our contributors. Hours or days, not weeks or months Leverage implements infrastructure as code at all times. We have rolled this out using Terraform, and has been fully proven in AWS and other Terraform providers that are part of our reference architecture like Kubernetes, Helm and Hashicorp Vault. By using the leverage cli , our binary will help you to quickly bootstrap your AWS Landing Zone in a matter of hours (or at most a few days). It's not just a pile of scripts It's not just another layer of untested, one time and stand-alone developed scripts. The code is modularized and well designed under best practices, our leverage cli has both unit and integration tests. While our Terraform code has been extensively E2E tested. Moreover, 100% of the code is yours (to modify, extend, reuse, etc), with no vendor locking and vendor licensing fees. We use the MIT license, so you can take the code, modify it and use it as your private code. All we ask in return is a friendly greeting and that (if possible) consider contributing to Binbash Leverage project. Implement Leverage yourself or we can deploy it for you! DevOps culture and methodologies Team agility and continuous improvements based on feedback loops are some of the main drivers of cloud adoption, and IAC's goal of reducing the frequency of deployment of both infrastructure and applications are some of the most important aspects of DevOps practices. We continue to apply these methodologies to achieve a DevOps first culture. We have experienced and demonstrated their potential and have practiced them in dozens of projects over the past 5 years. The Leverage reference architecture for AWS combines a set of application best practices, technology patterns and a common CI/CD deployment approach through leverage cli for all your application environments. As a result, we are pursuing a world-class software delivery performance through optimized collaboration, communication, reliability, stability, scalability and security at ever-decreasing cost and effort. Repeatable, composable and extensible immutable infrastructure The best high-performance development teams create and recreate their development and production environments using infrastructure as code (IaC) as part of their daily development processes. The leverage cli allows to build repeatable and immutable infrastructure. So your cloud development, staging and production environments will consistently be the same. Why Leverage for DevOps Engineers, Cloud Architects and Software Engineers? \u00b6 Provisioning infrastructure as code (Iac) Instead of manually provisioning infrastructure, the real benefits of cloud adoption come from orchestrating infrastructure through code. However, this is really challenging to achieve, there are literally thousands of tiny things and configs to consider and they all seem to take forever. Our experience is that it can take teams up to 24 months to achieve a desired infra state in AWS. By using Leverage you could get your AWS Landing-Zone in few weeks, or your entire AWS Well-Architected based cloud solution within 1 to 3 months (depending on your project complexity needs). We've done it before (don't reinvent the wheel) Often, development teams have similar and recurring requests such as: iam, networking, security, storage, databases, compute and secret management, etc. Binbash Leverage has been proven in dozen of project to create software-defined (IaC) AWS environments. Best practices baked in the code Leverage provides IaC reference architecture for AWS hosted applications infrastructure. This is baked into the code as a combination of the best AWS Well-Architected framework practices and the experience of having successfully orchestrated many customers to AWS cloud. On-demand infra deployment Leverage provides your DevOps, Cloud, SRE and Development teams with the ability to provision on-demand infrastructure, granting that it will meet the rigorous security requirements of modern cloud native best practices. It fully implements AWS Well-Architected Framework (WAF) and best DevOps practices, including practices, including collaboration, version control, CI/CD, continuous testing, cloud infrastructure and losely couple architectures. Easier to support and maintain Leverage IaC approach significantly reduce your AWS infra deployment, config and support burden and reduce risk. Our code backed provisioning has been rigorously tested many times, eliminating the possibility of manual errors. Because the entire infrastructure is deployed from the same proven code, the consistency your cloud environments will simplify your setup and maintenance. Use the versioned code to iterate and improve, extend or compose your internal processes as your cloud operating model evolves. There is no vendor lock-in. You own the solution With Leverage you own 100% of the code with no lock-in clauses. If you choose to leave Leverage , you will still have your entire AWS cloud infrastructure that you can access and manage. If you drop Leverage , you will still have your entire cloud native infrastructure code (Terraform, Helm, Ansible, Python). It\u2019s 100% Open Source on GitHub and is free to use with no strings attached under MIT license (no licensing fees), and you are free to commercially and privately use, distribute and modify. Consistent environments (Dev/prod parity) Keep development, staging, and production cloud envs parity. Infrastructure as code allow us to define and provisioning all infrastructure components (think networks, load balancers, databases, security, compute and storage, etc.) using code. Leverage uses Terraform as the IaC language, to deploy and setup all the AWS, Kubernetes and Hashicorp Vault resources (it has support for multiple cloud and technology providers). Backed by code, your cloud environments are built exactly the identical way all the time. Finally, this will result in no differences between development, staging and production. Development in production like envs IaC allows your development team to deploy and test the AWS infrastructure as if it were application code. Your development is always done in production-like environments. Provision your cloud test and sandbox environments on demand and tear them down when all your testing is complete. Leverage takes all the pain out of maintaining production-like environments, with stable infra releases. It eliminates the unpredictability of wondering if what actually worked in your development envs will work in production.","title":"Why Leverage?"},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#why-leverage","text":"","title":"Why Leverage?"},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#the-problem","text":"Figure: Why Leverage? The problem. (Source: Binbash, \"Leverage Presentation: Why you should use Leverage?\", accessed June 15th 2021).","title":"The problem"},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#our-solution","text":"Figure: Why Leverage? The solution. (Source: Binbash, \"Leverage Presentation: Why you should use Leverage?\", accessed June 15th 2021).","title":"Our solution"},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#the-problem-our-solution-intro-video","text":"","title":"The problem &amp; our solution intro video"},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#why-leverage-for-cios-ctos-and-vps-of-engineering","text":"Accelerate development and optimize costs Annual cost savings are a new standard and best practice. Profits are being targeted to business development, regulatory and compliance needs. Resulting in a reduction of pressure on IT and development budgets, granting the opportunity to focus in new features and boost innovation. Modernize applications architecture (loosely coupled and modular) Strategically decompose the monolith into a fine-grained, loosely coupled modular architecture to increase both development and business agility. When the system architecture is designed to allow teams to test, deploy and change systems without relying on other teams, they require little communication to get the job done. In other words, both the architecture and the teams are loosely coupled. Innovation - Rapidly adopt new technologies and reduce development time: Use Leverage Reference Architecture and for AWS + our libraries to provide a collection of cloud application architecture components to build and deploy faster in the cloud. Building a cloud Landing Zone is complex, especially since most companies have little or no expertise in this area. And it can take a significant amount of time to get it right. Leverage a reference architecture to give you an AWS Landing Zone that provides a consistent and solid \"foundations\" to bootstrap your project in the cloud. The code solution implements the best AWS Well-Architected Framework practices as well as the battle-tested tech experience and years of knowledge of our contributors. Hours or days, not weeks or months Leverage implements infrastructure as code at all times. We have rolled this out using Terraform, and has been fully proven in AWS and other Terraform providers that are part of our reference architecture like Kubernetes, Helm and Hashicorp Vault. By using the leverage cli , our binary will help you to quickly bootstrap your AWS Landing Zone in a matter of hours (or at most a few days). It's not just a pile of scripts It's not just another layer of untested, one time and stand-alone developed scripts. The code is modularized and well designed under best practices, our leverage cli has both unit and integration tests. While our Terraform code has been extensively E2E tested. Moreover, 100% of the code is yours (to modify, extend, reuse, etc), with no vendor locking and vendor licensing fees. We use the MIT license, so you can take the code, modify it and use it as your private code. All we ask in return is a friendly greeting and that (if possible) consider contributing to Binbash Leverage project. Implement Leverage yourself or we can deploy it for you! DevOps culture and methodologies Team agility and continuous improvements based on feedback loops are some of the main drivers of cloud adoption, and IAC's goal of reducing the frequency of deployment of both infrastructure and applications are some of the most important aspects of DevOps practices. We continue to apply these methodologies to achieve a DevOps first culture. We have experienced and demonstrated their potential and have practiced them in dozens of projects over the past 5 years. The Leverage reference architecture for AWS combines a set of application best practices, technology patterns and a common CI/CD deployment approach through leverage cli for all your application environments. As a result, we are pursuing a world-class software delivery performance through optimized collaboration, communication, reliability, stability, scalability and security at ever-decreasing cost and effort. Repeatable, composable and extensible immutable infrastructure The best high-performance development teams create and recreate their development and production environments using infrastructure as code (IaC) as part of their daily development processes. The leverage cli allows to build repeatable and immutable infrastructure. So your cloud development, staging and production environments will consistently be the same.","title":"Why Leverage for CIOs, CTOs and VPs of Engineering?"},{"location":"how-it-works/ref-architecture/general-concepts/why-leverage/#why-leverage-for-devops-engineers-cloud-architects-and-software-engineers","text":"Provisioning infrastructure as code (Iac) Instead of manually provisioning infrastructure, the real benefits of cloud adoption come from orchestrating infrastructure through code. However, this is really challenging to achieve, there are literally thousands of tiny things and configs to consider and they all seem to take forever. Our experience is that it can take teams up to 24 months to achieve a desired infra state in AWS. By using Leverage you could get your AWS Landing-Zone in few weeks, or your entire AWS Well-Architected based cloud solution within 1 to 3 months (depending on your project complexity needs). We've done it before (don't reinvent the wheel) Often, development teams have similar and recurring requests such as: iam, networking, security, storage, databases, compute and secret management, etc. Binbash Leverage has been proven in dozen of project to create software-defined (IaC) AWS environments. Best practices baked in the code Leverage provides IaC reference architecture for AWS hosted applications infrastructure. This is baked into the code as a combination of the best AWS Well-Architected framework practices and the experience of having successfully orchestrated many customers to AWS cloud. On-demand infra deployment Leverage provides your DevOps, Cloud, SRE and Development teams with the ability to provision on-demand infrastructure, granting that it will meet the rigorous security requirements of modern cloud native best practices. It fully implements AWS Well-Architected Framework (WAF) and best DevOps practices, including practices, including collaboration, version control, CI/CD, continuous testing, cloud infrastructure and losely couple architectures. Easier to support and maintain Leverage IaC approach significantly reduce your AWS infra deployment, config and support burden and reduce risk. Our code backed provisioning has been rigorously tested many times, eliminating the possibility of manual errors. Because the entire infrastructure is deployed from the same proven code, the consistency your cloud environments will simplify your setup and maintenance. Use the versioned code to iterate and improve, extend or compose your internal processes as your cloud operating model evolves. There is no vendor lock-in. You own the solution With Leverage you own 100% of the code with no lock-in clauses. If you choose to leave Leverage , you will still have your entire AWS cloud infrastructure that you can access and manage. If you drop Leverage , you will still have your entire cloud native infrastructure code (Terraform, Helm, Ansible, Python). It\u2019s 100% Open Source on GitHub and is free to use with no strings attached under MIT license (no licensing fees), and you are free to commercially and privately use, distribute and modify. Consistent environments (Dev/prod parity) Keep development, staging, and production cloud envs parity. Infrastructure as code allow us to define and provisioning all infrastructure components (think networks, load balancers, databases, security, compute and storage, etc.) using code. Leverage uses Terraform as the IaC language, to deploy and setup all the AWS, Kubernetes and Hashicorp Vault resources (it has support for multiple cloud and technology providers). Backed by code, your cloud environments are built exactly the identical way all the time. Finally, this will result in no differences between development, staging and production. Development in production like envs IaC allows your development team to deploy and test the AWS infrastructure as if it were application code. Your development is always done in production-like environments. Provision your cloud test and sandbox environments on demand and tear them down when all your testing is complete. Leverage takes all the pain out of maintaining production-like environments, with stable infra releases. It eliminates the unpredictability of wondering if what actually worked in your development envs will work in production.","title":"Why Leverage for DevOps Engineers, Cloud Architects and Software Engineers?"},{"location":"how-it-works/ref-architecture/general-concepts/why-tech-stack/","text":"Why we choose our tech stack \u00b6 Why AWS\u2753 Amazon Web Services (AWS) is the world\u2019s most comprehensive and broadly adopted cloud platform, offering over 200 fully featured services from data centers globally. Millions of customers\u2014including the fastest-growing startups, largest enterprises, and leading government agencies\u2014are using AWS to lower costs, become more agile, and innovate faster. Build, Deploy, and Manage Websites, Apps or Processes On AWS' Secure, Reliable Network. AWS is Secure, Reliable, Scalable Services. HIPAA Compliant. Easily Manage Clusters. Global Infrastructure. Highly Scalable. Read More: What is AWS Why WAF (Well Architected Framework)\u2753 AWS Well-Architected helps cloud architects to build secure, high-performing, resilient, and efficient infrastructure for their applications and workloads. Based on five pillars \u2014 operational excellence, security, reliability, performance efficiency, and cost optimization \u2014 AWS Well-Architected provides a consistent approach for customers and partners to evaluate architectures, and implement designs that can scale over time. Read More: AWS Well-architected Why Infra as Code (IaC) & Terraform\u2753 Confidence: A change breaks the env? Just roll it back. Still not working? Build a whole new env with a few keystrokes. IaC enables this. Repeatability: Allows your infra to be automatically instantiated, making it easy to build multiple identical envs. Troubleshooting: Check source control and see exactly what changed in the env. As long as you are diligent and don\u2019t make manual envs changes, then IaC can be a game changer. DR: Require the ability to set up an alternate env in a different DC or Region. IaC makes this a much more manageable prospect. Auditability: You will need to be able to audit both changes and access to an env, IaC gives you this right out of the box. Visibility: As an env expands over time, is challenging to tell what has been provisioned. In the #cloud this can be a huge #cost issue. IaC allows tracking your resources. Portability: Some IaC techs are #multicloud. Also, translating #Terraform from one cloud provider to another is considerably more simple than recreating your entire envs in a cloud-specific tool. Security: See history of changes to your SG rules along with commit messages can do wonders for being confident about the security configs of your envs. Terraform allows to codify your application infrastructure, reduce human error and increase automation by provisioning infrastructure as code. With TF we can manage infrastructure across clouds and provision infrastructure across 300+ public clouds and services using a single workflow. Moreover it helps to create reproducible infrastructure and provision consistent testing, staging, and production environments with the same configuration. Terraform has everything we expect from a IaC framework: open source, cloud-agnostic provisioning tool that supported immutable infrastructure, a declarative language, and a client-only architecture. Read More Why Infrastructure as Code Why Terraform by Gruntwork Why Organizations\u2753 AWS Organizations helps you centrally manage and govern your environment as you grow and scale your AWS resources. Using AWS Organizations, you can programmatically create new AWS accounts and allocate resources, group accounts to organize your workflows, apply policies to accounts or groups for governance, and simplify billing by using a single payment method for all of your accounts. Read More How it works: AWS Organizations AWS Organizations Why AIM and roles\u2753 AWS Identity and Access Management (IAM) enables you to manage access to AWS services and resources securely. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources. Integration and Fine-grained access control with almost every AWS service and its resources. Multi-factor authentication for highly privileged users. Analyze, monitor and audit access. Read More How it works: AWS IAM AWS Identity and Access Management (IAM) Security | Why Web Application Firewall (WAF), Cloud Trail, Config, Guarduty\u2753 Raise your security posture with AWS infrastructure and services. Using AWS, you will gain the control and confidence you need to securely run your business with the most flexible and secure cloud computing environment available today. As an AWS customer, you will benefit from AWS data centers and a network architected to protect your information, identities, applications, and devices. With AWS, you can improve your ability to meet core security and compliance requirements, such as data locality, protection, and confidentiality with our comprehensive services and features. Read More How it works: AWS Security AWS Cloud Security Why VPC\u2753 Amazon Virtual Private Cloud (Amazon VPC) is a service that lets you launch AWS resources in a logically isolated virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways. You can use both IPv4 and IPv6 for most resources in your virtual private cloud, helping to ensure secure and easy access to resources and applications. Read More How it works: AWS Networking AWS Virtual Private Cloud Why Kubernetes (K8s) & AWS EKS\u2753 Kubernetes , also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications. It groups containers that make up an application into logical units for easy management and discovery. Kubernetes builds upon 15 years of experience of running production workloads at Google, combined with best-of-breed ideas and practices from the community. Amazon Elastic Kubernetes Service (Amazon EKS) gives you the flexibility to start, run, and scale Kubernetes applications in the AWS cloud or on-premises. Amazon EKS helps you provide highly-available and secure clusters and automates key tasks such as patching, node provisioning, and updates. Customers such as Intel, Snap, Intuit, GoDaddy, and Autodesk trust EKS to run their most sensitive and mission critical applications. EKS runs upstream Kubernetes and is certified Kubernetes conformant for a predictable experience. You can easily migrate any standard Kubernetes application to EKS without needing to refactor your code. Read More How it works: AWS EKS AWS EKS Kubernetes Why S3\u2753 Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance. This means customers of all sizes and industries can use it to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics. Amazon S3 provides easy-to-use management features so you can organize your data and configure finely-tuned access controls to meet your specific business, organizational, and compliance requirements. Amazon S3 is designed for 99.999999999% (11 9's) of durability, and stores data for millions of applications for companies all around the world. Read More How it works: AWS Storage AWS S3 Why RDS\u2753 Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational database in the cloud. It provides cost-efficient and resizable capacity while automating time-consuming administration tasks such as hardware provisioning, database setup, patching and backups. It frees you to focus on your applications so you can give them the fast performance, high availability, security and compatibility they need. Amazon RDS is available on several database instance types - optimized for memory, performance or I/O - and provides you with six familiar database engines to choose from, including Amazon Aurora, PostgreSQL, MySQL, MariaDB, Oracle Database, and SQL Server. You can use the AWS Database Migration Service to easily migrate or replicate your existing databases to Amazon RDS. Read More How it works: AWS Databases AWS RDS Why Hashicorp Vault\u2753 As many organizations migrate to the public cloud, a major concern has been how to best secure data, preventing it from unauthorized access or exfiltration. Deploying a product like HashiCorp Vault gives you better control of your sensitive credentials and helps you meet cloud security standards. HashiCorp Vault is designed to help organizations manage access to secrets and transmit them safely within an organization. Secrets are defined as any form of sensitive credentials that need to be tightly controlled and monitored and can be used to unlock sensitive information. Secrets could be in the form of passwords, API keys, SSH keys, RSA tokens, or OTP. HashiCorp Vault makes it very easy to control and manage access by providing you with a unilateral interface to manage every secret in your infrastructure. Not only that, you can also create detailed audit logs and keep track of who accessed what. Manage Secrets and Protect Sensitive Data. Secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets and other sensitive data using a UI, CLI, or HTTP API. Read More How it works: Secrets Hashicorp Vault Project","title":"Why our stack?"},{"location":"how-it-works/ref-architecture/general-concepts/why-tech-stack/#why-we-choose-our-tech-stack","text":"Why AWS\u2753 Amazon Web Services (AWS) is the world\u2019s most comprehensive and broadly adopted cloud platform, offering over 200 fully featured services from data centers globally. Millions of customers\u2014including the fastest-growing startups, largest enterprises, and leading government agencies\u2014are using AWS to lower costs, become more agile, and innovate faster. Build, Deploy, and Manage Websites, Apps or Processes On AWS' Secure, Reliable Network. AWS is Secure, Reliable, Scalable Services. HIPAA Compliant. Easily Manage Clusters. Global Infrastructure. Highly Scalable. Read More: What is AWS Why WAF (Well Architected Framework)\u2753 AWS Well-Architected helps cloud architects to build secure, high-performing, resilient, and efficient infrastructure for their applications and workloads. Based on five pillars \u2014 operational excellence, security, reliability, performance efficiency, and cost optimization \u2014 AWS Well-Architected provides a consistent approach for customers and partners to evaluate architectures, and implement designs that can scale over time. Read More: AWS Well-architected Why Infra as Code (IaC) & Terraform\u2753 Confidence: A change breaks the env? Just roll it back. Still not working? Build a whole new env with a few keystrokes. IaC enables this. Repeatability: Allows your infra to be automatically instantiated, making it easy to build multiple identical envs. Troubleshooting: Check source control and see exactly what changed in the env. As long as you are diligent and don\u2019t make manual envs changes, then IaC can be a game changer. DR: Require the ability to set up an alternate env in a different DC or Region. IaC makes this a much more manageable prospect. Auditability: You will need to be able to audit both changes and access to an env, IaC gives you this right out of the box. Visibility: As an env expands over time, is challenging to tell what has been provisioned. In the #cloud this can be a huge #cost issue. IaC allows tracking your resources. Portability: Some IaC techs are #multicloud. Also, translating #Terraform from one cloud provider to another is considerably more simple than recreating your entire envs in a cloud-specific tool. Security: See history of changes to your SG rules along with commit messages can do wonders for being confident about the security configs of your envs. Terraform allows to codify your application infrastructure, reduce human error and increase automation by provisioning infrastructure as code. With TF we can manage infrastructure across clouds and provision infrastructure across 300+ public clouds and services using a single workflow. Moreover it helps to create reproducible infrastructure and provision consistent testing, staging, and production environments with the same configuration. Terraform has everything we expect from a IaC framework: open source, cloud-agnostic provisioning tool that supported immutable infrastructure, a declarative language, and a client-only architecture. Read More Why Infrastructure as Code Why Terraform by Gruntwork Why Organizations\u2753 AWS Organizations helps you centrally manage and govern your environment as you grow and scale your AWS resources. Using AWS Organizations, you can programmatically create new AWS accounts and allocate resources, group accounts to organize your workflows, apply policies to accounts or groups for governance, and simplify billing by using a single payment method for all of your accounts. Read More How it works: AWS Organizations AWS Organizations Why AIM and roles\u2753 AWS Identity and Access Management (IAM) enables you to manage access to AWS services and resources securely. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources. Integration and Fine-grained access control with almost every AWS service and its resources. Multi-factor authentication for highly privileged users. Analyze, monitor and audit access. Read More How it works: AWS IAM AWS Identity and Access Management (IAM) Security | Why Web Application Firewall (WAF), Cloud Trail, Config, Guarduty\u2753 Raise your security posture with AWS infrastructure and services. Using AWS, you will gain the control and confidence you need to securely run your business with the most flexible and secure cloud computing environment available today. As an AWS customer, you will benefit from AWS data centers and a network architected to protect your information, identities, applications, and devices. With AWS, you can improve your ability to meet core security and compliance requirements, such as data locality, protection, and confidentiality with our comprehensive services and features. Read More How it works: AWS Security AWS Cloud Security Why VPC\u2753 Amazon Virtual Private Cloud (Amazon VPC) is a service that lets you launch AWS resources in a logically isolated virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways. You can use both IPv4 and IPv6 for most resources in your virtual private cloud, helping to ensure secure and easy access to resources and applications. Read More How it works: AWS Networking AWS Virtual Private Cloud Why Kubernetes (K8s) & AWS EKS\u2753 Kubernetes , also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications. It groups containers that make up an application into logical units for easy management and discovery. Kubernetes builds upon 15 years of experience of running production workloads at Google, combined with best-of-breed ideas and practices from the community. Amazon Elastic Kubernetes Service (Amazon EKS) gives you the flexibility to start, run, and scale Kubernetes applications in the AWS cloud or on-premises. Amazon EKS helps you provide highly-available and secure clusters and automates key tasks such as patching, node provisioning, and updates. Customers such as Intel, Snap, Intuit, GoDaddy, and Autodesk trust EKS to run their most sensitive and mission critical applications. EKS runs upstream Kubernetes and is certified Kubernetes conformant for a predictable experience. You can easily migrate any standard Kubernetes application to EKS without needing to refactor your code. Read More How it works: AWS EKS AWS EKS Kubernetes Why S3\u2753 Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance. This means customers of all sizes and industries can use it to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics. Amazon S3 provides easy-to-use management features so you can organize your data and configure finely-tuned access controls to meet your specific business, organizational, and compliance requirements. Amazon S3 is designed for 99.999999999% (11 9's) of durability, and stores data for millions of applications for companies all around the world. Read More How it works: AWS Storage AWS S3 Why RDS\u2753 Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational database in the cloud. It provides cost-efficient and resizable capacity while automating time-consuming administration tasks such as hardware provisioning, database setup, patching and backups. It frees you to focus on your applications so you can give them the fast performance, high availability, security and compatibility they need. Amazon RDS is available on several database instance types - optimized for memory, performance or I/O - and provides you with six familiar database engines to choose from, including Amazon Aurora, PostgreSQL, MySQL, MariaDB, Oracle Database, and SQL Server. You can use the AWS Database Migration Service to easily migrate or replicate your existing databases to Amazon RDS. Read More How it works: AWS Databases AWS RDS Why Hashicorp Vault\u2753 As many organizations migrate to the public cloud, a major concern has been how to best secure data, preventing it from unauthorized access or exfiltration. Deploying a product like HashiCorp Vault gives you better control of your sensitive credentials and helps you meet cloud security standards. HashiCorp Vault is designed to help organizations manage access to secrets and transmit them safely within an organization. Secrets are defined as any form of sensitive credentials that need to be tightly controlled and monitored and can be used to unlock sensitive information. Secrets could be in the form of passwords, API keys, SSH keys, RSA tokens, or OTP. HashiCorp Vault makes it very easy to control and manage access by providing you with a unilateral interface to manage every secret in your infrastructure. Not only that, you can also create detailed audit logs and keep track of who accessed what. Manage Secrets and Protect Sensitive Data. Secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets and other sensitive data using a UI, CLI, or HTTP API. Read More How it works: Secrets Hashicorp Vault Project","title":"Why we choose our tech stack"},{"location":"user-guide/","text":"Overview \u00b6 Pre-requisites \u00b6 Local env pre-required packages Docker engine >= 20.x.y (check via docker --version ) Python >= 3.8 (check via python3 --version || python3.8 --version ) leverage cli >= 1.0.0 (check via leverage --version ) Configurations & Workflow \u00b6 le-tf-infra-aws le-tf-vault le-ansible-infra","title":"Pre-requisites"},{"location":"user-guide/#overview","text":"","title":"Overview"},{"location":"user-guide/#pre-requisites","text":"Local env pre-required packages Docker engine >= 20.x.y (check via docker --version ) Python >= 3.8 (check via python3 --version || python3.8 --version ) leverage cli >= 1.0.0 (check via leverage --version )","title":"Pre-requisites"},{"location":"user-guide/#configurations-workflow","text":"le-tf-infra-aws le-tf-vault le-ansible-infra","title":"Configurations &amp; Workflow"},{"location":"user-guide/features/features-overview/","text":"AWS Reference Architecture features \u00b6 Governance | AWS Organizations AWS Organizations Initialization Invite pre-exiting accounts to AWS Organizations Identity Management GPG Keys Identities AWS Credentials Hashicorp Vault Credentials Single Sign-On (SSO) AWS SSO + Jumpcloud IdP Cost Monitoring & Optimization Costs Security Security Services VPN | Pritunl Networking | VPC, TGW, NFW, DNS and NACLs VPC Addressing VPC Peering DNS Secrets Management Secrets Compute Compute K8s EKS K8s Kops Serverless Databases Databases RDS MySql RDS Postgres Storage Storage Content Delivery Network (CDN) AWS CloudFront CI/CD (Continuous Integration / Continuous Delivery) CI/CD Monitoring | Metrics, Logs, APM and Tracing Monitoring Metrics Logs Tracing APM Reliability Bakcups Health-Checks Disaster Recovery","title":"Overview"},{"location":"user-guide/features/features-overview/#aws-reference-architecture-features","text":"Governance | AWS Organizations AWS Organizations Initialization Invite pre-exiting accounts to AWS Organizations Identity Management GPG Keys Identities AWS Credentials Hashicorp Vault Credentials Single Sign-On (SSO) AWS SSO + Jumpcloud IdP Cost Monitoring & Optimization Costs Security Security Services VPN | Pritunl Networking | VPC, TGW, NFW, DNS and NACLs VPC Addressing VPC Peering DNS Secrets Management Secrets Compute Compute K8s EKS K8s Kops Serverless Databases Databases RDS MySql RDS Postgres Storage Storage Content Delivery Network (CDN) AWS CloudFront CI/CD (Continuous Integration / Continuous Delivery) CI/CD Monitoring | Metrics, Logs, APM and Tracing Monitoring Metrics Logs Tracing APM Reliability Bakcups Health-Checks Disaster Recovery","title":"AWS Reference Architecture features"},{"location":"user-guide/features/cdn/cdn/","text":"","title":"CDN"},{"location":"user-guide/features/ci-cd/ci-cd/","text":"","title":"CI/CD"},{"location":"user-guide/features/compute/k8s-eks/","text":"","title":"K8s EKS"},{"location":"user-guide/features/compute/k8s-kops/","text":"AWS Kubernetes Kops Cluster \u00b6 Kops Pre-requisites \u00b6 Important consideration K8s clusters provisioned by Kops have a number of resources that need to be available before the cluster is created. These are Kops pre-requisites and they are defined in the 1-prerequisites directory which includes all Terraform files used to create/modify these resources. The current code has been fully tested with the AWS VPC Network Module OS pre-req packages Ref Link: https://github.com/kubernetes/kops/blob/master/docs/install.md) kops >= 1.14.0 \u2570\u2500\u25cb kops version Version 1 .15.0 ( git-9992b4055 ) kubectl >= 1.14.0 \u2570\u2500\u25cb kubectl version --client + kubectl version --client Client Version: version.Info { Major: \"1\" , Minor: \"14\" , GitVersion: \"v1.14.0\" , GitCommit: \"641856db18352033a0d96dbc99153fa3b27298e5\" , GitTreeState: \"clean\" , BuildDate: \"2019-03-25T15:53:57Z\" , GoVersion: \"go1.12.1\" , Compiler: \"gc\" , Platform: \"linux/amd64\" } terraform >= 0.12.0 \u2570\u2500\u25cb terraform version Terraform v0.12.24 NOTE1: Regarding Terraform versions please also consider https://github.com/binbashar/bb-devops-tf-aws-kops#todo NOTE2: These dependencies will me mostly covered via Makefile w/ terraform dockerized cmds (https://hub.docker.com/repository/docker/binbash/terraform-awscli) jq >= 1.5.0 \u2570\u2500\u25cb jq --version jq-1.5-1-a5b5cbe Resulting Solutions Architecture \u00b6 Figure: AWS K8s Kops architecture diagram (just as reference). Why this workflow \u00b6 The workflow follows the same approach that is used to manage other terraform resources in your AWS accounts. E.g. network, identities, and so on. So we'll use existing AWS resources to create a cluster-template.yaml containing all the resource IDs that Kops needs to create a Kubernetes cluster. Why not directly use Kops CLI to create the K8s cluster as well as the VPC and its other dependencies? While this is a valid approach, we want to manage all these building blocks independently and be able to fully customize any AWS component without having to alter our Kubernetes cluster definitions and vice-versa. This is a fully declarative coding style approach to manage your infrastructure so being able to declare the state of our cluster in YAML files fits 100% as code & GitOps based approach. Figure: [Workflow diagram](https://medium.com/bench-engineering/deploying-kubernetes-clusters-with-kops-and-terraform-832b89250e8e). Kops Cluster Management \u00b6 The 2-kops directory includes helper scripts and Terraform files in order to template our Kubernetes cluster definition. The idea is to use our Terraform outputs from 1-prerequisites to construct a cluster definition. Overview \u00b6 Cluster Management via Kops is typically carried out through the kops CLI. In this case, we use a 2-kops directory that contains a Makefile, Terraform files and other helper scripts that reinforce the workflow we use to create/update/delete the cluster. Workflow \u00b6 This workflow is a little different to the typical Terraform workflows we use. The full workflow goes as follows: Cluster: Creation & Update Modify files under 1-prerequisites Main files to update probably are locals.tf and outputs.tf Mostly before the cluster is created but could be needed afterward Modify cluster-template.yml under 2-kops folder E.g. to add or remove instance groups, upgrade k8s version, etc At 2-kops/ context run make cluster-update will follow the steps below Get Terraform outputs from 1-prerequisites Generate a Kops cluster manifest -- it uses cluster-template.yml as a template and the outputs from the point above as replacement values Update Kops state -- it uses the generated Kops cluster manifest in previous point ( cluster.yml ) Generate Kops Terraform file ( kubernetes.tf ) -- this file represents the changes that Kops needs to apply on the cloud provider. Run make plan To preview any infrastructure changes that Terraform will make. If desired we could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to the Kubernetes cluster before executing make apply ( terraform apply ). This brings the huge benefit of treating changes to our Kubernetes clusters with a GitOps oriented approach, basically like we treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, integration testing, replicate environments and so on. Run make apply To apply those infrastructure changes on AWS. Run make cluster-rolling-update To determine if Kops needs to trigger some changes to happen right now (dry run) These are usually changes to the EC2 instances that won't get reflected as they depend on the autoscaling Run make cluster-rolling-update-yes To actually make any changes to the cluster masters/nodes happen Cluster: Deletion To clean-up any resources created for your K8s cluster, you should run: At 2-kops folder context run make destroy This will execute a terraform destroy of all the kubernets.tf declared AWS resources. At 2-kops folder context run cluster-destroy Will run Kops destroy cluster -- only dry run, no changes will be applied Exec cluster-destroy-yes Kops will effectively destroy all the remaining cluster resources. Finally if at 1-prerequisites exec make destroy This will remove Kops state S3 bucket + any other extra resources you've provisioned for your cluster. Typical Workflow \u00b6 The workflow may look complicated at first but generally it boils down to these simplified steps: 1. Modify cluster-template.yml 2. Run make cluster-update 3. Run make apply 4. Run make cluster-rolling-update-yes What about persistent and stateful K8s resources? This approach will work better the more stateless your Kubernetes workloads are. Treating Kubernetes clusters as ephemeral and replaceable infrastructure requires to consider not to use persistent volumes or the drawback of difficulties when running workloads such as databases on K8s. We feel pretty confident that we can recreate our workloads by applying each of our service definitions, charts and manifests to a given Kubernetes cluster as long as we keep the persistent storage separately on AWS RDS, DynamoDB, EFS and so on. In terms of the etcd state persistency, Kops already provisions the etcd volumes (AWS EBS) independently to the master instances they get attached to. This helps to persist the etcd state after rolling update your master nodes without any user intervention. Moreover simplifying volume backups via EBS Snapshots (consider https://github.com/binbashar/terraform-aws-backup-by-tags). We also use a very valuable backup tool named Velero (formerly Heptio Ark - https://github.com/vmware-tanzu/velero) to o back up and restore our Kubernetes cluster resources and persistent volumes. TODO IMPORTANT: Kops terraform output ( kops update cluster --target terraform ) is still generated for Terraform 0.11.x (https://github.com/kubernetes/kops/issues/7052) we'll take care of the migration when tf-0.12 gets fully supported. Create a Binbash Leverage public Confluence Wiki entry detailing some more info about etcd, calico and k8s versions compatibilities","title":"K8s Kops"},{"location":"user-guide/features/compute/k8s-kops/#aws-kubernetes-kops-cluster","text":"","title":"AWS Kubernetes Kops Cluster"},{"location":"user-guide/features/compute/k8s-kops/#kops-pre-requisites","text":"Important consideration K8s clusters provisioned by Kops have a number of resources that need to be available before the cluster is created. These are Kops pre-requisites and they are defined in the 1-prerequisites directory which includes all Terraform files used to create/modify these resources. The current code has been fully tested with the AWS VPC Network Module OS pre-req packages Ref Link: https://github.com/kubernetes/kops/blob/master/docs/install.md) kops >= 1.14.0 \u2570\u2500\u25cb kops version Version 1 .15.0 ( git-9992b4055 ) kubectl >= 1.14.0 \u2570\u2500\u25cb kubectl version --client + kubectl version --client Client Version: version.Info { Major: \"1\" , Minor: \"14\" , GitVersion: \"v1.14.0\" , GitCommit: \"641856db18352033a0d96dbc99153fa3b27298e5\" , GitTreeState: \"clean\" , BuildDate: \"2019-03-25T15:53:57Z\" , GoVersion: \"go1.12.1\" , Compiler: \"gc\" , Platform: \"linux/amd64\" } terraform >= 0.12.0 \u2570\u2500\u25cb terraform version Terraform v0.12.24 NOTE1: Regarding Terraform versions please also consider https://github.com/binbashar/bb-devops-tf-aws-kops#todo NOTE2: These dependencies will me mostly covered via Makefile w/ terraform dockerized cmds (https://hub.docker.com/repository/docker/binbash/terraform-awscli) jq >= 1.5.0 \u2570\u2500\u25cb jq --version jq-1.5-1-a5b5cbe","title":"Kops Pre-requisites"},{"location":"user-guide/features/compute/k8s-kops/#resulting-solutions-architecture","text":"Figure: AWS K8s Kops architecture diagram (just as reference).","title":"Resulting Solutions Architecture"},{"location":"user-guide/features/compute/k8s-kops/#why-this-workflow","text":"The workflow follows the same approach that is used to manage other terraform resources in your AWS accounts. E.g. network, identities, and so on. So we'll use existing AWS resources to create a cluster-template.yaml containing all the resource IDs that Kops needs to create a Kubernetes cluster. Why not directly use Kops CLI to create the K8s cluster as well as the VPC and its other dependencies? While this is a valid approach, we want to manage all these building blocks independently and be able to fully customize any AWS component without having to alter our Kubernetes cluster definitions and vice-versa. This is a fully declarative coding style approach to manage your infrastructure so being able to declare the state of our cluster in YAML files fits 100% as code & GitOps based approach. Figure: [Workflow diagram](https://medium.com/bench-engineering/deploying-kubernetes-clusters-with-kops-and-terraform-832b89250e8e).","title":"Why this workflow"},{"location":"user-guide/features/compute/k8s-kops/#kops-cluster-management","text":"The 2-kops directory includes helper scripts and Terraform files in order to template our Kubernetes cluster definition. The idea is to use our Terraform outputs from 1-prerequisites to construct a cluster definition.","title":"Kops Cluster Management"},{"location":"user-guide/features/compute/k8s-kops/#overview","text":"Cluster Management via Kops is typically carried out through the kops CLI. In this case, we use a 2-kops directory that contains a Makefile, Terraform files and other helper scripts that reinforce the workflow we use to create/update/delete the cluster.","title":"Overview"},{"location":"user-guide/features/compute/k8s-kops/#workflow","text":"This workflow is a little different to the typical Terraform workflows we use. The full workflow goes as follows: Cluster: Creation & Update Modify files under 1-prerequisites Main files to update probably are locals.tf and outputs.tf Mostly before the cluster is created but could be needed afterward Modify cluster-template.yml under 2-kops folder E.g. to add or remove instance groups, upgrade k8s version, etc At 2-kops/ context run make cluster-update will follow the steps below Get Terraform outputs from 1-prerequisites Generate a Kops cluster manifest -- it uses cluster-template.yml as a template and the outputs from the point above as replacement values Update Kops state -- it uses the generated Kops cluster manifest in previous point ( cluster.yml ) Generate Kops Terraform file ( kubernetes.tf ) -- this file represents the changes that Kops needs to apply on the cloud provider. Run make plan To preview any infrastructure changes that Terraform will make. If desired we could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to the Kubernetes cluster before executing make apply ( terraform apply ). This brings the huge benefit of treating changes to our Kubernetes clusters with a GitOps oriented approach, basically like we treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, integration testing, replicate environments and so on. Run make apply To apply those infrastructure changes on AWS. Run make cluster-rolling-update To determine if Kops needs to trigger some changes to happen right now (dry run) These are usually changes to the EC2 instances that won't get reflected as they depend on the autoscaling Run make cluster-rolling-update-yes To actually make any changes to the cluster masters/nodes happen Cluster: Deletion To clean-up any resources created for your K8s cluster, you should run: At 2-kops folder context run make destroy This will execute a terraform destroy of all the kubernets.tf declared AWS resources. At 2-kops folder context run cluster-destroy Will run Kops destroy cluster -- only dry run, no changes will be applied Exec cluster-destroy-yes Kops will effectively destroy all the remaining cluster resources. Finally if at 1-prerequisites exec make destroy This will remove Kops state S3 bucket + any other extra resources you've provisioned for your cluster.","title":"Workflow"},{"location":"user-guide/features/compute/k8s-kops/#typical-workflow","text":"The workflow may look complicated at first but generally it boils down to these simplified steps: 1. Modify cluster-template.yml 2. Run make cluster-update 3. Run make apply 4. Run make cluster-rolling-update-yes What about persistent and stateful K8s resources? This approach will work better the more stateless your Kubernetes workloads are. Treating Kubernetes clusters as ephemeral and replaceable infrastructure requires to consider not to use persistent volumes or the drawback of difficulties when running workloads such as databases on K8s. We feel pretty confident that we can recreate our workloads by applying each of our service definitions, charts and manifests to a given Kubernetes cluster as long as we keep the persistent storage separately on AWS RDS, DynamoDB, EFS and so on. In terms of the etcd state persistency, Kops already provisions the etcd volumes (AWS EBS) independently to the master instances they get attached to. This helps to persist the etcd state after rolling update your master nodes without any user intervention. Moreover simplifying volume backups via EBS Snapshots (consider https://github.com/binbashar/terraform-aws-backup-by-tags). We also use a very valuable backup tool named Velero (formerly Heptio Ark - https://github.com/vmware-tanzu/velero) to o back up and restore our Kubernetes cluster resources and persistent volumes. TODO IMPORTANT: Kops terraform output ( kops update cluster --target terraform ) is still generated for Terraform 0.11.x (https://github.com/kubernetes/kops/issues/7052) we'll take care of the migration when tf-0.12 gets fully supported. Create a Binbash Leverage public Confluence Wiki entry detailing some more info about etcd, calico and k8s versions compatibilities","title":"Typical Workflow"},{"location":"user-guide/features/compute/overview/","text":"","title":"Overview"},{"location":"user-guide/features/compute/serverless/","text":"","title":"Serverless"},{"location":"user-guide/features/costs/costs/","text":"Cost Management Layer \u00b6 How it works documentation: Costs User guide \u00b6 TODO Next Steps \u00b6 TODO","title":"Costs"},{"location":"user-guide/features/costs/costs/#cost-management-layer","text":"How it works documentation: Costs","title":"Cost Management Layer"},{"location":"user-guide/features/costs/costs/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/features/costs/costs/#next-steps","text":"TODO","title":"Next Steps"},{"location":"user-guide/features/database/database/","text":"","title":"Databases"},{"location":"user-guide/features/database/mysql/","text":"","title":"MySQL"},{"location":"user-guide/features/database/postgres/","text":"","title":"PostgresSQL"},{"location":"user-guide/features/identities/credentials-vault/","text":"Hashicorp Vault credentials \u00b6 Hashicorp Vault private API endpoint \u00b6 If you are on HCP, you can get this from the Admin UI. Otherwise, it will depend on how you set up DNS, TLS and port settings for your self-hosted installation. We always favours a private endpoint deployment only accessible from the VPN. AWS Self Hosted Vault Instance Endpoint \u00b6 vault_address = \"https://vault.aws.binbash.com.ar:8200\" HCP Vault private API endpoint \u00b6 vault_address = \"https://bb-le-shared-vault-cluster.private.vault.xxxxxxxxxx.aws.hashicorp.cloud:8200\" Hashicorp Vault token \u00b6 We'll need to setup this Vault auth token in our [/config/common.config] file whenever we run the Terraform Leverage Reference architecture for: le-tf-infra-aws le-tf-vault Vault token generation and authentication Vault token that will be used by Terraform, or vault cli to perform calls to Vault API. During the initial setup, you will have to use a root token. If you are using a self-hosted installation you will get such token after you initialize Vault; if you are using Hashicorp Cloud Platform you can get the token from HCP Admin UI. After the initial setup, and since we recommend integrating Vault to Github for authentication, you will have to follow these steps: Generate a GitHub Personal Access Token: https://github.com/settings/tokens Click \u201cGenerate new token\u201c Under scopes, only select \"read:org\" , under \"admin:org\" Get vault token from your GH auth token \u00b6 Run vault cli v\u00eda docker: docker run -it vault:1.7.2 sh Vault ENV vars setup ( NOTE: this will change a little bit between AWS self-hosted vs HCP vault deployment) export VAULT_ADDR=\"https://vault-cluster.private.vault.XXXXXX.aws.hashicorp.cloud:8200\"; \\ export VAULT_NAMESPACE=\"admin\" vault login -method=github \u256d\u2500 \uf179 \ue0b1 \uf015 ~ \ue0b0\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\ue0b2 \u2714 \ue0b3 at 14:21:27 \uf017 \u2570\u2500 docker run -it vault:1.7.2 sh / # export VAULT_ADDR=\"https://bb-le-shared-vault-cluster.private.vault.xxxxxxx.a ws.hashicorp.cloud:8200\"; export VAULT_NAMESPACE=\"admin\" / # vault login -method=github GitHub Personal Access Token (will be hidden): Success! You are now authenticated. The token information displayed below is already stored in the token helper. You do NOT need to run \"vault login\" again. Future Vault requests will automatically use this token. Key Value --- ----- token s.PNAXXXXXXXXXXXXXXXXXXX.hbtct token_accessor KTqKKXXXXXXXXXXXXXXXXXXX.hbtct token_duration 1h ... input your GH personal access token Set the returned token in step 4) into /config/common.config -> vault_token=\"s.PNAXXXXXXXXXXXXXXXXXXX.hbtct\" NOTE: the admin token from https://portal.cloud.hashicorp.com/ will always work but it's use is discouraged for the nominated GH personal access token for security audit trail reasons Hashicorp Vault UI Auth \u00b6 You can also manage your Vault instance via its UI. We'll present below screenshot to show an example using the Github personal access token, one of our supported auth methods. Generate a GitHub Personal Access Token: https://github.com/settings/tokens Click \u201cGenerate new token\u201c Under scopes, only select \"read:org\" , under \"admin:org\" Open your preferred web browser choose Github auth method and paste your GH token and you'll be able to login to your instance. Figure: Vault HCP UI user authentication screen. (Source: Binbash Leverage, \"Leverage Vault Reference Architecture auth method\", Binbash Leverage Doc, accessed August 5th 2021).","title":"Credentials Vault"},{"location":"user-guide/features/identities/credentials-vault/#hashicorp-vault-credentials","text":"","title":"Hashicorp Vault credentials"},{"location":"user-guide/features/identities/credentials-vault/#hashicorp-vault-private-api-endpoint","text":"If you are on HCP, you can get this from the Admin UI. Otherwise, it will depend on how you set up DNS, TLS and port settings for your self-hosted installation. We always favours a private endpoint deployment only accessible from the VPN.","title":"Hashicorp Vault private API endpoint"},{"location":"user-guide/features/identities/credentials-vault/#aws-self-hosted-vault-instance-endpoint","text":"vault_address = \"https://vault.aws.binbash.com.ar:8200\"","title":"AWS Self Hosted Vault Instance Endpoint"},{"location":"user-guide/features/identities/credentials-vault/#hcp-vault-private-api-endpoint","text":"vault_address = \"https://bb-le-shared-vault-cluster.private.vault.xxxxxxxxxx.aws.hashicorp.cloud:8200\"","title":"HCP Vault private API endpoint"},{"location":"user-guide/features/identities/credentials-vault/#hashicorp-vault-token","text":"We'll need to setup this Vault auth token in our [/config/common.config] file whenever we run the Terraform Leverage Reference architecture for: le-tf-infra-aws le-tf-vault Vault token generation and authentication Vault token that will be used by Terraform, or vault cli to perform calls to Vault API. During the initial setup, you will have to use a root token. If you are using a self-hosted installation you will get such token after you initialize Vault; if you are using Hashicorp Cloud Platform you can get the token from HCP Admin UI. After the initial setup, and since we recommend integrating Vault to Github for authentication, you will have to follow these steps: Generate a GitHub Personal Access Token: https://github.com/settings/tokens Click \u201cGenerate new token\u201c Under scopes, only select \"read:org\" , under \"admin:org\"","title":"Hashicorp Vault token"},{"location":"user-guide/features/identities/credentials-vault/#get-vault-token-from-your-gh-auth-token","text":"Run vault cli v\u00eda docker: docker run -it vault:1.7.2 sh Vault ENV vars setup ( NOTE: this will change a little bit between AWS self-hosted vs HCP vault deployment) export VAULT_ADDR=\"https://vault-cluster.private.vault.XXXXXX.aws.hashicorp.cloud:8200\"; \\ export VAULT_NAMESPACE=\"admin\" vault login -method=github \u256d\u2500 \uf179 \ue0b1 \uf015 ~ \ue0b0\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\ue0b2 \u2714 \ue0b3 at 14:21:27 \uf017 \u2570\u2500 docker run -it vault:1.7.2 sh / # export VAULT_ADDR=\"https://bb-le-shared-vault-cluster.private.vault.xxxxxxx.a ws.hashicorp.cloud:8200\"; export VAULT_NAMESPACE=\"admin\" / # vault login -method=github GitHub Personal Access Token (will be hidden): Success! You are now authenticated. The token information displayed below is already stored in the token helper. You do NOT need to run \"vault login\" again. Future Vault requests will automatically use this token. Key Value --- ----- token s.PNAXXXXXXXXXXXXXXXXXXX.hbtct token_accessor KTqKKXXXXXXXXXXXXXXXXXXX.hbtct token_duration 1h ... input your GH personal access token Set the returned token in step 4) into /config/common.config -> vault_token=\"s.PNAXXXXXXXXXXXXXXXXXXX.hbtct\" NOTE: the admin token from https://portal.cloud.hashicorp.com/ will always work but it's use is discouraged for the nominated GH personal access token for security audit trail reasons","title":"Get vault token from your GH auth token"},{"location":"user-guide/features/identities/credentials-vault/#hashicorp-vault-ui-auth","text":"You can also manage your Vault instance via its UI. We'll present below screenshot to show an example using the Github personal access token, one of our supported auth methods. Generate a GitHub Personal Access Token: https://github.com/settings/tokens Click \u201cGenerate new token\u201c Under scopes, only select \"read:org\" , under \"admin:org\" Open your preferred web browser choose Github auth method and paste your GH token and you'll be able to login to your instance. Figure: Vault HCP UI user authentication screen. (Source: Binbash Leverage, \"Leverage Vault Reference Architecture auth method\", Binbash Leverage Doc, accessed August 5th 2021).","title":"Hashicorp Vault UI Auth"},{"location":"user-guide/features/identities/credentials/","text":"AWS Credentials \u00b6 Three main sets of credentials are used to interact with the AWS environment. We called them bootstrap , management and security credentials. bootstrap credentials \u00b6 These are temporary credentials used for the initial deployment of the architecture, and they should only be used for this purpose. Once this process is finished, management and security users should be the ones managing the environment. management credentials \u00b6 management credentials are meant to carry the role of making all important administrative tasks in the environment (e.g. billing adjustments). They should be tied to a physical user in your organization. A user with these credentials will assume the role OrganizationAccountAccessRole when interacting the environment. security credentials \u00b6 These credentials are the ones to be used for everyday maintenance and interaction with the environment. Users in the role of DevOps | SecOps | Cloud Engineer in your organization should use these credentials. A user with these credentials will assume te role DevOps when interacting with the environment. Read More \u00b6 AWS reference links Consider the following AWS official links as reference: Best practices for managing AWS access keys Cloud.gov | Secret key management - AWS credentials","title":"Credentials"},{"location":"user-guide/features/identities/credentials/#aws-credentials","text":"Three main sets of credentials are used to interact with the AWS environment. We called them bootstrap , management and security credentials.","title":"AWS Credentials"},{"location":"user-guide/features/identities/credentials/#bootstrap-credentials","text":"These are temporary credentials used for the initial deployment of the architecture, and they should only be used for this purpose. Once this process is finished, management and security users should be the ones managing the environment.","title":"bootstrap credentials"},{"location":"user-guide/features/identities/credentials/#management-credentials","text":"management credentials are meant to carry the role of making all important administrative tasks in the environment (e.g. billing adjustments). They should be tied to a physical user in your organization. A user with these credentials will assume the role OrganizationAccountAccessRole when interacting the environment.","title":"management credentials"},{"location":"user-guide/features/identities/credentials/#security-credentials","text":"These credentials are the ones to be used for everyday maintenance and interaction with the environment. Users in the role of DevOps | SecOps | Cloud Engineer in your organization should use these credentials. A user with these credentials will assume te role DevOps when interacting with the environment.","title":"security credentials"},{"location":"user-guide/features/identities/credentials/#read-more","text":"AWS reference links Consider the following AWS official links as reference: Best practices for managing AWS access keys Cloud.gov | Secret key management - AWS credentials","title":"Read More"},{"location":"user-guide/features/identities/gpg/","text":"GPG keys helper \u00b6 Why to use GPG? \u00b6 By default our Leverage Reference Architectre base-identities layer approach is to use IAM module to manage AWS IAM Users credentials with encryption to grant strong security . This module outputs commands and GPG messages which can be decrypted either using command line to get AWS Web Console user's password and user's secret key. Notes for keybase users If possible, always use GPG encryption to prevent Terraform from keeping unencrypted password and access secret key in state file. Keybase pre-requisites When gpg_key is specified as keybase:username , make sure that the user public key has already been uploaded to the Reference Architecture base-identities layer keys folder How to manage your GPG keys? \u00b6 Create a key pair NOTE: the user for whom this account is being created needs to do this Install gpg Run gpg --version to confirm Run gpg --gen-key and provide \"Your Name\" and \"Your Email\" as instructed -- you must also provide a passphrase Run gpg --list-keys to check that your key was generated Delete a key pair Run gpg --list-keys to check your key id Run gpg --delete-secret-keys \"Your Name\" to delete your private gpg key Run gpg --delete-key \"Your Name\" to delete your public gpg key Export your public key NOTE: the user must have created a key pair before doing this Run gpg --export \"Your Name\" | base64 Now the user can share her/his public key for creating her/his account Decrypt your encrypted password The user should copy the encrypted password from whatever media it was provided to her/him Run echo \"YOUR ENCRYPTED STRING PASSWORD HERE\" | base64 --decode > a_file_with_your_pass $ echo \"wcBMA/ujy1wF7UPcAQgASLL/x8zz7OHIP+EHU7IAZfa1A9qD9ScP5orK1M473WlXVgPrded0iHpyZRwsJRS8Xe38AHZ65O6CnywdR522MbD\\ RD6Yz+Bfc9NwO316bfSoTpyROXvMi+cfMEcihInHaCIP9YWBaI3eJ6VFdn90g9of00HYehBux7E2VitMuWo+v46W1p8/pw0b0H5qcppnUYYOjjSbjzzAuMF\\ yNB5M1K8av61bPQPQTxBH3SFaM0B4RNmUl1bHKDIcdESYyIP/PRLQ45Rs5MzGgALIxBy24qdPNjHJQR48/5QV4nzB9qeEe4eWDB4ynSEfLsXggiz8fsbajV\\ gSLNsdpqP9lYaueFdLgAeR6a+EjvqZfq0hZAgoiymsb4Qtn4A7gmeGmNeDE4td1mVfgzuTZ9zhnSbAYlXNIiM4b0MeX4HrjFkT/Aq+A/rvgBeKhszWD4Ibh\\ A4PgC+QPiJRb5kQ/mX8DheQfAHJ24iUZk1jh6AsA\" | base64 --decode > encrypted_pass Run gpg --decrypt a_file_with_your_pass (in the path you've executed 2.) to effectively decrypt your pass using your gpg key and its passphrase $ gpg --decrypt encrypted_pass You need a passphrase to unlock the secret key for user: \"Demo User (AWS org project-user acct gpg key w/ passphrase) <username.lastname@domain.com>\" 2048 -bit RSA key, ID 05ED43DC, created 2019 -03-15 ( main key ID D64DD59F ) gpg: encrypted with 2048 -bit RSA key, ID 05ED43DC, created 2019 -03-15 \"Demo User (AWS org project-user acct gpg key w/ passphrase) <username.lastname@domain.com>\" Vi0JA | c%fP*FhL } CE-D7ssp_TVGlf#% Depending on your shell version an extra % character could appear as shown below, you must disregard this character since it's not part of the Initial (one time) AWS Web Console password. If all went well, the decrypted password should be there Workaround for Mac users \u00b6 There are some situations where gpg keys generated on Mac don't work properly, generating errors like the following: \u2577 \u2502 Error: error encrypting password during IAM User Login Profile ( user.lastname ) creation: Error encrypting Password: error parsing given PGP key: openpgp: unsupported feature: unsupported oid: 2b060104019755010501 \u2502 \u2502 with module.user [ \"user.lastname\" ] .aws_iam_user_login_profile.this [ 0 ] , \u2502 on .terraform/modules/user/modules/iam-user/main.tf line 12 , in resource \"aws_iam_user_login_profile\" \"this\" : \u2502 12 : resource \"aws_iam_user_login_profile\" \"this\" { \u2502 Docker is required for this workaround. If you don't have docker on your PC, don't worry. You can easily install it following the steps on the official page . In these cases, execute the following steps: Run an interactive console into an ubuntu container mounting your gpg directory. docker run --rm -it --mount type = bind,src = /Users/username/.gnupg,dst = /root/.gnupg ubuntu:latest Inside the container, install required packages. apt update apt install gnupg Generate the key as described in previous sections, running gpg --gen-key at the interactive console in the ubuntu container. To fix permissions in your gpg directory, run these commands at the interactive console in the ubuntu container. find ~/.gnupg -type f -exec chmod 600 {} \\; find ~/.gnupg -type d -exec chmod 700 {} \\; Now you should be able to export the gpg key and decode the password from your mac, running gpg --export \"Your Name\" | base64 . Finally, decrypt the password in your mac, executing: echo \"YOUR ENCRYPTED STRING PASSWORD HERE\" | base64 --decode > a_file_with_your_pass gpg --decrypt a_file_with_your_pass","title":"gpg"},{"location":"user-guide/features/identities/gpg/#gpg-keys-helper","text":"","title":"GPG keys helper"},{"location":"user-guide/features/identities/gpg/#why-to-use-gpg","text":"By default our Leverage Reference Architectre base-identities layer approach is to use IAM module to manage AWS IAM Users credentials with encryption to grant strong security . This module outputs commands and GPG messages which can be decrypted either using command line to get AWS Web Console user's password and user's secret key. Notes for keybase users If possible, always use GPG encryption to prevent Terraform from keeping unencrypted password and access secret key in state file. Keybase pre-requisites When gpg_key is specified as keybase:username , make sure that the user public key has already been uploaded to the Reference Architecture base-identities layer keys folder","title":"Why to use GPG?"},{"location":"user-guide/features/identities/gpg/#how-to-manage-your-gpg-keys","text":"Create a key pair NOTE: the user for whom this account is being created needs to do this Install gpg Run gpg --version to confirm Run gpg --gen-key and provide \"Your Name\" and \"Your Email\" as instructed -- you must also provide a passphrase Run gpg --list-keys to check that your key was generated Delete a key pair Run gpg --list-keys to check your key id Run gpg --delete-secret-keys \"Your Name\" to delete your private gpg key Run gpg --delete-key \"Your Name\" to delete your public gpg key Export your public key NOTE: the user must have created a key pair before doing this Run gpg --export \"Your Name\" | base64 Now the user can share her/his public key for creating her/his account Decrypt your encrypted password The user should copy the encrypted password from whatever media it was provided to her/him Run echo \"YOUR ENCRYPTED STRING PASSWORD HERE\" | base64 --decode > a_file_with_your_pass $ echo \"wcBMA/ujy1wF7UPcAQgASLL/x8zz7OHIP+EHU7IAZfa1A9qD9ScP5orK1M473WlXVgPrded0iHpyZRwsJRS8Xe38AHZ65O6CnywdR522MbD\\ RD6Yz+Bfc9NwO316bfSoTpyROXvMi+cfMEcihInHaCIP9YWBaI3eJ6VFdn90g9of00HYehBux7E2VitMuWo+v46W1p8/pw0b0H5qcppnUYYOjjSbjzzAuMF\\ yNB5M1K8av61bPQPQTxBH3SFaM0B4RNmUl1bHKDIcdESYyIP/PRLQ45Rs5MzGgALIxBy24qdPNjHJQR48/5QV4nzB9qeEe4eWDB4ynSEfLsXggiz8fsbajV\\ gSLNsdpqP9lYaueFdLgAeR6a+EjvqZfq0hZAgoiymsb4Qtn4A7gmeGmNeDE4td1mVfgzuTZ9zhnSbAYlXNIiM4b0MeX4HrjFkT/Aq+A/rvgBeKhszWD4Ibh\\ A4PgC+QPiJRb5kQ/mX8DheQfAHJ24iUZk1jh6AsA\" | base64 --decode > encrypted_pass Run gpg --decrypt a_file_with_your_pass (in the path you've executed 2.) to effectively decrypt your pass using your gpg key and its passphrase $ gpg --decrypt encrypted_pass You need a passphrase to unlock the secret key for user: \"Demo User (AWS org project-user acct gpg key w/ passphrase) <username.lastname@domain.com>\" 2048 -bit RSA key, ID 05ED43DC, created 2019 -03-15 ( main key ID D64DD59F ) gpg: encrypted with 2048 -bit RSA key, ID 05ED43DC, created 2019 -03-15 \"Demo User (AWS org project-user acct gpg key w/ passphrase) <username.lastname@domain.com>\" Vi0JA | c%fP*FhL } CE-D7ssp_TVGlf#% Depending on your shell version an extra % character could appear as shown below, you must disregard this character since it's not part of the Initial (one time) AWS Web Console password. If all went well, the decrypted password should be there","title":"How to manage your GPG keys?"},{"location":"user-guide/features/identities/gpg/#workaround-for-mac-users","text":"There are some situations where gpg keys generated on Mac don't work properly, generating errors like the following: \u2577 \u2502 Error: error encrypting password during IAM User Login Profile ( user.lastname ) creation: Error encrypting Password: error parsing given PGP key: openpgp: unsupported feature: unsupported oid: 2b060104019755010501 \u2502 \u2502 with module.user [ \"user.lastname\" ] .aws_iam_user_login_profile.this [ 0 ] , \u2502 on .terraform/modules/user/modules/iam-user/main.tf line 12 , in resource \"aws_iam_user_login_profile\" \"this\" : \u2502 12 : resource \"aws_iam_user_login_profile\" \"this\" { \u2502 Docker is required for this workaround. If you don't have docker on your PC, don't worry. You can easily install it following the steps on the official page . In these cases, execute the following steps: Run an interactive console into an ubuntu container mounting your gpg directory. docker run --rm -it --mount type = bind,src = /Users/username/.gnupg,dst = /root/.gnupg ubuntu:latest Inside the container, install required packages. apt update apt install gnupg Generate the key as described in previous sections, running gpg --gen-key at the interactive console in the ubuntu container. To fix permissions in your gpg directory, run these commands at the interactive console in the ubuntu container. find ~/.gnupg -type f -exec chmod 600 {} \\; find ~/.gnupg -type d -exec chmod 700 {} \\; Now you should be able to export the gpg key and decode the password from your mac, running gpg --export \"Your Name\" | base64 . Finally, decrypt the password in your mac, executing: echo \"YOUR ENCRYPTED STRING PASSWORD HERE\" | base64 --decode > a_file_with_your_pass gpg --decrypt a_file_with_your_pass","title":"Workaround for Mac users"},{"location":"user-guide/features/identities/identities/","text":"Identity and Access Management (IAM) Layer \u00b6 How it works documentation: identities User guide \u00b6 Please follow the steps below to orchestrate your base-identities layer 1 st in your project-root AWS account and afterwards in your project-security account. IAM user standard creation workflow Pre-requisite add Public PGP Key following the documentation For steps 3. and 4. consider following Leverage's Terraform workflow Update (add | remove) your IAM Users associated code and deploy security/global/base-identities/users.tf Consider customizing your account Alias and Password Policy Update (add | remove | edit) your IAM Groups associated code and deploy security/global/base-identities/groups.tf Get and share the IAM Users AWS Console user id and its OTP associated password from the make apply outputs temporally set sensitive = false to get the encrypted outputs in your prompt output. Each user will need to decrypt its AWS Console Password, you could share the associated documentation with them. Users must login to the AWS Web Console (https://project-security.signin.aws.amazon.com/console) with their decrypted password and create new pass Activate MFA for Web Console (Optional but strongly recommended) User should create his AWS ACCESS KEYS if needed User could optionally set up ~/.aws/project/credentials + ~/.aws/project/config following the immediately below AWS Credentials Setup sub-section To allow users to Access AWS Organization member account consider repeating step 3. but for the corresponding member accounts: shared/global/base-identities apps-devstg/global/base-identities app-prd/global/base-identities Recommended post-task \u00b6 Deactivating AWS STS in not in use AWS Region When you activate STS endpoints for a Region, AWS STS can issue temporary credentials to users and roles in your account that make an AWS STS request. Those credentials can then be used in any Region that is enabled by default or is manually enabled. You must activate the Region in the account where the temporary credentials are generated. It does not matter whether a user is signed into the same account or a different account when they make the request. To activate or deactivate AWS STS in a Region that is enabled by default (console) Sign in as a root user or an IAM user with permissions to perform IAM administration tasks. Open the IAM console and in the navigation pane choose Account settings. If necessary, expand Security Token Service (STS), find the Region that you want to activate, and then choose Activate or Deactivate. For Regions that must be enabled, we activate STS automatically when you enable the Region. After you enable a Region, AWS STS is always active for the Region and you cannot deactivate it. To learn how to enable a Region, see Managing AWS Regions in the AWS General Reference. Source | AWS Documentation IAM User Guide | Activating and deactivating AWS STS in an AWS Region Figure: Deactivating AWS STS in not in use AWS Region. Only in used Regions must have STS activated. Next Steps \u00b6 Setup your AWS Credentials","title":"Identities"},{"location":"user-guide/features/identities/identities/#identity-and-access-management-iam-layer","text":"How it works documentation: identities","title":"Identity and Access Management (IAM) Layer"},{"location":"user-guide/features/identities/identities/#user-guide","text":"Please follow the steps below to orchestrate your base-identities layer 1 st in your project-root AWS account and afterwards in your project-security account. IAM user standard creation workflow Pre-requisite add Public PGP Key following the documentation For steps 3. and 4. consider following Leverage's Terraform workflow Update (add | remove) your IAM Users associated code and deploy security/global/base-identities/users.tf Consider customizing your account Alias and Password Policy Update (add | remove | edit) your IAM Groups associated code and deploy security/global/base-identities/groups.tf Get and share the IAM Users AWS Console user id and its OTP associated password from the make apply outputs temporally set sensitive = false to get the encrypted outputs in your prompt output. Each user will need to decrypt its AWS Console Password, you could share the associated documentation with them. Users must login to the AWS Web Console (https://project-security.signin.aws.amazon.com/console) with their decrypted password and create new pass Activate MFA for Web Console (Optional but strongly recommended) User should create his AWS ACCESS KEYS if needed User could optionally set up ~/.aws/project/credentials + ~/.aws/project/config following the immediately below AWS Credentials Setup sub-section To allow users to Access AWS Organization member account consider repeating step 3. but for the corresponding member accounts: shared/global/base-identities apps-devstg/global/base-identities app-prd/global/base-identities","title":"User guide"},{"location":"user-guide/features/identities/identities/#recommended-post-task","text":"Deactivating AWS STS in not in use AWS Region When you activate STS endpoints for a Region, AWS STS can issue temporary credentials to users and roles in your account that make an AWS STS request. Those credentials can then be used in any Region that is enabled by default or is manually enabled. You must activate the Region in the account where the temporary credentials are generated. It does not matter whether a user is signed into the same account or a different account when they make the request. To activate or deactivate AWS STS in a Region that is enabled by default (console) Sign in as a root user or an IAM user with permissions to perform IAM administration tasks. Open the IAM console and in the navigation pane choose Account settings. If necessary, expand Security Token Service (STS), find the Region that you want to activate, and then choose Activate or Deactivate. For Regions that must be enabled, we activate STS automatically when you enable the Region. After you enable a Region, AWS STS is always active for the Region and you cannot deactivate it. To learn how to enable a Region, see Managing AWS Regions in the AWS General Reference. Source | AWS Documentation IAM User Guide | Activating and deactivating AWS STS in an AWS Region Figure: Deactivating AWS STS in not in use AWS Region. Only in used Regions must have STS activated.","title":"Recommended post-task"},{"location":"user-guide/features/identities/identities/#next-steps","text":"Setup your AWS Credentials","title":"Next Steps"},{"location":"user-guide/features/monitoring/apm/","text":"Application Performance Monitoring (APM) and Business Performance \u00b6 How it works documentation: APM User guide \u00b6 TODO","title":"APM"},{"location":"user-guide/features/monitoring/apm/#application-performance-monitoring-apm-and-business-performance","text":"How it works documentation: APM","title":"Application Performance Monitoring (APM) and Business Performance"},{"location":"user-guide/features/monitoring/apm/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/features/monitoring/logs/","text":"","title":"Logs"},{"location":"user-guide/features/monitoring/metrics/","text":"","title":"Metrics"},{"location":"user-guide/features/monitoring/monitoring/","text":"","title":"Monitoring"},{"location":"user-guide/features/monitoring/tracing/","text":"","title":"Tracing"},{"location":"user-guide/features/network/dns/","text":"Route53 DNS hosted zones \u00b6 How it works documentation: DNS User guide \u00b6 pre-requisites Review & update configs Review & understand the workflow Steps DNS service has to be orchestrated from /shared/global/base-dns layer following the standard workflow Migrated AWS Route53 Hosted Zones between AWS Accounts \u00b6 We'll need to setup the Route53 DNS service with an active-active config to avoid any type of service disruption and downtime. This would then allow the Name Servers of both AWS Accounts to be added to your domain provider (eg: namecheap.com ) and have for example: 4 x ns ( project-legacy Route53 Account) 4 x ns ( project-shared Route53 Account) After the records have propagated and everything looks OK we could remove the project-legacy Route53 ns from your domain provider (eg: namecheap.com ) and leave only the of project-shared ones. This official Migrating a hosted zone to a different AWS account - Amazon Route 53 article explains this procedure step by step: AWS Route53 hosted zone migration steps Create records in the new hosted zone (bb-shared) Compare records in the old and new hosted zones (bb-legacy) Update the domain registration to use name servers for the new hosted zone (NIC updated to use both bb-legacy + bb-shared) Wait for DNS resolvers to start using the new hosted zone (Optional) delete the old hosted zone (bb-legacy), remember you'll need to delete the ns delegation records from your domain registration (NIC) too.","title":"DNS"},{"location":"user-guide/features/network/dns/#route53-dns-hosted-zones","text":"How it works documentation: DNS","title":"Route53 DNS hosted zones"},{"location":"user-guide/features/network/dns/#user-guide","text":"pre-requisites Review & update configs Review & understand the workflow Steps DNS service has to be orchestrated from /shared/global/base-dns layer following the standard workflow","title":"User guide"},{"location":"user-guide/features/network/dns/#migrated-aws-route53-hosted-zones-between-aws-accounts","text":"We'll need to setup the Route53 DNS service with an active-active config to avoid any type of service disruption and downtime. This would then allow the Name Servers of both AWS Accounts to be added to your domain provider (eg: namecheap.com ) and have for example: 4 x ns ( project-legacy Route53 Account) 4 x ns ( project-shared Route53 Account) After the records have propagated and everything looks OK we could remove the project-legacy Route53 ns from your domain provider (eg: namecheap.com ) and leave only the of project-shared ones. This official Migrating a hosted zone to a different AWS account - Amazon Route 53 article explains this procedure step by step: AWS Route53 hosted zone migration steps Create records in the new hosted zone (bb-shared) Compare records in the old and new hosted zones (bb-legacy) Update the domain registration to use name servers for the new hosted zone (NIC updated to use both bb-legacy + bb-shared) Wait for DNS resolvers to start using the new hosted zone (Optional) delete the old hosted zone (bb-legacy), remember you'll need to delete the ns delegation records from your domain registration (NIC) too.","title":"Migrated AWS Route53 Hosted Zones between AWS Accounts"},{"location":"user-guide/features/network/vpc-addressing/","text":"Network Layer \u00b6 How it works documentation: Networking User guide \u00b6 Please follow the steps below to orchestrate your base-network layer, 1 st in your project-shared AWS account and afterwards in the necessary member accounts which will host network connected resources (EC2, Lambda, EKS, RDS, ALB, NLB, etc): project-apps-devstg account. project-apps-prd account. Network layer standard creation workflow Please follow Leverage's Terraform workflow for each of your accounts. We'll start by project-shared AWS Account Update (add | remove | customize) your VPC associated code before deploying this layer shared/base-network Main files network.tf locals.tf Repeat for every AWS member Account that needs its own VPC Access AWS Organization member account consider repeating step 3. but for the corresponding member accounts. Next Steps \u00b6 AWS VPC Peering","title":"VPC"},{"location":"user-guide/features/network/vpc-addressing/#network-layer","text":"How it works documentation: Networking","title":"Network Layer"},{"location":"user-guide/features/network/vpc-addressing/#user-guide","text":"Please follow the steps below to orchestrate your base-network layer, 1 st in your project-shared AWS account and afterwards in the necessary member accounts which will host network connected resources (EC2, Lambda, EKS, RDS, ALB, NLB, etc): project-apps-devstg account. project-apps-prd account. Network layer standard creation workflow Please follow Leverage's Terraform workflow for each of your accounts. We'll start by project-shared AWS Account Update (add | remove | customize) your VPC associated code before deploying this layer shared/base-network Main files network.tf locals.tf Repeat for every AWS member Account that needs its own VPC Access AWS Organization member account consider repeating step 3. but for the corresponding member accounts.","title":"User guide"},{"location":"user-guide/features/network/vpc-addressing/#next-steps","text":"AWS VPC Peering","title":"Next Steps"},{"location":"user-guide/features/network/vpc-peering/","text":"Diagram: Network Service (cross-account VPC peering ) \u00b6 How it works \u00b6 TODO User guide \u00b6 TODO","title":"VPC Peering"},{"location":"user-guide/features/network/vpc-peering/#diagram-network-service-cross-account-vpc-peering","text":"","title":"Diagram: Network Service (cross-account VPC peering)"},{"location":"user-guide/features/network/vpc-peering/#how-it-works","text":"TODO","title":"How it works"},{"location":"user-guide/features/network/vpc-peering/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/features/organization/organization-init/","text":"Reference Architecture: Terraform AWS Organizations account baseline \u00b6 How it works documentation: organization documentation: organization accounts User guide \u00b6 Pre-requisites \u00b6 You'll need an email to create and register your AWS Organization Root Account . For this purpose we recommend to avoid using a personal email account. Instead, whenever possible, it should ideally be associated, with a distribution list email such as a GSuite Group to ensure the proper admins member's team (DevOps | SecOps | Cloud Engineering Team) to manage its notifications avoiding a single point of contact (constraint). Email setup example \u00b6 GSuite Group Email address: aws@domain.com (to which admins / owners belong), and then using the + we generate the aliases automatically implicitly when running Terraform's Leverage code. aws+security@binbash.com.ar aws+shared@binbash.com.ar aws+network@binbash.com.ar aws+apps-devstg@binbash.com.ar aws+apps-prd@binbash.com.ar Reference Code as example # # Project Prd: services and resources related to production are placed and # maintained here. # resource \"aws_organizations_account\" \"apps_prd\" { name = \"apps-prd\" email = \"aws+apps-prd@doamin.ar\" parent_id = aws_organizations_organizational_unit.apps_prd.id } Reference AWS Organization init workflow \u00b6 Steps for initial AWS Organization setup Create a brand new AWS Account , intended to be our AWS Organization Management (root) Account Name: project_name-management , eg: leverage-management MFA: Enable MFA for your root user Billing: review billing setup as pre-requisite to deploy the AWS Org. At your Management account billing setup check Activate IAM User and Role Access to Billing Information If needed Update Alternate Contacts Via AWS Web Console: in project_name-management previously created account (eg, name: leverage-management , email: aws@binbash.com.ar ) create the mgmt-org-admin IAM user with Admin privileges (admin IAM policy attached), which will be use for the initial AWS Org bootstrapping. NOTE: After it\u2019s 1 st execution only nominated Org admin users will persist in the project-management account. Via AWS Web Console: in project-management account create mgmt-org-admin IAM user AWS ACCESS KEYS NOTE: This could be created all in one in the previous step (N\u00ba 2). Figure: AWS Web Console screenshot. (Source: Binbash, \"AWs Organization management account init IAM admin user\", accessed June 16 th 2021). Figure: AWS Web Console screenshot. (Source: Binbash, \"AWs Organization management account init IAM admin user\", accessed June 16 th 2021). Set your IAM credentials in the machine your're going to exec the leverage cli (remember this are the mgmt-org-admin temporary user credentials shown in the screenshot immediately above). Set up your Leverage reference architecture configs in order to work with your new account and `org-mgmt-admin IAM user common config account configs Setup and create the terraform remote state for the new AWS Org Management account terraform remote state config terraform remote state workflow terraform remote state ref code You'll 1 st get a local state and then you'll need to move your tf state to s3; validate it and finally delete local state files The AWS Organization from the Reference Architecture /le-tf-infra-aws/root/global/organizations will be orchestrated using the leverage cli following the standard workflow . the Management account has to be imported into de the code. Verify your Management account email address in order to invite existing (legacy) AWS accounts to join your organization. Organization setup post-steps \u00b6 AWS Organization setup post-steps Following the doc orchestrate v\u00eda the leverage cli workflow the Mgmt Account IAM layer ( base-identities ) with the admin IAM Users (consider this/these users will have admin privileges over the entire AWS Org assuming the OrganizationAccountAccessRole ) -> le-tf-infra-aws/root/global/base-identities The IAM role: OrganizationAccessAccountRole => does not exist in the initial Management (root) account, this will be created by the code in this layer. Mgmt account admin user permanent credentials set up => setup in your workstation the AWS credentials ) for the OrganizationAccountAccessRole IAM role ( project_short-root-oaar , eg: bb-root-oaar ). Then validate within each initial mgmt account layer that the profile bb-root-oaar is correctly configured at the below presented config files, as well as any other necessary setup. /config/common.config /root/config/account.config /root/config/backend.config Setup (code and config files) and Orchestrate the /security/global/base-identities layer via leverage cli on your security account for consolidated and centralized User Mgmt and access to the AWS Org. AWS Organizations: invite pre-existing (legacy) accounts Pending to document the debug mode for the mfa script","title":"Organization Init"},{"location":"user-guide/features/organization/organization-init/#reference-architecture-terraform-aws-organizations-account-baseline","text":"How it works documentation: organization documentation: organization accounts","title":"Reference Architecture: Terraform AWS Organizations account baseline"},{"location":"user-guide/features/organization/organization-init/#user-guide","text":"","title":"User guide"},{"location":"user-guide/features/organization/organization-init/#pre-requisites","text":"You'll need an email to create and register your AWS Organization Root Account . For this purpose we recommend to avoid using a personal email account. Instead, whenever possible, it should ideally be associated, with a distribution list email such as a GSuite Group to ensure the proper admins member's team (DevOps | SecOps | Cloud Engineering Team) to manage its notifications avoiding a single point of contact (constraint).","title":"Pre-requisites"},{"location":"user-guide/features/organization/organization-init/#email-setup-example","text":"GSuite Group Email address: aws@domain.com (to which admins / owners belong), and then using the + we generate the aliases automatically implicitly when running Terraform's Leverage code. aws+security@binbash.com.ar aws+shared@binbash.com.ar aws+network@binbash.com.ar aws+apps-devstg@binbash.com.ar aws+apps-prd@binbash.com.ar Reference Code as example # # Project Prd: services and resources related to production are placed and # maintained here. # resource \"aws_organizations_account\" \"apps_prd\" { name = \"apps-prd\" email = \"aws+apps-prd@doamin.ar\" parent_id = aws_organizations_organizational_unit.apps_prd.id }","title":"Email setup example"},{"location":"user-guide/features/organization/organization-init/#reference-aws-organization-init-workflow","text":"Steps for initial AWS Organization setup Create a brand new AWS Account , intended to be our AWS Organization Management (root) Account Name: project_name-management , eg: leverage-management MFA: Enable MFA for your root user Billing: review billing setup as pre-requisite to deploy the AWS Org. At your Management account billing setup check Activate IAM User and Role Access to Billing Information If needed Update Alternate Contacts Via AWS Web Console: in project_name-management previously created account (eg, name: leverage-management , email: aws@binbash.com.ar ) create the mgmt-org-admin IAM user with Admin privileges (admin IAM policy attached), which will be use for the initial AWS Org bootstrapping. NOTE: After it\u2019s 1 st execution only nominated Org admin users will persist in the project-management account. Via AWS Web Console: in project-management account create mgmt-org-admin IAM user AWS ACCESS KEYS NOTE: This could be created all in one in the previous step (N\u00ba 2). Figure: AWS Web Console screenshot. (Source: Binbash, \"AWs Organization management account init IAM admin user\", accessed June 16 th 2021). Figure: AWS Web Console screenshot. (Source: Binbash, \"AWs Organization management account init IAM admin user\", accessed June 16 th 2021). Set your IAM credentials in the machine your're going to exec the leverage cli (remember this are the mgmt-org-admin temporary user credentials shown in the screenshot immediately above). Set up your Leverage reference architecture configs in order to work with your new account and `org-mgmt-admin IAM user common config account configs Setup and create the terraform remote state for the new AWS Org Management account terraform remote state config terraform remote state workflow terraform remote state ref code You'll 1 st get a local state and then you'll need to move your tf state to s3; validate it and finally delete local state files The AWS Organization from the Reference Architecture /le-tf-infra-aws/root/global/organizations will be orchestrated using the leverage cli following the standard workflow . the Management account has to be imported into de the code. Verify your Management account email address in order to invite existing (legacy) AWS accounts to join your organization.","title":"Reference AWS Organization init workflow"},{"location":"user-guide/features/organization/organization-init/#organization-setup-post-steps","text":"AWS Organization setup post-steps Following the doc orchestrate v\u00eda the leverage cli workflow the Mgmt Account IAM layer ( base-identities ) with the admin IAM Users (consider this/these users will have admin privileges over the entire AWS Org assuming the OrganizationAccountAccessRole ) -> le-tf-infra-aws/root/global/base-identities The IAM role: OrganizationAccessAccountRole => does not exist in the initial Management (root) account, this will be created by the code in this layer. Mgmt account admin user permanent credentials set up => setup in your workstation the AWS credentials ) for the OrganizationAccountAccessRole IAM role ( project_short-root-oaar , eg: bb-root-oaar ). Then validate within each initial mgmt account layer that the profile bb-root-oaar is correctly configured at the below presented config files, as well as any other necessary setup. /config/common.config /root/config/account.config /root/config/backend.config Setup (code and config files) and Orchestrate the /security/global/base-identities layer via leverage cli on your security account for consolidated and centralized User Mgmt and access to the AWS Org. AWS Organizations: invite pre-existing (legacy) accounts Pending to document the debug mode for the mfa script","title":"Organization setup post-steps"},{"location":"user-guide/features/organization/organization-legacy-accounts/","text":"Reference Architecture: Terraform AWS Organizations invite pre-existing (legacy) accounts \u00b6 How it works documentation: organization documentation: organization accounts User guide \u00b6 Pre-requisites \u00b6 You must have your AWS Organization deployed and access to your Management account as described in the /user-guide/features/organization/organization-init section. Invite AWS pre-existing (legacy) accounts to your AWS Organization \u00b6 AWS Org pre-existing accounts invitation Via AWS Web Console: from your project-root account invite the pre-existing project-legacy (1 to n accounts). Via AWS Web Console: in project-legacy create the OrganizationAccountAccessRole IAM Role with Admin permissions. Should follow Creating the OrganizationAccountAccessRole in an invited member account section. Import your project-legacy account as code. Update the following variables in ./@bin/makefiles/terraform12/Makefile.terraform12-import-rm TF_IMPORT_RESOURCE := \"aws_organizations_organizational_unit.bbl_apps_devstg\" TF_IMPORT_RESOURCE_ID := \"ou-oz9d-yl3npduj\" TF_RM_RESOURCE := \"aws_organizations_organizational_unit.bbl_apps_devstg\" Then from the root context -> cd ./root/organization make import TODO THIS STEP MUST BE UPDATED WITH THE leverage cli WORKFLOW","title":"Invite Legacy accounts"},{"location":"user-guide/features/organization/organization-legacy-accounts/#reference-architecture-terraform-aws-organizations-invite-pre-existing-legacy-accounts","text":"How it works documentation: organization documentation: organization accounts","title":"Reference Architecture: Terraform AWS Organizations invite pre-existing (legacy) accounts"},{"location":"user-guide/features/organization/organization-legacy-accounts/#user-guide","text":"","title":"User guide"},{"location":"user-guide/features/organization/organization-legacy-accounts/#pre-requisites","text":"You must have your AWS Organization deployed and access to your Management account as described in the /user-guide/features/organization/organization-init section.","title":"Pre-requisites"},{"location":"user-guide/features/organization/organization-legacy-accounts/#invite-aws-pre-existing-legacy-accounts-to-your-aws-organization","text":"AWS Org pre-existing accounts invitation Via AWS Web Console: from your project-root account invite the pre-existing project-legacy (1 to n accounts). Via AWS Web Console: in project-legacy create the OrganizationAccountAccessRole IAM Role with Admin permissions. Should follow Creating the OrganizationAccountAccessRole in an invited member account section. Import your project-legacy account as code. Update the following variables in ./@bin/makefiles/terraform12/Makefile.terraform12-import-rm TF_IMPORT_RESOURCE := \"aws_organizations_organizational_unit.bbl_apps_devstg\" TF_IMPORT_RESOURCE_ID := \"ou-oz9d-yl3npduj\" TF_RM_RESOURCE := \"aws_organizations_organizational_unit.bbl_apps_devstg\" Then from the root context -> cd ./root/organization make import TODO THIS STEP MUST BE UPDATED WITH THE leverage cli WORKFLOW","title":"Invite AWS pre-existing (legacy) accounts to your AWS Organization"},{"location":"user-guide/features/reliability/backups/","text":"","title":"Backups"},{"location":"user-guide/features/reliability/dr/","text":"","title":"Disaster Recovery"},{"location":"user-guide/features/reliability/health-checks/","text":"","title":"Health Checks"},{"location":"user-guide/features/secrets/secrets/","text":"","title":"Secrets"},{"location":"user-guide/features/security/services/","text":"AWS Security & Compliance Services \u00b6 How it works \u00b6 TODO User guide \u00b6 TODO","title":"Services"},{"location":"user-guide/features/security/services/#aws-security-compliance-services","text":"","title":"AWS Security &amp; Compliance Services"},{"location":"user-guide/features/security/services/#how-it-works","text":"TODO","title":"How it works"},{"location":"user-guide/features/security/services/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/features/security/vpn/","text":"VPN Server \u00b6 How it works \u00b6 TODO User guide \u00b6 TODO","title":"VPN"},{"location":"user-guide/features/security/vpn/#vpn-server","text":"","title":"VPN Server"},{"location":"user-guide/features/security/vpn/#how-it-works","text":"TODO","title":"How it works"},{"location":"user-guide/features/security/vpn/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/features/sso/sso/","text":"AWS SSO \u00b6 Before deploying your AWS SSO definition in the project, it will first have to be manually enabled in the AWS Management Console. Prerequisites Enable AWS SSO After that, choosing and configuring an Identity Provider (IdP) is the next step. For this, we will make use of JumpCloud, as described in the how it works section. These resources point to all requirements and procedures to have your JumpCloud account setup and synched with AWS SSO: AWS JumpCloud support guide JumpCloud guide on how to configure as IdP for AWS SSO Once this is set up, the SSO layer can be safely deployed. Preparing the project to use AWS SSO \u00b6 To implement SSO authentication in your IaC definition, some configuration values need to be present in your project. Global configuration \u00b6 In the global configuration file, or common.tfvars , found in the root of the project, under the config directory ... \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars ... Three values will govern the behavior of SSO: # AWS SSO sso_enabled = true sso_start_url = \"https://myexample.awsapps.com/start\" sso_region = \"us-east-1\" sso_enabled determines whether leverage will attempt to use credentials obtained via SSO to authenticate against AWS sso_start_url and sso_region are necessary to configure AWS CLI correctly in order to be able to get the credentials When configuring AWS CLI, a default profile is created containing region and output default settings. The region value is obtained from the previously mentioned sso_region , however, you can override this behavior by configuring a region_primary value in the same global configuration file, as so: region_primary = \"us-west-2\" Account configuration \u00b6 In every account configuration file, namely account.tfvars , found in the config directory under the account's folder ... \u251c\u2500\u2500 \ud83d\udcc2 account | \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars ... The role to be assumed via SSO is configured: # SSO sso_role = \"DevOps\" This is the role for which credentials will be obtained via SSO when operating in the current layer. Authentication via SSO \u00b6 1. Configuring AWS SSO \u00b6 Once the project has been set up to use SSO, the profiles that AWS CLI will use to authenticate against the service need to be created. To do this, simply run leverage aws configure sso . This step needs to be performed every time the user works in a new account that assumes a different role than the one that they are currently using. For example, if the user is working in the security account, assuming the DevOps role, but needs to operate on a layer of the management account which requires assuming an Administrator role, then SSO needs to be reconfigured. Attention This step simply writes over the credentials files for AWS CLI without asking for confirmation from the user. So it's recommended to backup/wipe old credentials before executing this step in order to avoid loss of credentials or conflicts with profiles having similar names to the ones generated by Leverage. 2. Logging in \u00b6 This step is executed as part of the previous one. So if the user has just configured SSO, this step is not required. Having SSO configured, the user will proceed to log in. This is achieved by running leverage aws sso login . In this step, the user is prompted to manually authorize the log in process via a web console. When logging in, Leverage obtains a token from SSO. This token is later used to obtain the credentials needed for the layer the user is working on. This token has a relatively short life span to strike a balance between security and convenience for the user. 3. Working on a layer \u00b6 When SSO is enabled in the project, Leverage will automatically figure out the required credentials for the current layer, and attempt to get them from AWS every time the user executes a command on it. These credentials are short lived (30 minutes) for security reasons, and will be refreshed automatically whenever they expire. 4. Logging out \u00b6 When the user has finished working, running leverage sso logout wipes out all remaining valid credentials and voids the token obtained from logging in.","title":"SSO"},{"location":"user-guide/features/sso/sso/#aws-sso","text":"Before deploying your AWS SSO definition in the project, it will first have to be manually enabled in the AWS Management Console. Prerequisites Enable AWS SSO After that, choosing and configuring an Identity Provider (IdP) is the next step. For this, we will make use of JumpCloud, as described in the how it works section. These resources point to all requirements and procedures to have your JumpCloud account setup and synched with AWS SSO: AWS JumpCloud support guide JumpCloud guide on how to configure as IdP for AWS SSO Once this is set up, the SSO layer can be safely deployed.","title":"AWS SSO"},{"location":"user-guide/features/sso/sso/#preparing-the-project-to-use-aws-sso","text":"To implement SSO authentication in your IaC definition, some configuration values need to be present in your project.","title":"Preparing the project to use AWS SSO"},{"location":"user-guide/features/sso/sso/#global-configuration","text":"In the global configuration file, or common.tfvars , found in the root of the project, under the config directory ... \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars ... Three values will govern the behavior of SSO: # AWS SSO sso_enabled = true sso_start_url = \"https://myexample.awsapps.com/start\" sso_region = \"us-east-1\" sso_enabled determines whether leverage will attempt to use credentials obtained via SSO to authenticate against AWS sso_start_url and sso_region are necessary to configure AWS CLI correctly in order to be able to get the credentials When configuring AWS CLI, a default profile is created containing region and output default settings. The region value is obtained from the previously mentioned sso_region , however, you can override this behavior by configuring a region_primary value in the same global configuration file, as so: region_primary = \"us-west-2\"","title":"Global configuration"},{"location":"user-guide/features/sso/sso/#account-configuration","text":"In every account configuration file, namely account.tfvars , found in the config directory under the account's folder ... \u251c\u2500\u2500 \ud83d\udcc2 account | \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars ... The role to be assumed via SSO is configured: # SSO sso_role = \"DevOps\" This is the role for which credentials will be obtained via SSO when operating in the current layer.","title":"Account configuration"},{"location":"user-guide/features/sso/sso/#authentication-via-sso","text":"","title":"Authentication via SSO"},{"location":"user-guide/features/sso/sso/#1-configuring-aws-sso","text":"Once the project has been set up to use SSO, the profiles that AWS CLI will use to authenticate against the service need to be created. To do this, simply run leverage aws configure sso . This step needs to be performed every time the user works in a new account that assumes a different role than the one that they are currently using. For example, if the user is working in the security account, assuming the DevOps role, but needs to operate on a layer of the management account which requires assuming an Administrator role, then SSO needs to be reconfigured. Attention This step simply writes over the credentials files for AWS CLI without asking for confirmation from the user. So it's recommended to backup/wipe old credentials before executing this step in order to avoid loss of credentials or conflicts with profiles having similar names to the ones generated by Leverage.","title":"1. Configuring AWS SSO"},{"location":"user-guide/features/sso/sso/#2-logging-in","text":"This step is executed as part of the previous one. So if the user has just configured SSO, this step is not required. Having SSO configured, the user will proceed to log in. This is achieved by running leverage aws sso login . In this step, the user is prompted to manually authorize the log in process via a web console. When logging in, Leverage obtains a token from SSO. This token is later used to obtain the credentials needed for the layer the user is working on. This token has a relatively short life span to strike a balance between security and convenience for the user.","title":"2. Logging in"},{"location":"user-guide/features/sso/sso/#3-working-on-a-layer","text":"When SSO is enabled in the project, Leverage will automatically figure out the required credentials for the current layer, and attempt to get them from AWS every time the user executes a command on it. These credentials are short lived (30 minutes) for security reasons, and will be refreshed automatically whenever they expire.","title":"3. Working on a layer"},{"location":"user-guide/features/sso/sso/#4-logging-out","text":"When the user has finished working, running leverage sso logout wipes out all remaining valid credentials and voids the token obtained from logging in.","title":"4. Logging out"},{"location":"user-guide/features/storage/storage/","text":"","title":"Storage"},{"location":"user-guide/leverage-cli/install-leverage-cli/","text":"Install Leverage CLI \u00b6 To use Leverage CLI you need to install it from the Python Package Index (Pypi). Currently, only Linux and Mac OS are supported operative systems. Requirements Python >= 3.8 Git >= 2.25 Docker engine >= 20.x.y Install Pip \u00b6 Ubuntu/Debian CentOS/RHEL Fedora MacOS $ sudo apt install python3-pip $ sudo yum install python3-pip $ sudo dnf install python3-pip Pip should already be installed alongside your Python 3 installation. If for whatever reason this is not the case: $ brew install python3 Install Leverage CLI \u00b6 $ pip3 install leverage Verify your Leverage installation \u00b6 Verify that your Leverage installation was successful by running $ leverage --help Usage: leverage [ OPTIONS ] COMMAND [ ARGS ] ... Leverage Reference Architecture projects command-line tool. Options: -f, --filename TEXT Name of the build file containing the tasks definitions. [ default: build.py ] -l, --list-tasks List available tasks to run. -v, --verbose Increase output verbosity. --version Show the version and exit. -h, --help Show this message and exit. Commands: credentials Manage AWS cli credentials. project Manage a Leverage project. run Perform specified task ( s ) and all of its dependencies. terraform Run Terraform commands in a custom containerized... tf Run Terraform commands in a custom containerized... Installation in an isolated environment \u00b6 If you prefer not to install the Leverage package globally and would like to limit its influence to only the directory of your project, we recommend using tools like Pipenv or Poetry . These tools are commonly used when working with python applications and help manage common issues that may result from installing and using such applications globally. Shell completion \u00b6 To enable autocompletion for Leverage in your shell, do the following: Bash Zsh Fish Add to ~/.bashrc : eval \" $( _LEVERAGE_COMPLETE = bash_source leverage ) \" Add to ~/.zshrc : eval \" $( _LEVERAGE_COMPLETE = zsh_source leverage ) \" Add to ~/.config/fish/completions/leverage.fish : eval ( env _LEVERAGE_COMPLETE = fish_source leverage ) Or to avoid invoking eval every time a shell starts: Bash Zsh Fish Save the script: _LEVERAGE_COMPLETE = bash_source leverage > ~/.leverage-complete.bash Source the script in ~/.bashrc : . ~/.leverage-complete.bash Save the script: _LEVERAGE_COMPLETE = zsh_source leverage > ~/.leverage-complete.zsh Source the script in ~/.zshrc : . ~/.leverage-complete.zsh Save the script to ~/.config/fish/completions/leverage.fish : _LEVERAGE_COMPLETE = fish_source leverage > ~/.config/fish/completions/leverage.fish Start a new shell in order to load any changes made to the shell config.","title":"Install Leverage CLI"},{"location":"user-guide/leverage-cli/install-leverage-cli/#install-leverage-cli","text":"To use Leverage CLI you need to install it from the Python Package Index (Pypi). Currently, only Linux and Mac OS are supported operative systems. Requirements Python >= 3.8 Git >= 2.25 Docker engine >= 20.x.y","title":"Install Leverage CLI"},{"location":"user-guide/leverage-cli/install-leverage-cli/#install-pip","text":"Ubuntu/Debian CentOS/RHEL Fedora MacOS $ sudo apt install python3-pip $ sudo yum install python3-pip $ sudo dnf install python3-pip Pip should already be installed alongside your Python 3 installation. If for whatever reason this is not the case: $ brew install python3","title":"Install Pip"},{"location":"user-guide/leverage-cli/install-leverage-cli/#install-leverage-cli_1","text":"$ pip3 install leverage","title":"Install Leverage CLI"},{"location":"user-guide/leverage-cli/install-leverage-cli/#verify-your-leverage-installation","text":"Verify that your Leverage installation was successful by running $ leverage --help Usage: leverage [ OPTIONS ] COMMAND [ ARGS ] ... Leverage Reference Architecture projects command-line tool. Options: -f, --filename TEXT Name of the build file containing the tasks definitions. [ default: build.py ] -l, --list-tasks List available tasks to run. -v, --verbose Increase output verbosity. --version Show the version and exit. -h, --help Show this message and exit. Commands: credentials Manage AWS cli credentials. project Manage a Leverage project. run Perform specified task ( s ) and all of its dependencies. terraform Run Terraform commands in a custom containerized... tf Run Terraform commands in a custom containerized...","title":"Verify your Leverage installation"},{"location":"user-guide/leverage-cli/install-leverage-cli/#installation-in-an-isolated-environment","text":"If you prefer not to install the Leverage package globally and would like to limit its influence to only the directory of your project, we recommend using tools like Pipenv or Poetry . These tools are commonly used when working with python applications and help manage common issues that may result from installing and using such applications globally.","title":"Installation in an isolated environment"},{"location":"user-guide/leverage-cli/install-leverage-cli/#shell-completion","text":"To enable autocompletion for Leverage in your shell, do the following: Bash Zsh Fish Add to ~/.bashrc : eval \" $( _LEVERAGE_COMPLETE = bash_source leverage ) \" Add to ~/.zshrc : eval \" $( _LEVERAGE_COMPLETE = zsh_source leverage ) \" Add to ~/.config/fish/completions/leverage.fish : eval ( env _LEVERAGE_COMPLETE = fish_source leverage ) Or to avoid invoking eval every time a shell starts: Bash Zsh Fish Save the script: _LEVERAGE_COMPLETE = bash_source leverage > ~/.leverage-complete.bash Source the script in ~/.bashrc : . ~/.leverage-complete.bash Save the script: _LEVERAGE_COMPLETE = zsh_source leverage > ~/.leverage-complete.zsh Source the script in ~/.zshrc : . ~/.leverage-complete.zsh Save the script to ~/.config/fish/completions/leverage.fish : _LEVERAGE_COMPLETE = fish_source leverage > ~/.config/fish/completions/leverage.fish Start a new shell in order to load any changes made to the shell config.","title":"Shell completion"},{"location":"user-guide/leverage-cli/shell/","text":"Shell environment \u00b6 When launching a Terraform shell, Leverage provides the user with a completely isolated environment tailored to operate in the current project via a Docker container. The whole project is mounted on a directory named after the value for project_long in the global configuration file, or simply named \"project\" if this value is not defined. A project named myexample , would be mounted in /myexample . The user's ~/.ssh directory and .gitconfig file are also mounted on /root/.ssh and /etc/gitconfig respectively for convenience. Also, the credentials files ( credentials and config ) found in the project AWS credentials directory ( ~/.aws/myexample ), are mapped to the locations given by the environment variables AWS_SHARED_CREDENTIALS_FILE and AWS_CONFIG_FILE respectively within the container. Authentication \u00b6 Determining which credentials are needed to operate on a layer, and retrieving those credentials, may prove cumbersome for many complex layer definitions. In addition to that, correctly configuring them can also become a tedious an error prone process. For that reason Leverage automates this process upon launching the shell if requested by the user via the shell command options . Bear in mind, that an authenticated shell session's credentials are obtained for the layer in which the session was launched. These credentials may not be valid for other layers in which different roles need to be assumed or require more permissions. Multi-Factor authentication \u00b6 leverage terraform shell --mfa If MFA authentication is required, Leverage will prompt the user for the required tokens for the layer or use the cached credentials if still valid. The user's programmatic keys must be configured beforehand via leverage credentials configure command. Single-Sign On \u00b6 If authentication via SSO is required, the user will need to configure or login into SSO before launching the shell via leverage terraform shell --sso Operations on the project's layer \u00b6 In order to operate in a project's layer, Terraform commands such as plan or apply will need to receive extra parameters providing the location of the files that contain the definition of the variables required by the layer. Usually, these files are: the project global configuration file common.tfvars the account configuration file account.tfvars the terraform backend configuration file backend.tfvars In this case these parameters should take the form: -var-file = /myexample/config/common.tfvars -var-file = /myexample/account/config/account.tfvars -var-file = /myexample/account/config/backend.tfvars ` Relative paths can prove useful when providing these locations. A layer definition may require more than just these files. So, for example, to apply changes on a standard Leverage Reference Architecture layer, the complete command would be: terraform apply -var-file = ../../../config/common.tfvars -var-file = ../../config/account.tfvars -var-file = ../../config/backend.tfvars However, when initializing Terraform different parameters are needed, so it should be run as: terraform init -backend-config = ../../config/backend.tfvars","title":"Shell environment"},{"location":"user-guide/leverage-cli/shell/#shell-environment","text":"When launching a Terraform shell, Leverage provides the user with a completely isolated environment tailored to operate in the current project via a Docker container. The whole project is mounted on a directory named after the value for project_long in the global configuration file, or simply named \"project\" if this value is not defined. A project named myexample , would be mounted in /myexample . The user's ~/.ssh directory and .gitconfig file are also mounted on /root/.ssh and /etc/gitconfig respectively for convenience. Also, the credentials files ( credentials and config ) found in the project AWS credentials directory ( ~/.aws/myexample ), are mapped to the locations given by the environment variables AWS_SHARED_CREDENTIALS_FILE and AWS_CONFIG_FILE respectively within the container.","title":"Shell environment"},{"location":"user-guide/leverage-cli/shell/#authentication","text":"Determining which credentials are needed to operate on a layer, and retrieving those credentials, may prove cumbersome for many complex layer definitions. In addition to that, correctly configuring them can also become a tedious an error prone process. For that reason Leverage automates this process upon launching the shell if requested by the user via the shell command options . Bear in mind, that an authenticated shell session's credentials are obtained for the layer in which the session was launched. These credentials may not be valid for other layers in which different roles need to be assumed or require more permissions.","title":"Authentication"},{"location":"user-guide/leverage-cli/shell/#multi-factor-authentication","text":"leverage terraform shell --mfa If MFA authentication is required, Leverage will prompt the user for the required tokens for the layer or use the cached credentials if still valid. The user's programmatic keys must be configured beforehand via leverage credentials configure command.","title":"Multi-Factor authentication"},{"location":"user-guide/leverage-cli/shell/#single-sign-on","text":"If authentication via SSO is required, the user will need to configure or login into SSO before launching the shell via leverage terraform shell --sso","title":"Single-Sign On"},{"location":"user-guide/leverage-cli/shell/#operations-on-the-projects-layer","text":"In order to operate in a project's layer, Terraform commands such as plan or apply will need to receive extra parameters providing the location of the files that contain the definition of the variables required by the layer. Usually, these files are: the project global configuration file common.tfvars the account configuration file account.tfvars the terraform backend configuration file backend.tfvars In this case these parameters should take the form: -var-file = /myexample/config/common.tfvars -var-file = /myexample/account/config/account.tfvars -var-file = /myexample/account/config/backend.tfvars ` Relative paths can prove useful when providing these locations. A layer definition may require more than just these files. So, for example, to apply changes on a standard Leverage Reference Architecture layer, the complete command would be: terraform apply -var-file = ../../../config/common.tfvars -var-file = ../../config/account.tfvars -var-file = ../../config/backend.tfvars However, when initializing Terraform different parameters are needed, so it should be run as: terraform init -backend-config = ../../config/backend.tfvars","title":"Operations on the project's layer"},{"location":"user-guide/leverage-cli/tasks/","text":"Custom tasks \u00b6 The same way we needed to automate or simplify certain tasks or jobs for the user, you may need to do the same in your project. Leverage CLI does not limit itself to provide only the core functionality required to create and manage your Leverage project, but also allows for the definition of custom tasks that can be used to add capabilities that are outside of Leverage CLI's scope. By implementing new auxiliary Leverage tasks you can achieve consistency and homogeneity in the experience of the user when interacting with your Leverage project and simplify the usage of any other tool that you may require. Tasks \u00b6 Tasks are simple python functions that are marked as such with the use of the @task() decorator. We call the file where all tasks are defined a 'build script', and by default it is assumed to be named build.py . If you use any other name for your build script, you can let Leverage know through the global option --filename . from leverage import task @task () def copy_file ( src , dst ): \"\"\"Copy src file to dst\"\"\" print ( f \"Copying { src } to { dst } \" ) The contents in the task's docstring are used to provide a short description of what's the task's purpose when listing all available tasks to run. $ leverage --list-tasks Tasks in build file ` build.py ` : copy_file Copy src file to dst Powered by Leverage 1 .0.10 Any argument that the task may receive are to be given when running the task . The syntax for passing arguments is similar to that of Rake. $ leverage run copy_file [ \"/path/to/foo\" , \"/path/to/bar\" ] [ 09 :25:59.002 ] [ build.py - \u279c Starting task copy_file ] Copying /path/to/foo to /path/to/bar [ 09 :25:59.005 ] [ build.py - \u2714 Completed task copy_file ] Keyworded arguments are also supported. $ leverage run copy_file [ \"/path/to/foo\" ,dst = \"/path/to/bar\" ] Dependencies \u00b6 The task decorator allows for the definition of dependencies. These are defined as positional arguments in the decorator itself. Multiple dependencies can be defined for each task. from leverage import task @task () def html ( target = \".\" ): \"\"\"Generate HTML.\"\"\" print ( f \"Generating HTML in directory \\\" { target } \\\" \" ) @task () def images (): \"\"\"Prepare images.\"\"\" print ( \"Preparing images...\" ) @task ( html , images ) def start_server ( host = \"localhost\" , port = \"80\" ): \"\"\"Start the server\"\"\" print ( f \"Starting server at { host } : { port } \" ) We can see how the task start_server depends on both html and images . This means that both html and images will be executed before start_server and in that same order. $ leverage run start_server [ 09 :34:54.848 ] [ build.py - \u279c Starting task html ] Generating HTML in directory \".\" [ 09 :34:54.851 ] [ build.py - \u2714 Completed task html ] [ 09 :34:54.852 ] [ build.py - \u279c Starting task images ] Preparing images... [ 09 :34:54.854 ] [ build.py - \u2714 Completed task images ] [ 09 :34:54.855 ] [ build.py - \u279c Starting task start_server ] Starting server at localhost:80 [ 09 :34:54.856 ] [ build.py - \u2714 Completed task start_server ] Ignoring a task \u00b6 If you find yourself in the situation were there's a task that many other tasks depend on, and you need to quickly remove it from the dependency chains of all those tasks, ignoring its execution is a very simple way to achieve that end without having to remove all definitions and references across the code. To ignore or disable a task, simply set ignore to True in the task's decorator. from leverage import task @task () def html ( target = \".\" ): \"\"\"Generate HTML.\"\"\" print ( f \"Generating HTML in directory \\\" { target } \\\" \" ) @task ( ignore = True ) def images (): \"\"\"Prepare images.\"\"\" print ( \"Preparing images...\" ) @task ( html , images ) def start_server ( server = \"localhost\" , port = \"80\" ): \"\"\"Start the server\"\"\" print ( f \"Starting server at { server } : { port } \" ) $ leverage run start_server [ 09 :38:32.819 ] [ build.py - \u279c Starting task html ] Generating HTML in directory \".\" [ 09 :38:32.822 ] [ build.py - \u2714 Completed task html ] [ 09 :38:32.823 ] [ build.py - \u2933 Ignoring task images ] [ 09 :38:32.824 ] [ build.py - \u279c Starting task start_server ] Starting server at localhost:80 [ 09 :38:32.825 ] [ build.py - \u2714 Completed task start_server ] When listing the available tasks any ignored task will be marked as such. $ leverage --list-tasks Tasks in build file ` build.py ` : html Generate HTML. images [ Ignored ] Prepare images. start_server Start the server Powered by Leverage 1 .0.10 Private tasks \u00b6 Sometimes you may want to define auxiliary tasks that don't need to be shown as available to run by the user. For this scenario, you can make any task into a private one. There's two ways to accomplish this, either by naming the task with an initial underscore ( _ ) or by setting private to True in the task's decorator. from leverage import task @task ( private = True ) def clean (): \"\"\"Clean build directory.\"\"\" print ( \"Cleaning build directory...\" ) @task () def _copy_resources (): \"\"\"Copy resource files. This is a private task and will not be listed.\"\"\" print ( \"Copying resource files\" ) @task ( clean , _copy_resources ) def html ( target = \".\" ): \"\"\"Generate HTML.\"\"\" print ( f \"Generating HTML in directory \\\" { target } \\\" \" ) @task ( clean , _copy_resources , ignore = True ) def images (): \"\"\"Prepare images.\"\"\" print ( \"Preparing images...\" ) @task ( html , images ) def start_server ( host = \"localhost\" , port = \"80\" ): \"\"\"Start the server\"\"\" print ( f \"Starting server at { host } : { port } \" ) Private tasks will be executed, but not shown when tasks are listed. $ leverage run start_server [ 09 :40:33.535 ] [ build.py - \u279c Starting task clean ] Cleaning build directory... [ 09 :40:33.540 ] [ build.py - \u2714 Completed task clean ] [ build.py - \u279c Starting task _copy_resources ] Copying resource files [ 09 :40:33.541 ] [ build.py - \u2714 Completed task _copy_resources ] [ 09 :40:33.542 ] [ build.py - \u279c Starting task html ] Generating HTML in directory \".\" [ 09 :40:33.543 ] [ build.py - \u2714 Completed task html ] [ 09 :40:33.544 ] [ build.py - \u279c Starting task images ] Preparing images... [ build.py - \u2714 Completed task images ] [ 09 :40:33.545 ] [ build.py - \u279c Starting task start_server ] Starting server at localhost:80 [ 09 :40:33.546 ] [ build.py - \u2714 Completed task start_server ] $ leverage --list-tasks Tasks in build file ` build.py ` : html Generate HTML. images Prepare images. start_server Start the server Powered by Leverage 1 .0.10 Default task \u00b6 If you have a task that is run much more often than the rest, it can get tedious to always pass the name of that task to the run command. Leverage allows for the definition of a default task to address this situation. Thi task is executed when no task name is given. To define a default task, simply assign the already defined task to the special variable __DEFAULT__ . from leverage import task @task () def html ( target = \".\" ): \"\"\"Generate HTML.\"\"\" print ( f \"Generating HTML in directory \\\" { target } \\\" \" ) @task ( ignore = True ) def images (): \"\"\"Prepare images.\"\"\" print ( \"Preparing images...\" ) @task ( html , images ) def start_server ( server = \"localhost\" , port = \"80\" ): \"\"\"Start the server\"\"\" print ( f \"Starting server at { server } : { port } \" ) __DEFAULT__ = start_server The default task is marked as such when listing all available tasks. $ leverage --list-tasks Tasks in build file ` build.py ` : html Generate HTML. images [ Ignored ] Prepare images. start_server [ Default ] Start the server Powered by Leverage 1 .0.10 Build scripts lookup \u00b6 Build scripts are not only looked up in the current directory but also in all parent directories up to the root of the Leverage project. This makes it possible to launch tasks form any directory of the project as long as any parent of the current directory holds a build script. Organizing build scripts \u00b6 Leverage CLI treats the directory in which the build script is found as a python package. This means that you can break up your build files into modules and simply import them into your main build script, encouraging modularity and code reuse. Leverage CLI empowers you to create whole libraries of functionalities for your project. You can use it to better organize your tasks or implement simple auxiliary python functions. This way, given the following folder structure: leverage_project \u251c\u2500\u2500 build.py \u251c\u2500\u2500 deployment_tasks.py \u251c\u2500\u2500 testing_tasks.py \u2514\u2500\u2500 auxiliary_library \u251c\u2500\u2500 reports.py \u2514\u2500\u2500 utils.py The build script build.py can make use of definitions in the other files by means of importing them. from .deployment_tasks import * from .testing_tasks import unit_tests , functional_tests from .auxiliary_library.reports import coverage_report from .auxiliary_library.utils import format_as_table Importing user defined modules All import statements to user defined modules need to be relative to the main build script in order to function correctly. Known issues \u00b6 Zsh Glob Patterns: zsh: no matches found \u00b6 If you use zsh as your shell you might get the an error like this one: zsh: no matches found: start_server[port=8000] The problem has to do with the square brackets, as zhs has glob patterns enabled by default which causes every input to be interpreted like that. The are a few workarounds: Escape the square brackets: leverage run start_server\\[port=8000\\] Enclose the entire task between double quotes: leverage run \"start_server[port=8000]\" Disable glob patterns: noglob leverage run start_server[port=8000] An improvement over the last point is to create an alias for the leverage command: alias leverage='noglob leverage' Folder names containing periods \u00b6 As mentioned in the Organizing build scripts section, Leverage CLI treats the directory in which the main build script is located as a python package in order to allow importing of user defined python modules. If this directory contains a period ( . ) in its name, this will create issues for the importing process. This is because the period is used by python to separate subpackages from their parents. For example, if the directory where the build script build.py is stored is named local.assets , at the time of loading the build script, python will try to locate local.build instead of locating local.assets.build and fail. The same situation will arise from any other subdirectory in the project. When importing modules from those directories, they wont be found. The simple solution to this is to avoid using periods when naming directories. If the build script is located in the project's root folder, this would also apply to that directory.","title":"Custom tasks"},{"location":"user-guide/leverage-cli/tasks/#custom-tasks","text":"The same way we needed to automate or simplify certain tasks or jobs for the user, you may need to do the same in your project. Leverage CLI does not limit itself to provide only the core functionality required to create and manage your Leverage project, but also allows for the definition of custom tasks that can be used to add capabilities that are outside of Leverage CLI's scope. By implementing new auxiliary Leverage tasks you can achieve consistency and homogeneity in the experience of the user when interacting with your Leverage project and simplify the usage of any other tool that you may require.","title":"Custom tasks"},{"location":"user-guide/leverage-cli/tasks/#tasks","text":"Tasks are simple python functions that are marked as such with the use of the @task() decorator. We call the file where all tasks are defined a 'build script', and by default it is assumed to be named build.py . If you use any other name for your build script, you can let Leverage know through the global option --filename . from leverage import task @task () def copy_file ( src , dst ): \"\"\"Copy src file to dst\"\"\" print ( f \"Copying { src } to { dst } \" ) The contents in the task's docstring are used to provide a short description of what's the task's purpose when listing all available tasks to run. $ leverage --list-tasks Tasks in build file ` build.py ` : copy_file Copy src file to dst Powered by Leverage 1 .0.10 Any argument that the task may receive are to be given when running the task . The syntax for passing arguments is similar to that of Rake. $ leverage run copy_file [ \"/path/to/foo\" , \"/path/to/bar\" ] [ 09 :25:59.002 ] [ build.py - \u279c Starting task copy_file ] Copying /path/to/foo to /path/to/bar [ 09 :25:59.005 ] [ build.py - \u2714 Completed task copy_file ] Keyworded arguments are also supported. $ leverage run copy_file [ \"/path/to/foo\" ,dst = \"/path/to/bar\" ]","title":"Tasks"},{"location":"user-guide/leverage-cli/tasks/#dependencies","text":"The task decorator allows for the definition of dependencies. These are defined as positional arguments in the decorator itself. Multiple dependencies can be defined for each task. from leverage import task @task () def html ( target = \".\" ): \"\"\"Generate HTML.\"\"\" print ( f \"Generating HTML in directory \\\" { target } \\\" \" ) @task () def images (): \"\"\"Prepare images.\"\"\" print ( \"Preparing images...\" ) @task ( html , images ) def start_server ( host = \"localhost\" , port = \"80\" ): \"\"\"Start the server\"\"\" print ( f \"Starting server at { host } : { port } \" ) We can see how the task start_server depends on both html and images . This means that both html and images will be executed before start_server and in that same order. $ leverage run start_server [ 09 :34:54.848 ] [ build.py - \u279c Starting task html ] Generating HTML in directory \".\" [ 09 :34:54.851 ] [ build.py - \u2714 Completed task html ] [ 09 :34:54.852 ] [ build.py - \u279c Starting task images ] Preparing images... [ 09 :34:54.854 ] [ build.py - \u2714 Completed task images ] [ 09 :34:54.855 ] [ build.py - \u279c Starting task start_server ] Starting server at localhost:80 [ 09 :34:54.856 ] [ build.py - \u2714 Completed task start_server ]","title":"Dependencies"},{"location":"user-guide/leverage-cli/tasks/#ignoring-a-task","text":"If you find yourself in the situation were there's a task that many other tasks depend on, and you need to quickly remove it from the dependency chains of all those tasks, ignoring its execution is a very simple way to achieve that end without having to remove all definitions and references across the code. To ignore or disable a task, simply set ignore to True in the task's decorator. from leverage import task @task () def html ( target = \".\" ): \"\"\"Generate HTML.\"\"\" print ( f \"Generating HTML in directory \\\" { target } \\\" \" ) @task ( ignore = True ) def images (): \"\"\"Prepare images.\"\"\" print ( \"Preparing images...\" ) @task ( html , images ) def start_server ( server = \"localhost\" , port = \"80\" ): \"\"\"Start the server\"\"\" print ( f \"Starting server at { server } : { port } \" ) $ leverage run start_server [ 09 :38:32.819 ] [ build.py - \u279c Starting task html ] Generating HTML in directory \".\" [ 09 :38:32.822 ] [ build.py - \u2714 Completed task html ] [ 09 :38:32.823 ] [ build.py - \u2933 Ignoring task images ] [ 09 :38:32.824 ] [ build.py - \u279c Starting task start_server ] Starting server at localhost:80 [ 09 :38:32.825 ] [ build.py - \u2714 Completed task start_server ] When listing the available tasks any ignored task will be marked as such. $ leverage --list-tasks Tasks in build file ` build.py ` : html Generate HTML. images [ Ignored ] Prepare images. start_server Start the server Powered by Leverage 1 .0.10","title":"Ignoring a task"},{"location":"user-guide/leverage-cli/tasks/#private-tasks","text":"Sometimes you may want to define auxiliary tasks that don't need to be shown as available to run by the user. For this scenario, you can make any task into a private one. There's two ways to accomplish this, either by naming the task with an initial underscore ( _ ) or by setting private to True in the task's decorator. from leverage import task @task ( private = True ) def clean (): \"\"\"Clean build directory.\"\"\" print ( \"Cleaning build directory...\" ) @task () def _copy_resources (): \"\"\"Copy resource files. This is a private task and will not be listed.\"\"\" print ( \"Copying resource files\" ) @task ( clean , _copy_resources ) def html ( target = \".\" ): \"\"\"Generate HTML.\"\"\" print ( f \"Generating HTML in directory \\\" { target } \\\" \" ) @task ( clean , _copy_resources , ignore = True ) def images (): \"\"\"Prepare images.\"\"\" print ( \"Preparing images...\" ) @task ( html , images ) def start_server ( host = \"localhost\" , port = \"80\" ): \"\"\"Start the server\"\"\" print ( f \"Starting server at { host } : { port } \" ) Private tasks will be executed, but not shown when tasks are listed. $ leverage run start_server [ 09 :40:33.535 ] [ build.py - \u279c Starting task clean ] Cleaning build directory... [ 09 :40:33.540 ] [ build.py - \u2714 Completed task clean ] [ build.py - \u279c Starting task _copy_resources ] Copying resource files [ 09 :40:33.541 ] [ build.py - \u2714 Completed task _copy_resources ] [ 09 :40:33.542 ] [ build.py - \u279c Starting task html ] Generating HTML in directory \".\" [ 09 :40:33.543 ] [ build.py - \u2714 Completed task html ] [ 09 :40:33.544 ] [ build.py - \u279c Starting task images ] Preparing images... [ build.py - \u2714 Completed task images ] [ 09 :40:33.545 ] [ build.py - \u279c Starting task start_server ] Starting server at localhost:80 [ 09 :40:33.546 ] [ build.py - \u2714 Completed task start_server ] $ leverage --list-tasks Tasks in build file ` build.py ` : html Generate HTML. images Prepare images. start_server Start the server Powered by Leverage 1 .0.10","title":"Private tasks"},{"location":"user-guide/leverage-cli/tasks/#default-task","text":"If you have a task that is run much more often than the rest, it can get tedious to always pass the name of that task to the run command. Leverage allows for the definition of a default task to address this situation. Thi task is executed when no task name is given. To define a default task, simply assign the already defined task to the special variable __DEFAULT__ . from leverage import task @task () def html ( target = \".\" ): \"\"\"Generate HTML.\"\"\" print ( f \"Generating HTML in directory \\\" { target } \\\" \" ) @task ( ignore = True ) def images (): \"\"\"Prepare images.\"\"\" print ( \"Preparing images...\" ) @task ( html , images ) def start_server ( server = \"localhost\" , port = \"80\" ): \"\"\"Start the server\"\"\" print ( f \"Starting server at { server } : { port } \" ) __DEFAULT__ = start_server The default task is marked as such when listing all available tasks. $ leverage --list-tasks Tasks in build file ` build.py ` : html Generate HTML. images [ Ignored ] Prepare images. start_server [ Default ] Start the server Powered by Leverage 1 .0.10","title":"Default task"},{"location":"user-guide/leverage-cli/tasks/#build-scripts-lookup","text":"Build scripts are not only looked up in the current directory but also in all parent directories up to the root of the Leverage project. This makes it possible to launch tasks form any directory of the project as long as any parent of the current directory holds a build script.","title":"Build scripts lookup"},{"location":"user-guide/leverage-cli/tasks/#organizing-build-scripts","text":"Leverage CLI treats the directory in which the build script is found as a python package. This means that you can break up your build files into modules and simply import them into your main build script, encouraging modularity and code reuse. Leverage CLI empowers you to create whole libraries of functionalities for your project. You can use it to better organize your tasks or implement simple auxiliary python functions. This way, given the following folder structure: leverage_project \u251c\u2500\u2500 build.py \u251c\u2500\u2500 deployment_tasks.py \u251c\u2500\u2500 testing_tasks.py \u2514\u2500\u2500 auxiliary_library \u251c\u2500\u2500 reports.py \u2514\u2500\u2500 utils.py The build script build.py can make use of definitions in the other files by means of importing them. from .deployment_tasks import * from .testing_tasks import unit_tests , functional_tests from .auxiliary_library.reports import coverage_report from .auxiliary_library.utils import format_as_table Importing user defined modules All import statements to user defined modules need to be relative to the main build script in order to function correctly.","title":"Organizing build scripts"},{"location":"user-guide/leverage-cli/tasks/#known-issues","text":"","title":"Known issues"},{"location":"user-guide/leverage-cli/tasks/#zsh-glob-patterns-zsh-no-matches-found","text":"If you use zsh as your shell you might get the an error like this one: zsh: no matches found: start_server[port=8000] The problem has to do with the square brackets, as zhs has glob patterns enabled by default which causes every input to be interpreted like that. The are a few workarounds: Escape the square brackets: leverage run start_server\\[port=8000\\] Enclose the entire task between double quotes: leverage run \"start_server[port=8000]\" Disable glob patterns: noglob leverage run start_server[port=8000] An improvement over the last point is to create an alias for the leverage command: alias leverage='noglob leverage'","title":"Zsh Glob Patterns: zsh: no matches found"},{"location":"user-guide/leverage-cli/tasks/#folder-names-containing-periods","text":"As mentioned in the Organizing build scripts section, Leverage CLI treats the directory in which the main build script is located as a python package in order to allow importing of user defined python modules. If this directory contains a period ( . ) in its name, this will create issues for the importing process. This is because the period is used by python to separate subpackages from their parents. For example, if the directory where the build script build.py is stored is named local.assets , at the time of loading the build script, python will try to locate local.build instead of locating local.assets.build and fail. The same situation will arise from any other subdirectory in the project. When importing modules from those directories, they wont be found. The simple solution to this is to avoid using periods when naming directories. If the build script is located in the project's root folder, this would also apply to that directory.","title":"Folder names containing periods"},{"location":"user-guide/leverage-cli/reference/aws/","text":"Command: aws \u00b6 The aws command is a wrapper for a containerized installation of AWS CLI 2.0. All commands are passed directly to the AWS CLI and you should expect the same behavior from all of them, except for the few exceptions listed below. configure sso \u00b6 Usage \u00b6 leverage aws configure sso Extracts information from the project's Terraform configuration to generate the required profiles for AWS CLI to handle SSO. In the process, you will need to log in via your identity provider. To allow you to do this, Leverage will attempt to open the login page in the system's default browser. sso login \u00b6 Usage \u00b6 leverage aws sso login It wraps aws sso login taking extra steps to allow Leverage to use the resulting token while is valid. sso logout \u00b6 Usage \u00b6 leverage aws sso logout It wraps aws sso logout taking extra steps to make sure that all tokens and temporary credentials are wiped from the system. It also reminds the user to log out form the AWS SSO login page and identity provider portal. This last action is left to the user to perform.","title":"aws"},{"location":"user-guide/leverage-cli/reference/aws/#command-aws","text":"The aws command is a wrapper for a containerized installation of AWS CLI 2.0. All commands are passed directly to the AWS CLI and you should expect the same behavior from all of them, except for the few exceptions listed below.","title":"Command: aws"},{"location":"user-guide/leverage-cli/reference/aws/#configure-sso","text":"","title":"configure sso"},{"location":"user-guide/leverage-cli/reference/aws/#usage","text":"leverage aws configure sso Extracts information from the project's Terraform configuration to generate the required profiles for AWS CLI to handle SSO. In the process, you will need to log in via your identity provider. To allow you to do this, Leverage will attempt to open the login page in the system's default browser.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/aws/#sso-login","text":"","title":"sso login"},{"location":"user-guide/leverage-cli/reference/aws/#usage_1","text":"leverage aws sso login It wraps aws sso login taking extra steps to allow Leverage to use the resulting token while is valid.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/aws/#sso-logout","text":"","title":"sso logout"},{"location":"user-guide/leverage-cli/reference/aws/#usage_2","text":"leverage aws sso logout It wraps aws sso logout taking extra steps to make sure that all tokens and temporary credentials are wiped from the system. It also reminds the user to log out form the AWS SSO login page and identity provider portal. This last action is left to the user to perform.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/basic-features/","text":"Basic CLI features \u00b6 To view a list of all the available commands and options in your current Leverage version simply run leverage or leverage --help . You should get an output similar to this: $ leverage Usage: leverage [ OPTIONS ] COMMAND [ ARGS ] ... Leverage Reference Architecture projects command-line tool. Options: -f, --filename TEXT Name of the build file containing the tasks definitions. [ default: build.py ] -l, --list-tasks List available tasks to run. -v, --verbose Increase output verbosity. --version Show the version and exit. -h, --help Show this message and exit. Commands: credentials Manage AWS cli credentials. project Manage a Leverage project. run Perform specified task ( s ) and all of its dependencies. terraform Run Terraform commands in a custom containerized... tf Run Terraform commands in a custom containerized... Similarly, subcommands provide further information by means of the --help flag. For example leverage tf --help . Global options \u00b6 -f | --filename : Name of the file containing the tasks' definition. Defaults to build.py -l | --list-tasks : List all the tasks defined for the project along a description of their purpose (when available). Tasks in build file `build.py`: clean Clean build directory. copy_file echo html Generate HTML. images [Ignored] Prepare images. start_server [Default] Start the server stop_server Powered by Leverage 1.0.10","title":"Basic features"},{"location":"user-guide/leverage-cli/reference/basic-features/#basic-cli-features","text":"To view a list of all the available commands and options in your current Leverage version simply run leverage or leverage --help . You should get an output similar to this: $ leverage Usage: leverage [ OPTIONS ] COMMAND [ ARGS ] ... Leverage Reference Architecture projects command-line tool. Options: -f, --filename TEXT Name of the build file containing the tasks definitions. [ default: build.py ] -l, --list-tasks List available tasks to run. -v, --verbose Increase output verbosity. --version Show the version and exit. -h, --help Show this message and exit. Commands: credentials Manage AWS cli credentials. project Manage a Leverage project. run Perform specified task ( s ) and all of its dependencies. terraform Run Terraform commands in a custom containerized... tf Run Terraform commands in a custom containerized... Similarly, subcommands provide further information by means of the --help flag. For example leverage tf --help .","title":"Basic CLI features"},{"location":"user-guide/leverage-cli/reference/basic-features/#global-options","text":"-f | --filename : Name of the file containing the tasks' definition. Defaults to build.py -l | --list-tasks : List all the tasks defined for the project along a description of their purpose (when available). Tasks in build file `build.py`: clean Clean build directory. copy_file echo html Generate HTML. images [Ignored] Prepare images. start_server [Default] Start the server stop_server Powered by Leverage 1.0.10","title":"Global options"},{"location":"user-guide/leverage-cli/reference/credentials/","text":"Command: credentials \u00b6 The credentials command is used to set up and manage the AWS CLI credentials required to interact with the AWS environment. All credentials 's subcommands feed off the project.yaml , build.env , and Terraform configuration files to obtain the information they need. In case the basic required information is not found, the subcommands will prompt the user for it. configure \u00b6 Usage \u00b6 leverage credentials configure --type [ BOOTSTRAP | MANAGEMENT | SECURITY ] [ options ] The credentials configure command sets up the credentials needed to interact with the AWS environment, from the initial deployment process ( BOOTSTRAP ) to everyday management ( MANAGEMENT ) and development or use ( SECURITY ) of it. It attempts to retrieve the structure of the organization in order to generate all the AWS CLI profiles required to interact with the environment and update the terraform configuration with the id of all relevant accounts. Backups of the previous configured credentials files are always created when overwriting or updating the current ones. Options \u00b6 --type : Type of the credentials to set. Can be any of BOOTSTRAP , MANAGEMENT or SECURITY . This option is case insensitive. This option is required. --credentials-file : Path to a .csv credentials file, as produced by the AWS Console, containing the user's programmatic access keys. If not given, the user will be prompted for the credentials. --fetch-mfa-device : Retrieve an MFA device serial from AWS for the current user. --overwrite-existing-credentials : If the type of credentials being configured is already configured, overwrite current configuration. Mutually exclusive option with --skip-access-keys-setup . --skip-access-keys-setup : Skip the access keys configuration step. Continue on to setting up the accounts profiles. Mutually exclusive option with --overwrite-existing-credentials . --skip-assumable-roles-setup : Don't configure each account profile to assume their specific role. If neither of --overwrite-existing-credentials or --skip-access-keys-setup is given, the user will be prompted to choose between both actions when appropriate.","title":"credentials"},{"location":"user-guide/leverage-cli/reference/credentials/#command-credentials","text":"The credentials command is used to set up and manage the AWS CLI credentials required to interact with the AWS environment. All credentials 's subcommands feed off the project.yaml , build.env , and Terraform configuration files to obtain the information they need. In case the basic required information is not found, the subcommands will prompt the user for it.","title":"Command: credentials"},{"location":"user-guide/leverage-cli/reference/credentials/#configure","text":"","title":"configure"},{"location":"user-guide/leverage-cli/reference/credentials/#usage","text":"leverage credentials configure --type [ BOOTSTRAP | MANAGEMENT | SECURITY ] [ options ] The credentials configure command sets up the credentials needed to interact with the AWS environment, from the initial deployment process ( BOOTSTRAP ) to everyday management ( MANAGEMENT ) and development or use ( SECURITY ) of it. It attempts to retrieve the structure of the organization in order to generate all the AWS CLI profiles required to interact with the environment and update the terraform configuration with the id of all relevant accounts. Backups of the previous configured credentials files are always created when overwriting or updating the current ones.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/credentials/#options","text":"--type : Type of the credentials to set. Can be any of BOOTSTRAP , MANAGEMENT or SECURITY . This option is case insensitive. This option is required. --credentials-file : Path to a .csv credentials file, as produced by the AWS Console, containing the user's programmatic access keys. If not given, the user will be prompted for the credentials. --fetch-mfa-device : Retrieve an MFA device serial from AWS for the current user. --overwrite-existing-credentials : If the type of credentials being configured is already configured, overwrite current configuration. Mutually exclusive option with --skip-access-keys-setup . --skip-access-keys-setup : Skip the access keys configuration step. Continue on to setting up the accounts profiles. Mutually exclusive option with --overwrite-existing-credentials . --skip-assumable-roles-setup : Don't configure each account profile to assume their specific role. If neither of --overwrite-existing-credentials or --skip-access-keys-setup is given, the user will be prompted to choose between both actions when appropriate.","title":"Options"},{"location":"user-guide/leverage-cli/reference/project/","text":"Command: project \u00b6 The project command is used to execute global operations on the project. init \u00b6 Usage \u00b6 leverage project init The project init subcommand initializes a Leverage project in the current directory. If not found, it also initializes the global config directory for Leverage CLI ~/.leverage/ , and fetches the template for the projects' creation. It then proceeds to drop a template file for the project configuration called project.yaml and initializes a git repository in the directory. create \u00b6 Usage \u00b6 leverage project create The project create subcommand creates the files structure for the architecture in the current directory and configures it based on the values set in the project.yaml file. It will then proceed to make sure all files follow the standard Terraform code style.","title":"project"},{"location":"user-guide/leverage-cli/reference/project/#command-project","text":"The project command is used to execute global operations on the project.","title":"Command: project"},{"location":"user-guide/leverage-cli/reference/project/#init","text":"","title":"init"},{"location":"user-guide/leverage-cli/reference/project/#usage","text":"leverage project init The project init subcommand initializes a Leverage project in the current directory. If not found, it also initializes the global config directory for Leverage CLI ~/.leverage/ , and fetches the template for the projects' creation. It then proceeds to drop a template file for the project configuration called project.yaml and initializes a git repository in the directory.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/project/#create","text":"","title":"create"},{"location":"user-guide/leverage-cli/reference/project/#usage_1","text":"leverage project create The project create subcommand creates the files structure for the architecture in the current directory and configures it based on the values set in the project.yaml file. It will then proceed to make sure all files follow the standard Terraform code style.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/run/","text":"Command: run \u00b6 The run command is used to execute user defined tasks and all of their dependencies. Custom tasks documentation Usage \u00b6 leverage run [ tasks ] An arbitrary number of tasks can be given to the command. All tasks given must be in the form of the task name optionally followed by arguments that the task may require enclosed in square brackets, i.e. TASK_NAME[TASK_ARGUMENTS] . The execution respects the order in which they were provided. If no tasks are given, the default task will be executed. In case no default task is defined, the command will list all available tasks to run. Example: leverage run task1 task2[arg1,arg2] task3[arg1,kwarg1=val1,kwarg2=val2] task1 is invoked with no arguments, which is equivalent to task1[] task2 receives two positional arguments arg1 and arg2 task3 receives one positional argument arg1 and two keyworded arguments kwarg1 with value val1 and kwarg2 with value val2","title":"run"},{"location":"user-guide/leverage-cli/reference/run/#command-run","text":"The run command is used to execute user defined tasks and all of their dependencies. Custom tasks documentation","title":"Command: run"},{"location":"user-guide/leverage-cli/reference/run/#usage","text":"leverage run [ tasks ] An arbitrary number of tasks can be given to the command. All tasks given must be in the form of the task name optionally followed by arguments that the task may require enclosed in square brackets, i.e. TASK_NAME[TASK_ARGUMENTS] . The execution respects the order in which they were provided. If no tasks are given, the default task will be executed. In case no default task is defined, the command will list all available tasks to run. Example: leverage run task1 task2[arg1,arg2] task3[arg1,kwarg1=val1,kwarg2=val2] task1 is invoked with no arguments, which is equivalent to task1[] task2 receives two positional arguments arg1 and arg2 task3 receives one positional argument arg1 and two keyworded arguments kwarg1 with value val1 and kwarg2 with value val2","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/","text":"Command: terraform | tf \u00b6 The terraform command is a wrapper for a containerized installation of Terraform. It provides the Terraform executable with specific configuration values required by Leverage. It transparently handles authentication, whether it is Multi-Factor or via Single Sign-On, on behalf of the user in the commands that require it. SSO Authentication takes precedence over MFA when both are active. Some commands can only be run at layer level and will not run anywhere else in the project. The command can also be invoked via its shortened version tf . init \u00b6 Usage \u00b6 leverage terraform init [ option ] [ arguments ] Equivalent to terraform init . All arguments given are passed as received to Terraform. Can only be run at layer level. Layout validation is performed before actually initializing Terraform unless explicitly indicated against via the --skip-validation flag. Options \u00b6 --skip-validation : Skips layout validation. plan \u00b6 Usage \u00b6 leverage terraform plan [ arguments ] Equivalent to terraform plan . All arguments given are passed as received to Terraform. Can only be run at layer level. apply \u00b6 Usage \u00b6 leverage terraform apply [ arguments ] Equivalent to terraform apply . All arguments given are passed as received to Terraform. Can only be run at layer level. destroy \u00b6 Usage \u00b6 leverage terraform destroy [ arguments ] Equivalent to terraform destroy . All arguments given are passed as received to Terraform. Can only be run at layer level. output \u00b6 Usage \u00b6 leverage terraform output [ arguments ] Equivalent to terraform output . All arguments given are passed as received to Terraform. Can only be run at layer level. version \u00b6 Usage \u00b6 leverage terraform version Equivalent to terraform version . Print Terraform version. shell \u00b6 Usage \u00b6 leverage terraform shell [ option ] Open a shell into the Terraform container in the current directory. An authenticated shell can only be opened at layer level. Terraform shell environment documentation Options \u00b6 --mfa : Authenticate via MFA upon launching shell. --sso : Authenticate via SSO upon launching shell. Note: When --sso flag is used, the --mfa flag status is ignored. What if I want to run a Terraform command that is not supported by the CLI? One common error you could encounter is \"Error acquiring the state lock\" , where you might need to use force-unlock . You can do the following: leverage terraform shell --sso . Then from inside the container: terraform force-unlock LOCK-ID . format \u00b6 Usage \u00b6 leverage terraform format [ arguments ] Equivalent to terraform fmt -recursive . Recursively format all files in the architecture to the Terraform code style. All arguments given are passed as received to Terraform. validate \u00b6 Usage \u00b6 leverage terraform validate Equivalent to terraform validate . Checks the infrastructure definition's consistency. validate-layout \u00b6 Usage \u00b6 leverage terraform validate-layout Check the Terraform backend configuration in the code definition. Values checked: Environment name in account configuration S3 bucket key AWS CLI profile name prefix S3 Bucket name prefix DynamoDB locking table name prefix import \u00b6 Usage \u00b6 leverage terraform import ADDRESS ID Equivalent to terraform import . Import the resource with the given ID into the Terraform state at the given ADDRESS. Can only be run at layer level.","title":"terraform"},{"location":"user-guide/leverage-cli/reference/terraform/#command-terraform-tf","text":"The terraform command is a wrapper for a containerized installation of Terraform. It provides the Terraform executable with specific configuration values required by Leverage. It transparently handles authentication, whether it is Multi-Factor or via Single Sign-On, on behalf of the user in the commands that require it. SSO Authentication takes precedence over MFA when both are active. Some commands can only be run at layer level and will not run anywhere else in the project. The command can also be invoked via its shortened version tf .","title":"Command: terraform | tf"},{"location":"user-guide/leverage-cli/reference/terraform/#init","text":"","title":"init"},{"location":"user-guide/leverage-cli/reference/terraform/#usage","text":"leverage terraform init [ option ] [ arguments ] Equivalent to terraform init . All arguments given are passed as received to Terraform. Can only be run at layer level. Layout validation is performed before actually initializing Terraform unless explicitly indicated against via the --skip-validation flag.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#options","text":"--skip-validation : Skips layout validation.","title":"Options"},{"location":"user-guide/leverage-cli/reference/terraform/#plan","text":"","title":"plan"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_1","text":"leverage terraform plan [ arguments ] Equivalent to terraform plan . All arguments given are passed as received to Terraform. Can only be run at layer level.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#apply","text":"","title":"apply"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_2","text":"leverage terraform apply [ arguments ] Equivalent to terraform apply . All arguments given are passed as received to Terraform. Can only be run at layer level.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#destroy","text":"","title":"destroy"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_3","text":"leverage terraform destroy [ arguments ] Equivalent to terraform destroy . All arguments given are passed as received to Terraform. Can only be run at layer level.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#output","text":"","title":"output"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_4","text":"leverage terraform output [ arguments ] Equivalent to terraform output . All arguments given are passed as received to Terraform. Can only be run at layer level.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#version","text":"","title":"version"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_5","text":"leverage terraform version Equivalent to terraform version . Print Terraform version.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#shell","text":"","title":"shell"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_6","text":"leverage terraform shell [ option ] Open a shell into the Terraform container in the current directory. An authenticated shell can only be opened at layer level. Terraform shell environment documentation","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#options_1","text":"--mfa : Authenticate via MFA upon launching shell. --sso : Authenticate via SSO upon launching shell. Note: When --sso flag is used, the --mfa flag status is ignored. What if I want to run a Terraform command that is not supported by the CLI? One common error you could encounter is \"Error acquiring the state lock\" , where you might need to use force-unlock . You can do the following: leverage terraform shell --sso . Then from inside the container: terraform force-unlock LOCK-ID .","title":"Options"},{"location":"user-guide/leverage-cli/reference/terraform/#format","text":"","title":"format"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_7","text":"leverage terraform format [ arguments ] Equivalent to terraform fmt -recursive . Recursively format all files in the architecture to the Terraform code style. All arguments given are passed as received to Terraform.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#validate","text":"","title":"validate"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_8","text":"leverage terraform validate Equivalent to terraform validate . Checks the infrastructure definition's consistency.","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#validate-layout","text":"","title":"validate-layout"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_9","text":"leverage terraform validate-layout Check the Terraform backend configuration in the code definition. Values checked: Environment name in account configuration S3 bucket key AWS CLI profile name prefix S3 Bucket name prefix DynamoDB locking table name prefix","title":"Usage"},{"location":"user-guide/leverage-cli/reference/terraform/#import","text":"","title":"import"},{"location":"user-guide/leverage-cli/reference/terraform/#usage_10","text":"leverage terraform import ADDRESS ID Equivalent to terraform import . Import the resource with the given ID into the Terraform state at the given ADDRESS. Can only be run at layer level.","title":"Usage"},{"location":"user-guide/ref-architecture-ansible/configs/","text":"Configuration: Ansible Playbooks \u00b6 Overview \u00b6 This repository contains all the Ansible Playbooks configuration files used to create Binbash Leverage\u2122 Reference Architecture for AWS. Ansible Playbook Documentation \u00b6 Check out the README.md under contained under each repo Playbooks Documentation User Management & Security sec-users VPN Server vpn-pritunl Monitoring & Alerting prometheus-grafana Centralized Logs eskibana CI/CD jenkins spinnaker droneci webhook Secret Mgmt hashicorp-vault","title":"Configs"},{"location":"user-guide/ref-architecture-ansible/configs/#configuration-ansible-playbooks","text":"","title":"Configuration: Ansible Playbooks"},{"location":"user-guide/ref-architecture-ansible/configs/#overview","text":"This repository contains all the Ansible Playbooks configuration files used to create Binbash Leverage\u2122 Reference Architecture for AWS.","title":"Overview"},{"location":"user-guide/ref-architecture-ansible/configs/#ansible-playbook-documentation","text":"Check out the README.md under contained under each repo Playbooks Documentation User Management & Security sec-users VPN Server vpn-pritunl Monitoring & Alerting prometheus-grafana Centralized Logs eskibana CI/CD jenkins spinnaker droneci webhook Secret Mgmt hashicorp-vault","title":"Ansible Playbook Documentation"},{"location":"user-guide/ref-architecture-ansible/workflow/","text":"Workflow \u00b6 Leverage CLI We rely on the leverage cli as a wrapper to run ansible commands that consistently use the same config files and secrets. You are encouraged to read more about our leverage cli how it works section to better understand it. Ansible Infra Get into the folder that you need to work with (e.g. ansible-playbook-vpn-pritunl ) Run leverage run init to get all the necessary Ansible roles based on each requirements.yml Make whatever changes you need to make as stated in each Playbook Documentation (check Documentation section above) For a dry run execution use leverage run apply\\[--check\\] if you only mean to preview those changes Run leverage run apply if you want to apply those changes If you want to target specific playbook tasks by tag (eg: common tag) you can run one of the following options: Opt-1: leverage run apply[\"--tags\",\"common\"] Opt-2: noglob leverage run apply[\"--tags\",\"common\"] Opt-3: leverage shell and then ansible-playbook setup.yml --tags common","title":"Workflow"},{"location":"user-guide/ref-architecture-ansible/workflow/#workflow","text":"Leverage CLI We rely on the leverage cli as a wrapper to run ansible commands that consistently use the same config files and secrets. You are encouraged to read more about our leverage cli how it works section to better understand it. Ansible Infra Get into the folder that you need to work with (e.g. ansible-playbook-vpn-pritunl ) Run leverage run init to get all the necessary Ansible roles based on each requirements.yml Make whatever changes you need to make as stated in each Playbook Documentation (check Documentation section above) For a dry run execution use leverage run apply\\[--check\\] if you only mean to preview those changes Run leverage run apply if you want to apply those changes If you want to target specific playbook tasks by tag (eg: common tag) you can run one of the following options: Opt-1: leverage run apply[\"--tags\",\"common\"] Opt-2: noglob leverage run apply[\"--tags\",\"common\"] Opt-3: leverage shell and then ansible-playbook setup.yml --tags common","title":"Workflow"},{"location":"user-guide/ref-architecture-aws/configs/","text":"Project Configurations \u00b6 Config files can be found under each config folders Global config file /config/common.tfvars contains global context TF variables that we inject to TF commands which are used by all sub-directories such as make plan or make apply and which cannot be stored in backend.config due to TF. Account config files backend.tfvars contains TF variables that are mainly used to configure TF backend but since profile and region are defined there, we also use them to inject those values into other TF commands. account.tfvars contains TF variables that are specific to an AWS account. AWS Profile \u00b6 File backend.tfvars will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. Please follow to correctly setup your AWS Credentials user-guide/features/identities user-guide/features/identities/credentials Read the following page leverage doc to understand how to set up a profile to assume a role","title":"Configs"},{"location":"user-guide/ref-architecture-aws/configs/#project-configurations","text":"Config files can be found under each config folders Global config file /config/common.tfvars contains global context TF variables that we inject to TF commands which are used by all sub-directories such as make plan or make apply and which cannot be stored in backend.config due to TF. Account config files backend.tfvars contains TF variables that are mainly used to configure TF backend but since profile and region are defined there, we also use them to inject those values into other TF commands. account.tfvars contains TF variables that are specific to an AWS account.","title":"Project Configurations"},{"location":"user-guide/ref-architecture-aws/configs/#aws-profile","text":"File backend.tfvars will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. Please follow to correctly setup your AWS Credentials user-guide/features/identities user-guide/features/identities/credentials Read the following page leverage doc to understand how to set up a profile to assume a role","title":"AWS Profile"},{"location":"user-guide/ref-architecture-aws/credentials/","text":"Project Credentials \u00b6 AWS Profile \u00b6 File backend.tfvars will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. Please follow to correctly setup your AWS Credentials user-guide/features/identities user-guide/features/identities/credentials Read the following page leverage doc to understand how to set up a profile to assume a role","title":"Credentials"},{"location":"user-guide/ref-architecture-aws/credentials/#project-credentials","text":"","title":"Project Credentials"},{"location":"user-guide/ref-architecture-aws/credentials/#aws-profile","text":"File backend.tfvars will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. Please follow to correctly setup your AWS Credentials user-guide/features/identities user-guide/features/identities/credentials Read the following page leverage doc to understand how to set up a profile to assume a role","title":"AWS Profile"},{"location":"user-guide/ref-architecture-aws/dir-structure/","text":"Project Structure \u00b6 Files/Folders Organization \u00b6 The following block provides a brief explanation of the chosen files/folders layout: MyExample project file structure +\ud83d\udcc2 management/ (resources for the management account) ... +\ud83d\udcc2 security/ (resources for the security + users account) ... +\ud83d\udcc2 shared/ (resources for the shared account) ... +\ud83d\udcc2 network/ (resources for the centralized network account) ... +\ud83d\udcc2 apps-devstg/ (resources for apps dev & stg account) ... +\ud83d\udcc2 apps-prd/ (resources for apps prod account) ... Configuration files are organized by environments (e.g. dev, stg, prd), and service type, which we call layers (identities, organizations, storage, etc) to keep any changes made to them separate. Within each of those folders you should find the Terraform files that are used to define all the resources that belong to such account environment and specific layer. Figure: AWS Organization multi-account architecture diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture components\", Binbash Leverage Doc, accessed August 4th 2021). Under every account folder you will see a service layer structure similar to the following: MyExample project file structure ... \u251c\u2500\u2500 \ud83d\udcc2 apps-devstg \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars | \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities | \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 backups -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-certificates | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 cdn-s3-frontend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 databases-aurora | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 databases-mysql -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 databases-pgsql -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet-ansible -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-demoapps | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 k8s-kind | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 k8s-kops -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-certs | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-firewall -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-keys-dr | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 storage | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 tools-cloud-nuke | \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2514\u2500\u2500 \ud83d\udcc2 security-keys \u251c\u2500\u2500 \ud83d\udcc2 apps-prd \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-1 | \u251c\u2500\u2500 \ud83d\udcc2 backups -- | \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u251c\u2500\u2500 \ud83d\udcc2 cdn-s3-frontend | \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet -- | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks | \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u251c\u2500\u2500 \ud83d\udcc2 security-certs | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2514\u2500\u2500 \ud83d\udcc2 security-keys \u251c\u2500\u2500 \ud83d\udcc4 build.env \u251c\u2500\u2500 \ud83d\udcc4 build.py \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars \u251c\u2500\u2500 \ud83d\udcc2 management \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-identities | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 cost-mgmt | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 organizations | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 sso \u2502 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 backups | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-keys | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring-dr -- \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 | \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring \u251c\u2500\u2500 \ud83d\udcc2 network \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities \u2502 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 network-firewall | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-keys | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 transit-gateway \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 | \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u251c\u2500\u2500 \ud83d\udcc2 network-firewall | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u251c\u2500\u2500 \ud83d\udcc2 security-keys | \u2514\u2500\u2500 \ud83d\udcc2 transit-gateway \u251c\u2500\u2500 \ud83d\udcc2 security \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities \u2502 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 firewall-manager | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-keys | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 | \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring -- \u2514\u2500\u2500 \ud83d\udcc2 shared \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u251c\u2500\u2500 \ud83d\udcc2 global | \u251c\u2500\u2500 \ud83d\udcc2 base-dns | \u2514\u2500\u2500 \ud83d\udcc2 base-identities \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u251c\u2500\u2500 \ud83d\udcc2 backups | \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u251c\u2500\u2500 \ud83d\udcc2 container-registry | \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet -- | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-demoapps | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-prd | \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u251c\u2500\u2500 \ud83d\udcc2 storage | \u251c\u2500\u2500 \ud83d\udcc2 tools-cloud-scheduler-stop-start | \u251c\u2500\u2500 \ud83d\udcc2 tools-eskibana | \u251c\u2500\u2500 \ud83d\udcc2 tools-github-selfhosted-runners | \u251c\u2500\u2500 \ud83d\udcc2 tools-jenkins -- | \u251c\u2500\u2500 \ud83d\udcc2 tools-managedeskibana | \u251c\u2500\u2500 \ud83d\udcc2 tools-prometheus | \u251c\u2500\u2500 \ud83d\udcc2 tools-vault | \u251c\u2500\u2500 \ud83d\udcc2 tools-vpn-server | \u2514\u2500\u2500 \ud83d\udcc2 tools-webhooks -- \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 \u251c\u2500\u2500 \ud83d\udcc2 base-network \u251c\u2500\u2500 \ud83d\udcc2 container-registry \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- \u251c\u2500\u2500 \ud83d\udcc2 security-keys \u251c\u2500\u2500 \ud83d\udcc2 tools-eskibana \u2514\u2500\u2500 \ud83d\udcc2 tools-prometheus NOTE: As a convention folders with the -- suffix reflect that the resources are not currently created in AWS, basically they've been destroyed or not yet exist. Such layer separation is meant to avoid situations in which a single folder contains a lot of resources. That is important to avoid because at some point, running leverage terraform plan / apply starts taking too long and that becomes a problem. This organization also provides a layout that is easier to navigate and discover. You simply start with the accounts at the top level and then you get to explore the resource categories within each account.","title":"Project Structure"},{"location":"user-guide/ref-architecture-aws/dir-structure/#project-structure","text":"","title":"Project Structure"},{"location":"user-guide/ref-architecture-aws/dir-structure/#filesfolders-organization","text":"The following block provides a brief explanation of the chosen files/folders layout: MyExample project file structure +\ud83d\udcc2 management/ (resources for the management account) ... +\ud83d\udcc2 security/ (resources for the security + users account) ... +\ud83d\udcc2 shared/ (resources for the shared account) ... +\ud83d\udcc2 network/ (resources for the centralized network account) ... +\ud83d\udcc2 apps-devstg/ (resources for apps dev & stg account) ... +\ud83d\udcc2 apps-prd/ (resources for apps prod account) ... Configuration files are organized by environments (e.g. dev, stg, prd), and service type, which we call layers (identities, organizations, storage, etc) to keep any changes made to them separate. Within each of those folders you should find the Terraform files that are used to define all the resources that belong to such account environment and specific layer. Figure: AWS Organization multi-account architecture diagram. (Source: Binbash Leverage, \"Leverage Reference Architecture components\", Binbash Leverage Doc, accessed August 4th 2021). Under every account folder you will see a service layer structure similar to the following: MyExample project file structure ... \u251c\u2500\u2500 \ud83d\udcc2 apps-devstg \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars | \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities | \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 backups -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-certificates | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 cdn-s3-frontend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 databases-aurora | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 databases-mysql -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 databases-pgsql -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet-ansible -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-demoapps | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 k8s-kind | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 k8s-kops -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-certs | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-firewall -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-keys-dr | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 storage | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 tools-cloud-nuke | \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2514\u2500\u2500 \ud83d\udcc2 security-keys \u251c\u2500\u2500 \ud83d\udcc2 apps-prd \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-1 | \u251c\u2500\u2500 \ud83d\udcc2 backups -- | \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u251c\u2500\u2500 \ud83d\udcc2 cdn-s3-frontend | \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet -- | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks | \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u251c\u2500\u2500 \ud83d\udcc2 security-certs | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2514\u2500\u2500 \ud83d\udcc2 security-keys \u251c\u2500\u2500 \ud83d\udcc4 build.env \u251c\u2500\u2500 \ud83d\udcc4 build.py \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u2514\u2500\u2500 \ud83d\udcc4 common.tfvars \u251c\u2500\u2500 \ud83d\udcc2 management \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-identities | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 cost-mgmt | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 organizations | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 sso \u2502 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 backups | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-keys | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring-dr -- \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 | \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring \u251c\u2500\u2500 \ud83d\udcc2 network \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities \u2502 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 network-firewall | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-keys | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 transit-gateway \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 | \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u251c\u2500\u2500 \ud83d\udcc2 network-firewall | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u251c\u2500\u2500 \ud83d\udcc2 security-keys | \u2514\u2500\u2500 \ud83d\udcc2 transit-gateway \u251c\u2500\u2500 \ud83d\udcc2 security \u2502 \u251c\u2500\u2500 \ud83d\udcc2 config | \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars | \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u2502 \u251c\u2500\u2500 \ud83d\udcc2 global | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 base-identities \u2502 \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 firewall-manager | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2502 \u251c\u2500\u2500 \ud83d\udcc2 security-keys | \u2502 \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring \u2502 \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 | \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u2514\u2500\u2500 \ud83d\udcc2 security-monitoring -- \u2514\u2500\u2500 \ud83d\udcc2 shared \u251c\u2500\u2500 \ud83d\udcc2 config \u2502 \u251c\u2500\u2500 \ud83d\udcc4 account.tfvars \u2502 \u2514\u2500\u2500 \ud83d\udcc4 backend.tfvars \u251c\u2500\u2500 \ud83d\udcc2 global | \u251c\u2500\u2500 \ud83d\udcc2 base-dns | \u2514\u2500\u2500 \ud83d\udcc2 base-identities \u251c\u2500\u2500 \ud83d\udcc2 us-east-1 | \u251c\u2500\u2500 \ud83d\udcc2 backups | \u251c\u2500\u2500 \ud83d\udcc2 base-network | \u251c\u2500\u2500 \ud83d\udcc2 base-tf-backend | \u251c\u2500\u2500 \ud83d\udcc2 container-registry | \u251c\u2500\u2500 \ud83d\udcc2 ec2-fleet -- | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-demoapps | \u251c\u2500\u2500 \ud83d\udcc2 k8s-eks-prd | \u251c\u2500\u2500 \ud83d\udcc2 notifications | \u251c\u2500\u2500 \ud83d\udcc2 security-audit | \u251c\u2500\u2500 \ud83d\udcc2 security-base | \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- | \u251c\u2500\u2500 \ud83d\udcc2 storage | \u251c\u2500\u2500 \ud83d\udcc2 tools-cloud-scheduler-stop-start | \u251c\u2500\u2500 \ud83d\udcc2 tools-eskibana | \u251c\u2500\u2500 \ud83d\udcc2 tools-github-selfhosted-runners | \u251c\u2500\u2500 \ud83d\udcc2 tools-jenkins -- | \u251c\u2500\u2500 \ud83d\udcc2 tools-managedeskibana | \u251c\u2500\u2500 \ud83d\udcc2 tools-prometheus | \u251c\u2500\u2500 \ud83d\udcc2 tools-vault | \u251c\u2500\u2500 \ud83d\udcc2 tools-vpn-server | \u2514\u2500\u2500 \ud83d\udcc2 tools-webhooks -- \u2514\u2500\u2500 \ud83d\udcc2 us-east-2 \u251c\u2500\u2500 \ud83d\udcc2 base-network \u251c\u2500\u2500 \ud83d\udcc2 container-registry \u251c\u2500\u2500 \ud83d\udcc2 security-compliance -- \u251c\u2500\u2500 \ud83d\udcc2 security-keys \u251c\u2500\u2500 \ud83d\udcc2 tools-eskibana \u2514\u2500\u2500 \ud83d\udcc2 tools-prometheus NOTE: As a convention folders with the -- suffix reflect that the resources are not currently created in AWS, basically they've been destroyed or not yet exist. Such layer separation is meant to avoid situations in which a single folder contains a lot of resources. That is important to avoid because at some point, running leverage terraform plan / apply starts taking too long and that becomes a problem. This organization also provides a layout that is easier to navigate and discover. You simply start with the accounts at the top level and then you get to explore the resource categories within each account.","title":"Files/Folders Organization"},{"location":"user-guide/ref-architecture-aws/tf-state-setup/","text":"Terraform Remote State \u00b6 In the base-tf-backend folder you should find the definition of the infrastructure that needs to be deployed before you can get to work with anything else. IMPORTANT: THIS IS ONLY NEEDED IF THE BACKEND WAS NOT CREATED YET. IF THE BACKEND ALREADY EXISTS YOU JUST USE IT. Read More Terraform - S3 & DynamoDB for Remote State Storage & Locking Configuration \u00b6 Config files can be found under each config folders Global config file /config/common.tfvars contains global context TF variables that we inject to TF commands which are used by all sub-directories such as make plan or make apply and which cannot be stored in backend.config due to TF. Account config files backend.tfvars contains TF variables that are mainly used to configure TF backend but since profile and region are defined there, we also use them to inject those values into other TF commands. account.tfvars contains TF variables that are specific to an AWS account. AWS Profile \u00b6 File backend.tfvars will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. Please follow to correctly setup your AWS Credentials user-guide/features/identities user-guide/features/identities/credentials Read the following page leverage doc to understand how to set up a profile to assume a role","title":"Terraform state setup"},{"location":"user-guide/ref-architecture-aws/tf-state-setup/#terraform-remote-state","text":"In the base-tf-backend folder you should find the definition of the infrastructure that needs to be deployed before you can get to work with anything else. IMPORTANT: THIS IS ONLY NEEDED IF THE BACKEND WAS NOT CREATED YET. IF THE BACKEND ALREADY EXISTS YOU JUST USE IT. Read More Terraform - S3 & DynamoDB for Remote State Storage & Locking","title":"Terraform Remote State"},{"location":"user-guide/ref-architecture-aws/tf-state-setup/#configuration","text":"Config files can be found under each config folders Global config file /config/common.tfvars contains global context TF variables that we inject to TF commands which are used by all sub-directories such as make plan or make apply and which cannot be stored in backend.config due to TF. Account config files backend.tfvars contains TF variables that are mainly used to configure TF backend but since profile and region are defined there, we also use them to inject those values into other TF commands. account.tfvars contains TF variables that are specific to an AWS account.","title":"Configuration"},{"location":"user-guide/ref-architecture-aws/tf-state-setup/#aws-profile","text":"File backend.tfvars will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. Please follow to correctly setup your AWS Credentials user-guide/features/identities user-guide/features/identities/credentials Read the following page leverage doc to understand how to set up a profile to assume a role","title":"AWS Profile"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/","text":"Terraform - S3 & DynamoDB for Remote State Storage & Locking \u00b6 Overview \u00b6 Use this terraform configuration files to create the S3 bucket & DynamoDB table needed to use Terraform Remote State Storage & Locking. Figure: Terraform remote state store & locking necessary AWS S3 bucket and DynamoDB table components. (Source: Binbash Leverage, \"Terraform Module: Terraform Backend\" , Terraform modules registry, accessed December 3rd 2020). Prerequisites \u00b6 Terraform repo structure + state backend initialization Ensure you have leverage cli installed in your system Refer to Configuration Pre-requisites to understand how to set up the configuration files required for this layer. Where you must build your Terraform Reference Architecture account structure Leveraged by the Infrastructure as Code (IaC) Library through the terraform-aws-tfstate-backend module /management/base-tf-backend /security/base-tf-backend /shared/base-tf-backend /network/base-tf-backend /apps-devstg/base-tf-backend /apps-prd/base-tf-backend Set up \u00b6 Steps to initialize your tf-backend At the corresponding account dir, eg: /shared/base-tf-backend then, Run leverage terraform init Run leverage terraform plan , review the output to understand the expected changes Run leverage terraform apply , review the output once more and type yes if you are okay with that This should create a terraform.tfstate file in this directory but we don't want to push that to the repository so let's push the state to the backend we just created Open config.tf and uncomment the following lines: # backend \"s3\" { # key = \"shared/tf-backend/terraform.tfstate\" # } Run leverage terraform init and type yes when Terraform asks if you want to import the state to the S3 backend Done. You can remove terraform.tfstate now (and also terraform.tfstate.backup if available) Expected workflow after set up \u00b6 this tape must be updated","title":"Terraform state workflow"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#terraform-s3-dynamodb-for-remote-state-storage-locking","text":"","title":"Terraform - S3 &amp; DynamoDB for Remote State Storage &amp; Locking"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#overview","text":"Use this terraform configuration files to create the S3 bucket & DynamoDB table needed to use Terraform Remote State Storage & Locking. Figure: Terraform remote state store & locking necessary AWS S3 bucket and DynamoDB table components. (Source: Binbash Leverage, \"Terraform Module: Terraform Backend\" , Terraform modules registry, accessed December 3rd 2020).","title":"Overview"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#prerequisites","text":"Terraform repo structure + state backend initialization Ensure you have leverage cli installed in your system Refer to Configuration Pre-requisites to understand how to set up the configuration files required for this layer. Where you must build your Terraform Reference Architecture account structure Leveraged by the Infrastructure as Code (IaC) Library through the terraform-aws-tfstate-backend module /management/base-tf-backend /security/base-tf-backend /shared/base-tf-backend /network/base-tf-backend /apps-devstg/base-tf-backend /apps-prd/base-tf-backend","title":"Prerequisites"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#set-up","text":"Steps to initialize your tf-backend At the corresponding account dir, eg: /shared/base-tf-backend then, Run leverage terraform init Run leverage terraform plan , review the output to understand the expected changes Run leverage terraform apply , review the output once more and type yes if you are okay with that This should create a terraform.tfstate file in this directory but we don't want to push that to the repository so let's push the state to the backend we just created Open config.tf and uncomment the following lines: # backend \"s3\" { # key = \"shared/tf-backend/terraform.tfstate\" # } Run leverage terraform init and type yes when Terraform asks if you want to import the state to the S3 backend Done. You can remove terraform.tfstate now (and also terraform.tfstate.backup if available)","title":"Set up"},{"location":"user-guide/ref-architecture-aws/tf-state-workflow/#expected-workflow-after-set-up","text":"this tape must be updated","title":"Expected workflow after set up"},{"location":"user-guide/ref-architecture-aws/workflow/","text":"Workflow \u00b6 Steps \u00b6 Terraform Workflow Make sure you've read and prepared your local development environment following the Overview base-configurations section. Depending in which Terraform Ref Architecture repo you are working, please review and assure you meet all the terraform aws pre-requisites or terraform aws pre-requisites Remote State Configuration files AWS Profile and credentials Vault token secret Get into the folder that you need to work with (e.g. 2_identities ) Run leverage terraform init Make whatever changes you need to make Run leverage terraform plan if you only mean to preview those changes Run leverage terraform apply if you want to review and likely apply those changes Note If desired, at step #5 you could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to your AWS Cloud Architecture components before executing leverage terraform apply ( terraform apply ). This brings the huge benefit of treating changes with a GitOps oriented approach, basically as we should treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, in Running in Automation \u00b6 Figure: Running terraform with AWS in automation (just as reference). Read More \u00b6 Extra resources Running Terraform in automation","title":"Workflow"},{"location":"user-guide/ref-architecture-aws/workflow/#workflow","text":"","title":"Workflow"},{"location":"user-guide/ref-architecture-aws/workflow/#steps","text":"Terraform Workflow Make sure you've read and prepared your local development environment following the Overview base-configurations section. Depending in which Terraform Ref Architecture repo you are working, please review and assure you meet all the terraform aws pre-requisites or terraform aws pre-requisites Remote State Configuration files AWS Profile and credentials Vault token secret Get into the folder that you need to work with (e.g. 2_identities ) Run leverage terraform init Make whatever changes you need to make Run leverage terraform plan if you only mean to preview those changes Run leverage terraform apply if you want to review and likely apply those changes Note If desired, at step #5 you could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to your AWS Cloud Architecture components before executing leverage terraform apply ( terraform apply ). This brings the huge benefit of treating changes with a GitOps oriented approach, basically as we should treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, in","title":"Steps"},{"location":"user-guide/ref-architecture-aws/workflow/#running-in-automation","text":"Figure: Running terraform with AWS in automation (just as reference).","title":"Running in Automation"},{"location":"user-guide/ref-architecture-aws/workflow/#read-more","text":"Extra resources Running Terraform in automation","title":"Read More"},{"location":"user-guide/ref-architecture-vault/configs/","text":"Project Configurations \u00b6 Config files can be found under each config folders Global config file /config/common.tfvars contains global context TF variables that we inject to TF commands which are used by all sub-directories such as make plan or make apply and which cannot be stored in backend.config due to TF. Account config files backend.tfvars contains TF variables that are mainly used to configure TF backend but since profile and region are defined there, we also use them to inject those values into other TF commands. account.tfvars contains TF variables that are specific to an AWS account. AWS Profile \u00b6 File backend.tfvars will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. Please follow to correctly setup your AWS Credentials user-guide/features/identities user-guide/features/identities/credentials Read the following page leverage doc to understand how to set up a profile to assume a role","title":"Configs"},{"location":"user-guide/ref-architecture-vault/configs/#project-configurations","text":"Config files can be found under each config folders Global config file /config/common.tfvars contains global context TF variables that we inject to TF commands which are used by all sub-directories such as make plan or make apply and which cannot be stored in backend.config due to TF. Account config files backend.tfvars contains TF variables that are mainly used to configure TF backend but since profile and region are defined there, we also use them to inject those values into other TF commands. account.tfvars contains TF variables that are specific to an AWS account.","title":"Project Configurations"},{"location":"user-guide/ref-architecture-vault/configs/#aws-profile","text":"File backend.tfvars will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. Please follow to correctly setup your AWS Credentials user-guide/features/identities user-guide/features/identities/credentials Read the following page leverage doc to understand how to set up a profile to assume a role","title":"AWS Profile"},{"location":"user-guide/ref-architecture-vault/dir-structure/","text":"Files/Folders Organization \u00b6 TODO","title":"Project Structure"},{"location":"user-guide/ref-architecture-vault/dir-structure/#filesfolders-organization","text":"TODO","title":"Files/Folders Organization"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/","text":"Terraform - S3 & DynamoDB for Remote State Storage & Locking \u00b6 Overview \u00b6 Use this terraform configuration files to create the S3 bucket & DynamoDB table needed to use Terraform Remote State Storage & Locking. Figure: Terraform remote state store & locking necessary AWS S3 bucket and DynamoDB table components. (Source: Binbash Leverage, \"Terraform Module: Terraform Backend\" , Terraform modules registry, accessed December 3rd 2020). Prerequisites \u00b6 Terraform repo structure + state backend initialization Ensure you have leverage cli installed in your system Refer to Configuration Pre-requisites to understand how to set up the configuration files required for this layer. Leveraged by the Infrastructure as Code (IaC) Library through the terraform-aws-tfstate-backend module /aws/base-tf-backend /hcp/base-tf-backend Set up \u00b6 Steps to initialize your tf-backend At the corresponding account dir, eg: /hcp/base-tf-backend then, Run leverage terraform init Run leverage terraform plan , review the output to understand the expected changes Run leverage terraform apply , review the output once more and type yes if you are okay with that This should create a terraform.tfstate file in this directory but we don't want to push that to the repository so let's push the state to the backend we just created Open config.tf and uncomment the following lines: # backend \"s3\" { # key = \"hcp/tf-backend/terraform.tfstate\" # } Run leverage terraform init and type yes when Terraform asks if you want to import the state to the S3 backend Done. You can remove terraform.tfstate now (and also terraform.tfstate.backup if available) Expected workflow after set up \u00b6 this tape must be updated","title":"Terraform state workflow"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#terraform-s3-dynamodb-for-remote-state-storage-locking","text":"","title":"Terraform - S3 &amp; DynamoDB for Remote State Storage &amp; Locking"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#overview","text":"Use this terraform configuration files to create the S3 bucket & DynamoDB table needed to use Terraform Remote State Storage & Locking. Figure: Terraform remote state store & locking necessary AWS S3 bucket and DynamoDB table components. (Source: Binbash Leverage, \"Terraform Module: Terraform Backend\" , Terraform modules registry, accessed December 3rd 2020).","title":"Overview"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#prerequisites","text":"Terraform repo structure + state backend initialization Ensure you have leverage cli installed in your system Refer to Configuration Pre-requisites to understand how to set up the configuration files required for this layer. Leveraged by the Infrastructure as Code (IaC) Library through the terraform-aws-tfstate-backend module /aws/base-tf-backend /hcp/base-tf-backend","title":"Prerequisites"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#set-up","text":"Steps to initialize your tf-backend At the corresponding account dir, eg: /hcp/base-tf-backend then, Run leverage terraform init Run leverage terraform plan , review the output to understand the expected changes Run leverage terraform apply , review the output once more and type yes if you are okay with that This should create a terraform.tfstate file in this directory but we don't want to push that to the repository so let's push the state to the backend we just created Open config.tf and uncomment the following lines: # backend \"s3\" { # key = \"hcp/tf-backend/terraform.tfstate\" # } Run leverage terraform init and type yes when Terraform asks if you want to import the state to the S3 backend Done. You can remove terraform.tfstate now (and also terraform.tfstate.backup if available)","title":"Set up"},{"location":"user-guide/ref-architecture-vault/tf-state-workflow/#expected-workflow-after-set-up","text":"this tape must be updated","title":"Expected workflow after set up"},{"location":"user-guide/ref-architecture-vault/workflow/","text":"Workflow \u00b6 Steps \u00b6 Terraform Workflow Make sure you've read and prepared your local development environment following the Overview base-configurations section. Depending in which Terraform Ref Architecture repo you are working, please review and assure you meet all the terraform aws pre-requisites or terraform vault pre-requisites Remote State Configuration files AWS Profile and credentials Vault token secret Get into the folder that you need to work with (e.g. 2_identities ) Run leverage terraform init Make whatever changes you need to make Run leverage terraform plan if you only mean to preview those changes Run leverage terraform apply if you want to review and likely apply those changes Note If desired, at step #5 you could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to your AWS Cloud Architecture components before executing leverage terraform apply ( terraform apply ). This brings the huge benefit of treating changes with a GitOps oriented approach, basically as we should treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, in Running in Automation \u00b6 Figure: Running terraform with AWS in automation (just as reference). Read More \u00b6 Extra resources Running Terraform in automation","title":"Workflow"},{"location":"user-guide/ref-architecture-vault/workflow/#workflow","text":"","title":"Workflow"},{"location":"user-guide/ref-architecture-vault/workflow/#steps","text":"Terraform Workflow Make sure you've read and prepared your local development environment following the Overview base-configurations section. Depending in which Terraform Ref Architecture repo you are working, please review and assure you meet all the terraform aws pre-requisites or terraform vault pre-requisites Remote State Configuration files AWS Profile and credentials Vault token secret Get into the folder that you need to work with (e.g. 2_identities ) Run leverage terraform init Make whatever changes you need to make Run leverage terraform plan if you only mean to preview those changes Run leverage terraform apply if you want to review and likely apply those changes Note If desired, at step #5 you could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to your AWS Cloud Architecture components before executing leverage terraform apply ( terraform apply ). This brings the huge benefit of treating changes with a GitOps oriented approach, basically as we should treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, in","title":"Steps"},{"location":"user-guide/ref-architecture-vault/workflow/#running-in-automation","text":"Figure: Running terraform with AWS in automation (just as reference).","title":"Running in Automation"},{"location":"user-guide/ref-architecture-vault/workflow/#read-more","text":"Extra resources Running Terraform in automation","title":"Read More"},{"location":"work-with-us/","text":"Work with us \u00b6 Customers collaboration methodology \u00b6 What are all the steps of an engagement 1 st Stage: Leverage Customer Tech Intro Interview Complete our Binbash Leverage project evaluation form so we can get to know your project, find out if you're a good fit and get in contact with you. Schedule a tech intro interview meeting to understand which are your exact challenges and do a Leverage Reference Architecture feasibility assessment. 2 nd Stage: Leverage Reference Architecture Review If we can contribute, we'll execute a Mutual NDA (ours or yours), then walk your through to complete our Binbash Leverage due diligence for Reference Architecture form . Once we completely understand your requirements we'll prepare a comprehensive proposal including the complete \"Leverage Implementation Action Plan Roadmap\" (also known as Statement of Work - SOW) detailing every task for the entire project. After you review it and we agree on the general scope, a Services Agreement (SA) is signed. The project kick-off day is scheduled. 3 rd Stage: Leverage Ref Architecture Implementation The Roadmap (SOW) is executed, we'll send an invoice for the deposit and first Sprint starts. 4rth Stage: Binbash Leverage Support During and after finishing the complete Roadmap we'll provide commercial support, maintenance and upgrades for our work over the long term. Work methodology intro video \u00b6 Customer Support workflow \u00b6 Read More \u00b6 Related articles FAQs | Agreement and statement of work","title":"Overview"},{"location":"work-with-us/#work-with-us","text":"","title":"Work with us"},{"location":"work-with-us/#customers-collaboration-methodology","text":"What are all the steps of an engagement 1 st Stage: Leverage Customer Tech Intro Interview Complete our Binbash Leverage project evaluation form so we can get to know your project, find out if you're a good fit and get in contact with you. Schedule a tech intro interview meeting to understand which are your exact challenges and do a Leverage Reference Architecture feasibility assessment. 2 nd Stage: Leverage Reference Architecture Review If we can contribute, we'll execute a Mutual NDA (ours or yours), then walk your through to complete our Binbash Leverage due diligence for Reference Architecture form . Once we completely understand your requirements we'll prepare a comprehensive proposal including the complete \"Leverage Implementation Action Plan Roadmap\" (also known as Statement of Work - SOW) detailing every task for the entire project. After you review it and we agree on the general scope, a Services Agreement (SA) is signed. The project kick-off day is scheduled. 3 rd Stage: Leverage Ref Architecture Implementation The Roadmap (SOW) is executed, we'll send an invoice for the deposit and first Sprint starts. 4rth Stage: Binbash Leverage Support During and after finishing the complete Roadmap we'll provide commercial support, maintenance and upgrades for our work over the long term.","title":"Customers collaboration methodology"},{"location":"work-with-us/#work-methodology-intro-video","text":"","title":"Work methodology intro video"},{"location":"work-with-us/#customer-support-workflow","text":"","title":"Customer Support workflow"},{"location":"work-with-us/#read-more","text":"Related articles FAQs | Agreement and statement of work","title":"Read More"},{"location":"work-with-us/careers/","text":"Careers \u00b6 How we work \u00b6 Binbash work culture Fully Remote Binbash was founded as a remote-first company. That means you can always work from home, a co-working place, a nice cafe, or wherever else you feel comfortable, and you'll have almost complete control over your working hours. Why \"almost\"? Because depending on the current projects we'll require few hours of overlap between all Leverage collaborators for some specific meetings or shared sessions (pair-programming). Distributed Team Despite the fact that our collaborators are currently located in \ud83c\udde6\ud83c\uddf7 Argentina, \ud83c\udde7\ud83c\uddf7 Brazil and \ud83c\uddfa\ud83c\uddfe Uruguay, consider we are currently hiring from most countries in the time zones between GMT-7 (e.g. California, USA) to GMT+2 (e.g., Berlin, Germany). We promote life-work balance Job burnout is an epidemic \ud83d\ude46, and we tech workers are especially at risk. So we'll do our best to de-stress our workforce at Binbash. In order to achieve this we offer: Remote work that lets you control your hours and physical location. Normal working hours (prime-time 9am-5pm GTM-3), in average no more than ~30-40hs per week, and we don't work during weekends or your country of residence national holidays. Project management and planning that will take into consideration the time zone of all our team members. A flexible vacation policy where you could take 3 weeks per year away from the keyboard. If more time is needed we could always try to arrange it for you. No ON-CALL rotation. We only offer support contracts with SLAs of responses on prime time business days hours exclusively. You will take on big challenges, but the hours are reasonable. Everyone is treated fairly and with respect, but where disagreement and feedback is always welcome. That is welcoming, safe, and inclusive for people of all cultures, genders, and races. Leverage Software / DevOps Engineer Profile \u00b6 What You'll Work On (our tech stack) Infrastructure as Code (IaC) Library Create a collection of reusable, tested, production-ready E2E AWS oriented infrastructure modules (e.g., VPC, IAM, Kubernetes, Prometheus, Grafana, EFK, Consul, Vault, Jenkins, etc.) using several tool and languages: Terraform, Ansible, Helm, Dockerfiles, Python, Bash and Makefiles . Reference Architecture Improve, maintain, extend and update our reference architecture, which has been designed under optimal configs for the most popular modern web and mobile applications needs. Its design is fully based on the AWS Well Architected Framework . Open Source & Leverage DevOps Tools Contribute to our open source projects to continue building a fundamentally better DevOps experience, including our open source modules , leverage python CLI , Makefiles Lib among others. Document team knowledge Get siloed and not yet documented knowledge and extend the Leverage documentation , such as creating knowledgebase articles, runbooks, and other documentation for the internal team as well as Binbash Leverage customers. Customer engineering support While participating in business-hours only support rotations, collaborate with customer requests, teach Binbash Leverage and DevOps best-practices, help resolve problems, escalate to internal SMEs, and automate and document the solutions so that problems are mitigated for future scenarios and users. Role scope and extra points! Responsible for the development, maintenance, support and delivery of Binbash Leverage Products. Client side Leverage Reference Architecture solutions implementation, maintenance and support. Client side cloud solutions & tech management (service delivery and project task management). Bring Leverage recs for re-engineering, bug fixes (issues) report and improvements based on real scenario implementations. Mentoring, KT, PRs and team tech follow up both internally and customer facing. Binbash is a small, distributed startup, so things are changing all the time, and from time to time we all wear many hats. You should expect to write lot of code, but, depending on your interests, there will also be lot of opportunities to write blog posts, give talks, contribute to open source, go to conferences, talk with customers, do sales calls, think through financial questions, interview candidates, mentor new hires, design products, come up with marketing ideas, discuss strategy, consider legal questions, and all the other tasks that are part of working at a small company. Nice to have background You hate repeating and doing the same thing twice and would rather spend the time to automate a problem away than do the same task again. You have strong English communication skills and are comfortable engaging with external customers. You know how to write code across the stack ( \u201cDev\u201d ) and feel very comfortable with Infra as Code (\"IaC\"). You have experience running production software environments ( \"Ops\" ). You have a strong background in software engineering and understanding of CI/CD (or you are working hard on it!). You have a passion for learning new technologies, tools and programming languages. Bonus points for a sense of humor, empathy, autonomy and curiosity. Note that even if we're concerned with prior experience like AWS, Linux and Terraform, we're more concerned with curiosity about all areas of the Leverage stack and demonstrated ability to learn quickly and go deep when necessary.","title":"Careers"},{"location":"work-with-us/careers/#careers","text":"","title":"Careers"},{"location":"work-with-us/careers/#how-we-work","text":"Binbash work culture Fully Remote Binbash was founded as a remote-first company. That means you can always work from home, a co-working place, a nice cafe, or wherever else you feel comfortable, and you'll have almost complete control over your working hours. Why \"almost\"? Because depending on the current projects we'll require few hours of overlap between all Leverage collaborators for some specific meetings or shared sessions (pair-programming). Distributed Team Despite the fact that our collaborators are currently located in \ud83c\udde6\ud83c\uddf7 Argentina, \ud83c\udde7\ud83c\uddf7 Brazil and \ud83c\uddfa\ud83c\uddfe Uruguay, consider we are currently hiring from most countries in the time zones between GMT-7 (e.g. California, USA) to GMT+2 (e.g., Berlin, Germany). We promote life-work balance Job burnout is an epidemic \ud83d\ude46, and we tech workers are especially at risk. So we'll do our best to de-stress our workforce at Binbash. In order to achieve this we offer: Remote work that lets you control your hours and physical location. Normal working hours (prime-time 9am-5pm GTM-3), in average no more than ~30-40hs per week, and we don't work during weekends or your country of residence national holidays. Project management and planning that will take into consideration the time zone of all our team members. A flexible vacation policy where you could take 3 weeks per year away from the keyboard. If more time is needed we could always try to arrange it for you. No ON-CALL rotation. We only offer support contracts with SLAs of responses on prime time business days hours exclusively. You will take on big challenges, but the hours are reasonable. Everyone is treated fairly and with respect, but where disagreement and feedback is always welcome. That is welcoming, safe, and inclusive for people of all cultures, genders, and races.","title":"How we work"},{"location":"work-with-us/careers/#leverage-software-devops-engineer-profile","text":"What You'll Work On (our tech stack) Infrastructure as Code (IaC) Library Create a collection of reusable, tested, production-ready E2E AWS oriented infrastructure modules (e.g., VPC, IAM, Kubernetes, Prometheus, Grafana, EFK, Consul, Vault, Jenkins, etc.) using several tool and languages: Terraform, Ansible, Helm, Dockerfiles, Python, Bash and Makefiles . Reference Architecture Improve, maintain, extend and update our reference architecture, which has been designed under optimal configs for the most popular modern web and mobile applications needs. Its design is fully based on the AWS Well Architected Framework . Open Source & Leverage DevOps Tools Contribute to our open source projects to continue building a fundamentally better DevOps experience, including our open source modules , leverage python CLI , Makefiles Lib among others. Document team knowledge Get siloed and not yet documented knowledge and extend the Leverage documentation , such as creating knowledgebase articles, runbooks, and other documentation for the internal team as well as Binbash Leverage customers. Customer engineering support While participating in business-hours only support rotations, collaborate with customer requests, teach Binbash Leverage and DevOps best-practices, help resolve problems, escalate to internal SMEs, and automate and document the solutions so that problems are mitigated for future scenarios and users. Role scope and extra points! Responsible for the development, maintenance, support and delivery of Binbash Leverage Products. Client side Leverage Reference Architecture solutions implementation, maintenance and support. Client side cloud solutions & tech management (service delivery and project task management). Bring Leverage recs for re-engineering, bug fixes (issues) report and improvements based on real scenario implementations. Mentoring, KT, PRs and team tech follow up both internally and customer facing. Binbash is a small, distributed startup, so things are changing all the time, and from time to time we all wear many hats. You should expect to write lot of code, but, depending on your interests, there will also be lot of opportunities to write blog posts, give talks, contribute to open source, go to conferences, talk with customers, do sales calls, think through financial questions, interview candidates, mentor new hires, design products, come up with marketing ideas, discuss strategy, consider legal questions, and all the other tasks that are part of working at a small company. Nice to have background You hate repeating and doing the same thing twice and would rather spend the time to automate a problem away than do the same task again. You have strong English communication skills and are comfortable engaging with external customers. You know how to write code across the stack ( \u201cDev\u201d ) and feel very comfortable with Infra as Code (\"IaC\"). You have experience running production software environments ( \"Ops\" ). You have a strong background in software engineering and understanding of CI/CD (or you are working hard on it!). You have a passion for learning new technologies, tools and programming languages. Bonus points for a sense of humor, empathy, autonomy and curiosity. Note that even if we're concerned with prior experience like AWS, Linux and Terraform, we're more concerned with curiosity about all areas of the Leverage stack and demonstrated ability to learn quickly and go deep when necessary.","title":"Leverage Software / DevOps Engineer Profile"},{"location":"work-with-us/contribute/","text":"Contribute and Developing Binbash Leverage \u00b6 This document explains how to get started with developing for Leverage Reference Architecture . It includes how to build, test, and release new versions. Quick Start \u00b6 Getting the code \u00b6 The code must be checked out from this same github.com repo inside the Binbash Leverage Github Organization . git clone git@github.com:binbashar/le-tf-infra-aws.git cd le-tf-infra-aws cd .. git clone git@github.com:binbashar/le-ansible-infra.git cd le-ansible-infra cd .. Initial developer environment build \u00b6 TODO Dependencies \u00b6 This guide requires you to install X v0.1 or newer. Deploying \u00b6 To deploy the Leverage Reference Architecture onto AWS. Please check the deployment guide Testing \u00b6 To run tests, just run... Releasing \u00b6 CircleCi PR auto-release job \u00b6 https://circleci.com/gh/binbashar/bb-devops-tf-infra-aws NOTE: Will only run after merged PR.","title":"Contribute"},{"location":"work-with-us/contribute/#contribute-and-developing-binbash-leverage","text":"This document explains how to get started with developing for Leverage Reference Architecture . It includes how to build, test, and release new versions.","title":"Contribute and Developing Binbash Leverage"},{"location":"work-with-us/contribute/#quick-start","text":"","title":"Quick Start"},{"location":"work-with-us/contribute/#getting-the-code","text":"The code must be checked out from this same github.com repo inside the Binbash Leverage Github Organization . git clone git@github.com:binbashar/le-tf-infra-aws.git cd le-tf-infra-aws cd .. git clone git@github.com:binbashar/le-ansible-infra.git cd le-ansible-infra cd ..","title":"Getting the code"},{"location":"work-with-us/contribute/#initial-developer-environment-build","text":"TODO","title":"Initial developer environment build"},{"location":"work-with-us/contribute/#dependencies","text":"This guide requires you to install X v0.1 or newer.","title":"Dependencies"},{"location":"work-with-us/contribute/#deploying","text":"To deploy the Leverage Reference Architecture onto AWS. Please check the deployment guide","title":"Deploying"},{"location":"work-with-us/contribute/#testing","text":"To run tests, just run...","title":"Testing"},{"location":"work-with-us/contribute/#releasing","text":"","title":"Releasing"},{"location":"work-with-us/contribute/#circleci-pr-auto-release-job","text":"https://circleci.com/gh/binbashar/bb-devops-tf-infra-aws NOTE: Will only run after merged PR.","title":"CircleCi PR auto-release job"},{"location":"work-with-us/faqs/","text":"Frequently Asked Questions (FAQs) \u00b6 Target audience \u00b6 Who is Leverage's target audience? Leverage is mainly oriented to Latam, North America and European startup's CTOs, VPEs, Engineering Managers and/or team leads (Software Architects / DevOps Engineers / Cloud Solutions Architects) looking to rapidly set and host their modern web and mobile applications and systems in Amazon Web Services (\u2705 typically in just a few weeks!). Oriented to Development leads or teams looking to solve their current AWS infrastructure and software delivery business needs in a securely and reliably manner, under the most modern best practices. Your Entire AWS Cloud solutions based on DevOps practices will be achieved: Containerization Infrastructure as Code Container Orchestration (K8s) & Application Services CI / CD Security, Compliance & Reliability Cost Optimization & Performance Efficiency Observability & Monitoring Moreover, if you are looking to have the complete control of the source code, and of course be able to run it without us, such as building new Development environments and supporting your Production Cloud environments, you're a great fit for the Leverage AWS Cloud Solutions Reference Architecture model. And remember you could implement yourself or we could implement it for you! \ud83d\udcaa Agreement and statement of work \u00b6 Project Kick-Off \u00b6 Project Kick-Off Once the agreement contract and NDA are signed we estimate 15 days to have the team ready to start the project following the proposed Roadmap (\u201cStatement of work\u201d) that describes at length exactly what you'll receive. Assignments and Delivery \u00b6 Assignments and Delivery After gathering all the customer project requirements and specifications we'll adjust the Reference Architecture based on your needs. As a result we'll develop and present the Leverage Reference Architecture for AWS implementation Roadmap. A typical Roadmap (\u201cStatement of Work\u201d) includes a set number of Iterations (sprints). We try to keep a narrow scope for each Iteration so that we can tightly control how hours get spent to avoid overruns. We typically avoid adding tasks to a running Iteration so that the scope does not grow. That's also why we have an allocation for to specific long lived tasks: General-Task-1: DevOps and Solutions Architecture challenge, definitions, tasks (PM), reviews, issues and audit. General-Task-2: WEEKLY FOLLOW-UP Meeting, Which is work that falls outside of the current Iteration specific tasks. This is for special requests, meetings, pair programming sessions, extra documentation, etc. Binbash will participate and review the planned tasks along the customer: planned roadmap features bug fixes Implementation support Using the relevant ticketing system ( Jira ) to prioritize and plan the corresponding work plan. Reports and Invoicing \u00b6 Reports and Invoicing Weekly task reports and tasks management agile metrics. We use Toggl to track all our time by client, project, sprint, and developer. We then import these hours into Quickbooks for invoicing. Rates and Billing \u00b6 Rates and pricing plans Pre-paid package subscriptions: A number of prepaid hours is agreed according to the needs of the project. It could be a \"Basic Plan\" of 40 hours per month. Or a \"Premium Plan\" of 80 hours per month (if more hours are needed it could be reviewed). When buying in bulk there is a discount on the value of the hour. When you pay for the package you start discounting the hours from the total as they are used, and if there are unused hours left, consider that maximum 20% could be transferred for the next month. On-demand Business Subscription : There are a certain number of hours tracked each month, as planned tasks are demanded. The total spent hours will be reported each month. There is a monthly minimum of 40 hours per month. Support tasks maximum estimated effort should be between 80 and 120 hs / month. Billing The Customer will be billed every month. Invoices are due within 15 days of issue. We accept payments via US Bank ACH, Bill.com , and Payoneer . Rates include all applicable taxes and duties as required by law.","title":"FAQs"},{"location":"work-with-us/faqs/#frequently-asked-questions-faqs","text":"","title":"Frequently Asked Questions (FAQs)"},{"location":"work-with-us/faqs/#target-audience","text":"Who is Leverage's target audience? Leverage is mainly oriented to Latam, North America and European startup's CTOs, VPEs, Engineering Managers and/or team leads (Software Architects / DevOps Engineers / Cloud Solutions Architects) looking to rapidly set and host their modern web and mobile applications and systems in Amazon Web Services (\u2705 typically in just a few weeks!). Oriented to Development leads or teams looking to solve their current AWS infrastructure and software delivery business needs in a securely and reliably manner, under the most modern best practices. Your Entire AWS Cloud solutions based on DevOps practices will be achieved: Containerization Infrastructure as Code Container Orchestration (K8s) & Application Services CI / CD Security, Compliance & Reliability Cost Optimization & Performance Efficiency Observability & Monitoring Moreover, if you are looking to have the complete control of the source code, and of course be able to run it without us, such as building new Development environments and supporting your Production Cloud environments, you're a great fit for the Leverage AWS Cloud Solutions Reference Architecture model. And remember you could implement yourself or we could implement it for you! \ud83d\udcaa","title":"Target audience"},{"location":"work-with-us/faqs/#agreement-and-statement-of-work","text":"","title":"Agreement and statement of work"},{"location":"work-with-us/faqs/#project-kick-off","text":"Project Kick-Off Once the agreement contract and NDA are signed we estimate 15 days to have the team ready to start the project following the proposed Roadmap (\u201cStatement of work\u201d) that describes at length exactly what you'll receive.","title":"Project Kick-Off"},{"location":"work-with-us/faqs/#assignments-and-delivery","text":"Assignments and Delivery After gathering all the customer project requirements and specifications we'll adjust the Reference Architecture based on your needs. As a result we'll develop and present the Leverage Reference Architecture for AWS implementation Roadmap. A typical Roadmap (\u201cStatement of Work\u201d) includes a set number of Iterations (sprints). We try to keep a narrow scope for each Iteration so that we can tightly control how hours get spent to avoid overruns. We typically avoid adding tasks to a running Iteration so that the scope does not grow. That's also why we have an allocation for to specific long lived tasks: General-Task-1: DevOps and Solutions Architecture challenge, definitions, tasks (PM), reviews, issues and audit. General-Task-2: WEEKLY FOLLOW-UP Meeting, Which is work that falls outside of the current Iteration specific tasks. This is for special requests, meetings, pair programming sessions, extra documentation, etc. Binbash will participate and review the planned tasks along the customer: planned roadmap features bug fixes Implementation support Using the relevant ticketing system ( Jira ) to prioritize and plan the corresponding work plan.","title":"Assignments and Delivery"},{"location":"work-with-us/faqs/#reports-and-invoicing","text":"Reports and Invoicing Weekly task reports and tasks management agile metrics. We use Toggl to track all our time by client, project, sprint, and developer. We then import these hours into Quickbooks for invoicing.","title":"Reports and Invoicing"},{"location":"work-with-us/faqs/#rates-and-billing","text":"Rates and pricing plans Pre-paid package subscriptions: A number of prepaid hours is agreed according to the needs of the project. It could be a \"Basic Plan\" of 40 hours per month. Or a \"Premium Plan\" of 80 hours per month (if more hours are needed it could be reviewed). When buying in bulk there is a discount on the value of the hour. When you pay for the package you start discounting the hours from the total as they are used, and if there are unused hours left, consider that maximum 20% could be transferred for the next month. On-demand Business Subscription : There are a certain number of hours tracked each month, as planned tasks are demanded. The total spent hours will be reported each month. There is a monthly minimum of 40 hours per month. Support tasks maximum estimated effort should be between 80 and 120 hs / month. Billing The Customer will be billed every month. Invoices are due within 15 days of issue. We accept payments via US Bank ACH, Bill.com , and Payoneer . Rates include all applicable taxes and duties as required by law.","title":"Rates and Billing"},{"location":"work-with-us/leverage-vs-competition/","text":"","title":"Leverage vs Competition"},{"location":"work-with-us/support/","text":"Support \u00b6 Leverage Reference Architecture \u00b6 Please create a Github Issue to get immediate support from the Binbash Leverage Team Our Engineering & Support Team \u00b6 AWS Well Architected Review \u00b6 Feel free to contact us for an AWS Well Architected Framework Review Well Architected Framework Review Reference Study Case Operational Excellence Security Cost Optimization Reliability Performance Efficiency WAF Exta Material DevSecOps Security Audit - v0.1 WAF Cost Optimization Checklist - v0.1 Read More \u00b6 How AWS Well-Architected Reviews Can Drive a Customer-First Culture","title":"Support"},{"location":"work-with-us/support/#support","text":"","title":"Support"},{"location":"work-with-us/support/#leverage-reference-architecture","text":"Please create a Github Issue to get immediate support from the Binbash Leverage Team","title":"Leverage Reference Architecture"},{"location":"work-with-us/support/#our-engineering-support-team","text":"","title":"Our Engineering &amp; Support Team"},{"location":"work-with-us/support/#aws-well-architected-review","text":"Feel free to contact us for an AWS Well Architected Framework Review Well Architected Framework Review Reference Study Case Operational Excellence Security Cost Optimization Reliability Performance Efficiency WAF Exta Material DevSecOps Security Audit - v0.1 WAF Cost Optimization Checklist - v0.1","title":"AWS Well Architected Review"},{"location":"work-with-us/support/#read-more","text":"How AWS Well-Architected Reviews Can Drive a Customer-First Culture","title":"Read More"},{"location":"work-with-us/roadmap/leverage-cli/overview/","text":"Roadmap \u00b6 Leverage CLI Product Roadmap 2021 2022","title":"Leverage CLI"},{"location":"work-with-us/roadmap/leverage-cli/overview/#roadmap","text":"Leverage CLI Product Roadmap 2021 2022","title":"Roadmap"},{"location":"work-with-us/roadmap/ref-arch/cost-optimization/","text":"Cost Optimization Roadmap \u00b6 Features / Functionalities \ud83d\udcb0\ud83d\udcca\ud83d\udcc9 \u00b6 Category Tags / Labels Feature / Functionality Status Doc Cost Optimization (FinOps) leverage cloud-solutions-architecture documentation Calculate Cloud provider costs (Cost optimization focus!) \u2705 \u274c Cost Optimization (FinOps) leverage cost-optimization billing AWS billing alarms + AWS Budget (forecasted account cost / RI Coverage) Notifications to Slack \u2705 \u274c Cost Optimization (FinOps) leverage cost-optimization cost Activate AWS Trusted Advisor cost related results \u2705 \u274c Cost Optimization (FinOps) leverage cost-optimization lambda-nuke Setup Lambda nuke to automatically clean up AWS account resources \u2705 \u274c Cost Optimization (FinOps) leverage cost-optimization lambda-scheduler Setup lambda scheduler for stop and start resources on AWS (EC2, ASG & RDS) \u2705 \u274c","title":"Cost Optimization"},{"location":"work-with-us/roadmap/ref-arch/cost-optimization/#cost-optimization-roadmap","text":"","title":"Cost Optimization Roadmap"},{"location":"work-with-us/roadmap/ref-arch/cost-optimization/#features-functionalities","text":"Category Tags / Labels Feature / Functionality Status Doc Cost Optimization (FinOps) leverage cloud-solutions-architecture documentation Calculate Cloud provider costs (Cost optimization focus!) \u2705 \u274c Cost Optimization (FinOps) leverage cost-optimization billing AWS billing alarms + AWS Budget (forecasted account cost / RI Coverage) Notifications to Slack \u2705 \u274c Cost Optimization (FinOps) leverage cost-optimization cost Activate AWS Trusted Advisor cost related results \u2705 \u274c Cost Optimization (FinOps) leverage cost-optimization lambda-nuke Setup Lambda nuke to automatically clean up AWS account resources \u2705 \u274c Cost Optimization (FinOps) leverage cost-optimization lambda-scheduler Setup lambda scheduler for stop and start resources on AWS (EC2, ASG & RDS) \u2705 \u274c","title":"Features / Functionalities \ud83d\udcb0\ud83d\udcca\ud83d\udcc9"},{"location":"work-with-us/roadmap/ref-arch/demo-apps/","text":"Demo Applications Roadmap \u00b6 Features / Functionalities \ud83d\udc68\u200d\ud83d\udcbb\ud83c\udccf\ud83d\udd79\ud83c\udfaf \u00b6 Category Tags / Labels Feature / Functionality Status Doc CI/CD Pipeline automation & imple leverage ci-cd-pipeline docker build FrontEnd Build (Demo App): set up ECR, create IAM permissions, create pipelines (Jenkins / DroneCI), set up GitHub triggers 2021 Q2 \u274c CI/CD Pipeline automation & imple leverage ci-cd-pipeline deploy FrontEnd Deploy (Demo App): create pipelines (Jenkins / Spinnaker), set up ECR/Github triggers 2021 Q2 \u274c CI/CD Pipeline automation & imple leverage ci-cd-pipeline docker build BackEnd Build (Demo App): set up ECR, create IAM permissions, create pipelines (Jenkins / DroneCI), set up GitHub triggers 2021 Q2 \u274c CI/CD Pipeline automation & imple leverage ci-cd-pipeline deploy BackEnd Deploy (Demo App): create pipelines (Jenkins / Spinnaker), set up ECR triggers 2021 Q2 \u274c Testing (QA) leverage testing ci-cd-pipeline Unit Testing (Demo App): Dev team needs this to run on a Jenkins/CircleCI/DroneCI/Spinnaker pipeline 2021 Q2 \u274c Testing (QA) leverage testing ci-cd-pipeline Integration Testing (Demo App): QA team needs automation to run on a Jenkins/Spinnaker pipeline for AWS Cloud QA / Stage envs. 2021 Q2 \u274c Testing (QA) leverage testing ci-cd-pipeline E2E Functional / Aceptannce (Demo App): QA team needs Smoke tests automation to run on a Jenkins/Spinnaker pipeline for AWS Cloud Stage / Prod envs. 2021 Q2 \u274c Testing (QA) leverage testing ci-cd-pipeline Static Analysis (Demo App): code complexity, dependency graph, code frequency, contributors, code activity, and so on. 2021 Q2 \u274c CI/CD Pipeline automation & imple leverage ci-cd-pipeline kubernetes pbe Push Button Environments (Demo App): implement ephemeral environments. 2021 Q2 \u274c","title":"Demo Applications"},{"location":"work-with-us/roadmap/ref-arch/demo-apps/#demo-applications-roadmap","text":"","title":"Demo Applications Roadmap"},{"location":"work-with-us/roadmap/ref-arch/demo-apps/#features-functionalities","text":"Category Tags / Labels Feature / Functionality Status Doc CI/CD Pipeline automation & imple leverage ci-cd-pipeline docker build FrontEnd Build (Demo App): set up ECR, create IAM permissions, create pipelines (Jenkins / DroneCI), set up GitHub triggers 2021 Q2 \u274c CI/CD Pipeline automation & imple leverage ci-cd-pipeline deploy FrontEnd Deploy (Demo App): create pipelines (Jenkins / Spinnaker), set up ECR/Github triggers 2021 Q2 \u274c CI/CD Pipeline automation & imple leverage ci-cd-pipeline docker build BackEnd Build (Demo App): set up ECR, create IAM permissions, create pipelines (Jenkins / DroneCI), set up GitHub triggers 2021 Q2 \u274c CI/CD Pipeline automation & imple leverage ci-cd-pipeline deploy BackEnd Deploy (Demo App): create pipelines (Jenkins / Spinnaker), set up ECR triggers 2021 Q2 \u274c Testing (QA) leverage testing ci-cd-pipeline Unit Testing (Demo App): Dev team needs this to run on a Jenkins/CircleCI/DroneCI/Spinnaker pipeline 2021 Q2 \u274c Testing (QA) leverage testing ci-cd-pipeline Integration Testing (Demo App): QA team needs automation to run on a Jenkins/Spinnaker pipeline for AWS Cloud QA / Stage envs. 2021 Q2 \u274c Testing (QA) leverage testing ci-cd-pipeline E2E Functional / Aceptannce (Demo App): QA team needs Smoke tests automation to run on a Jenkins/Spinnaker pipeline for AWS Cloud Stage / Prod envs. 2021 Q2 \u274c Testing (QA) leverage testing ci-cd-pipeline Static Analysis (Demo App): code complexity, dependency graph, code frequency, contributors, code activity, and so on. 2021 Q2 \u274c CI/CD Pipeline automation & imple leverage ci-cd-pipeline kubernetes pbe Push Button Environments (Demo App): implement ephemeral environments. 2021 Q2 \u274c","title":"Features / Functionalities \ud83d\udc68\u200d\ud83d\udcbb\ud83c\udccf\ud83d\udd79\ud83c\udfaf"},{"location":"work-with-us/roadmap/ref-arch/operational-excellence/","text":"Operational Excellence Roadmap \u00b6 Features / Functionalities \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udcaf\ud83e\udd47 \u00b6 Category Tags / Labels Feature / Functionality Status Doc Cloud Solutions Architecture leverage cloud-solutions-architecture documentation DevSecOps & AWS Cloud Solutions Architecture Doc \u2705 \u2705 Cloud Solutions Architecture leverage cloud-solutions-architecture documentation Demo Applications architecture / Services Specifications Doc 2021 Q1 \u274c Base Infrastructure leverage base-infrastructure github Open Source Ref Architecture (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q2 \u274c Base Infrastructure leverage base-infrastructure cli Leverage cli (https://github.com/binbashar/leverage) for every Reference Architecture Repo (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q2 \u274c Base Infrastructure leverage base-infrastructure organizations Account Settings: Account Aliases and Password Policies, MFA, and enable IAM Access Analyzer across accounts. \u2705 \u274c Base Infrastructure leverage base-infrastructure storage Storage: Account Enable encrypted EBS by default on all accounts; disable S3 public ACLs and policies \u2705 \u274c Base Infrastructure leverage base-infrastructure region Define AWS Region / Multi-Region: keep in mind customers proximity, number of subnets, and other region limitations (https://infrastructure.aws) \u2705 \u274c Base Infrastructure leverage base-infrastructure vcs Terraform Github Ref Architecture / Pre-requisites: permissions to set up webhooks, create/configure repositories, create groups (Preferred SSO tool) 2021 Q2 \u274c Base Infrastructure leverage base-infrastructure organizations AWS Organizations: development/stage, production, shared, security, legacy \u2705 \u2705 Base Infrastructure leverage base-infrastructure iam IAM: initial accounts (security users, groups, policies, roles; shared/appdevtsg/appprd DevOps role) \u2705 \u2705 Base Infrastructure leverage base-infrastructure vpc Networking 1: DNS, VPC, Subnets, Route Tables, NACLs, NATGW, VPC Peering or TGW \u2705 \u274c Base Infrastructure leverage base-infrastructure vpn Networking 2: VPN (install Pritunl, create organization, servers and users) \u2705 \u274c Kubernetes leverage kubernetes eks Production Grade Cluster: deploy EKS cluster as code \u2705 \u274c Kubernetes leverage kubernetes k8s K8s Helm + Terraform Binbash Leverage repository backing all the K8s components deployment and configuration \u2705 \u274c Kubernetes leverage kubernetes metrics Monitoring: metrics-server (metrcis for K8s HPA + Cluster AutoScaler + Prom node Exporter) + kube-state-metrics (for Grafana Dasboards) 2021 Q2 \u274c Kubernetes leverage kubernetes iam security Security: Iam-authenticator, K8s RBAC (user, group and roles) \u2705 \u274c Kubernetes leverage kubernetes iam Implement AWS service accounts (IRSA for EKS) to provide IAM credentials to containers running inside a kubernetes cluster based on annotations. \u2705 \u274c Kubernetes leverage kubernetes dashboard Monitoring: K8s dashboard & Weave Scope \u2705 \u274c Kubernetes leverage kubernetes ingress Ingress: review, analyze and implement (alb skipper, k8s nginx, alb sigs, etc) \u2705 \u274c Kubernetes leverage kubernetes ingress Load Balancing: review, analyze and implement Ingress w/ LB (AWS ALB or NLB + access logs) \u2705 \u274c Kubernetes leverage kubernetes dns Implement external-dns w/ annotations for K8s deployed Apps (https://github.com/kubernetes-sigs/external-dns) \u2705 \u274c Kubernetes leverage kubernetes services-discovery Service Discovery: review, analyze and implement k8s native [env vars & core-dns] or Consul 2021 Q3 \u274c Kubernetes leverage kubernetes service-mesh linkerd Service Mesh: review, analyze and implement consul or linkerd2. 2021 Q3 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure jenkins Jenkins: installation, configuration, GitHub/GSuite/Bitbucket SSO-Auth integration \u2705 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure spinnaker Deployments / Jenkins or Tekton Pipelines + Argo-CD: installation, configuration, Github integration 2021 Q3 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure droneci DroneCI: installation, configuration, Github integration 2021 Q4 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure webhook Proxy Instance (webhooks) : installation, configuration, GitHub integration 2021 Q4 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure qa SonarQube: installation, configuration, GitHub/GSuite/Bitbucket SSO-Auth integration 2021 Q4 \u274c Applications Infrastructure leverage apps-infrastructure docker containers Automate and containerized app environments by using docker images, enabling consistent experience in local environment and dev/stage/prod Cloud environments. \u2705 \u274c Applications Infrastructure leverage apps-infrastructure docker containers Automate and containerized app environments by using docker images, enabling consistent experience in local environment and dev/stage/prod Cloud environments. \u2705 \u274c Applications Infrastructure leverage apps-infrastructure database rds Databases: RDS (most likely AWS Aurora MySql, single db for all microservices at first - Prod dedicated instance considering new auto-scaling feature and read-replicas) + RDS Proxy (if needed for high Cx N\u00b0) - Compliance: Consider using SSL/TLS to Encrypt a Connection to a DB Instance \u2705 \u274c Applications Infrastructure leverage apps-infrastructure queue sqs Queues: SQS (recommended for background workers and some microservices). Redis (AWS ElasticCache) / RabbitMQ (K8s Containerzied). \u2705 \u274c Applications Infrastructure leverage apps-infrastructure storage s3 Storage: S3 (for the FrontEnd statics) \u2705 \u274c Applications Infrastructure leverage apps-infrastructure cloudfront cdn Caching: CloudFront (for the FrontEnd) w/ access logs \u2705 \u274c Applications Infrastructure leverage apps-infrastructure cache redis CacheLayer: AWS Elasticache (Memcache or Redis) \u2705 \u274c","title":"Operational Excellence"},{"location":"work-with-us/roadmap/ref-arch/operational-excellence/#operational-excellence-roadmap","text":"","title":"Operational Excellence Roadmap"},{"location":"work-with-us/roadmap/ref-arch/operational-excellence/#features-functionalities","text":"Category Tags / Labels Feature / Functionality Status Doc Cloud Solutions Architecture leverage cloud-solutions-architecture documentation DevSecOps & AWS Cloud Solutions Architecture Doc \u2705 \u2705 Cloud Solutions Architecture leverage cloud-solutions-architecture documentation Demo Applications architecture / Services Specifications Doc 2021 Q1 \u274c Base Infrastructure leverage base-infrastructure github Open Source Ref Architecture (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q2 \u274c Base Infrastructure leverage base-infrastructure cli Leverage cli (https://github.com/binbashar/leverage) for every Reference Architecture Repo (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q2 \u274c Base Infrastructure leverage base-infrastructure organizations Account Settings: Account Aliases and Password Policies, MFA, and enable IAM Access Analyzer across accounts. \u2705 \u274c Base Infrastructure leverage base-infrastructure storage Storage: Account Enable encrypted EBS by default on all accounts; disable S3 public ACLs and policies \u2705 \u274c Base Infrastructure leverage base-infrastructure region Define AWS Region / Multi-Region: keep in mind customers proximity, number of subnets, and other region limitations (https://infrastructure.aws) \u2705 \u274c Base Infrastructure leverage base-infrastructure vcs Terraform Github Ref Architecture / Pre-requisites: permissions to set up webhooks, create/configure repositories, create groups (Preferred SSO tool) 2021 Q2 \u274c Base Infrastructure leverage base-infrastructure organizations AWS Organizations: development/stage, production, shared, security, legacy \u2705 \u2705 Base Infrastructure leverage base-infrastructure iam IAM: initial accounts (security users, groups, policies, roles; shared/appdevtsg/appprd DevOps role) \u2705 \u2705 Base Infrastructure leverage base-infrastructure vpc Networking 1: DNS, VPC, Subnets, Route Tables, NACLs, NATGW, VPC Peering or TGW \u2705 \u274c Base Infrastructure leverage base-infrastructure vpn Networking 2: VPN (install Pritunl, create organization, servers and users) \u2705 \u274c Kubernetes leverage kubernetes eks Production Grade Cluster: deploy EKS cluster as code \u2705 \u274c Kubernetes leverage kubernetes k8s K8s Helm + Terraform Binbash Leverage repository backing all the K8s components deployment and configuration \u2705 \u274c Kubernetes leverage kubernetes metrics Monitoring: metrics-server (metrcis for K8s HPA + Cluster AutoScaler + Prom node Exporter) + kube-state-metrics (for Grafana Dasboards) 2021 Q2 \u274c Kubernetes leverage kubernetes iam security Security: Iam-authenticator, K8s RBAC (user, group and roles) \u2705 \u274c Kubernetes leverage kubernetes iam Implement AWS service accounts (IRSA for EKS) to provide IAM credentials to containers running inside a kubernetes cluster based on annotations. \u2705 \u274c Kubernetes leverage kubernetes dashboard Monitoring: K8s dashboard & Weave Scope \u2705 \u274c Kubernetes leverage kubernetes ingress Ingress: review, analyze and implement (alb skipper, k8s nginx, alb sigs, etc) \u2705 \u274c Kubernetes leverage kubernetes ingress Load Balancing: review, analyze and implement Ingress w/ LB (AWS ALB or NLB + access logs) \u2705 \u274c Kubernetes leverage kubernetes dns Implement external-dns w/ annotations for K8s deployed Apps (https://github.com/kubernetes-sigs/external-dns) \u2705 \u274c Kubernetes leverage kubernetes services-discovery Service Discovery: review, analyze and implement k8s native [env vars & core-dns] or Consul 2021 Q3 \u274c Kubernetes leverage kubernetes service-mesh linkerd Service Mesh: review, analyze and implement consul or linkerd2. 2021 Q3 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure jenkins Jenkins: installation, configuration, GitHub/GSuite/Bitbucket SSO-Auth integration \u2705 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure spinnaker Deployments / Jenkins or Tekton Pipelines + Argo-CD: installation, configuration, Github integration 2021 Q3 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure droneci DroneCI: installation, configuration, Github integration 2021 Q4 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure webhook Proxy Instance (webhooks) : installation, configuration, GitHub integration 2021 Q4 \u274c CI/CD Infrastructure leverage ci-cd-infrastructure qa SonarQube: installation, configuration, GitHub/GSuite/Bitbucket SSO-Auth integration 2021 Q4 \u274c Applications Infrastructure leverage apps-infrastructure docker containers Automate and containerized app environments by using docker images, enabling consistent experience in local environment and dev/stage/prod Cloud environments. \u2705 \u274c Applications Infrastructure leverage apps-infrastructure docker containers Automate and containerized app environments by using docker images, enabling consistent experience in local environment and dev/stage/prod Cloud environments. \u2705 \u274c Applications Infrastructure leverage apps-infrastructure database rds Databases: RDS (most likely AWS Aurora MySql, single db for all microservices at first - Prod dedicated instance considering new auto-scaling feature and read-replicas) + RDS Proxy (if needed for high Cx N\u00b0) - Compliance: Consider using SSL/TLS to Encrypt a Connection to a DB Instance \u2705 \u274c Applications Infrastructure leverage apps-infrastructure queue sqs Queues: SQS (recommended for background workers and some microservices). Redis (AWS ElasticCache) / RabbitMQ (K8s Containerzied). \u2705 \u274c Applications Infrastructure leverage apps-infrastructure storage s3 Storage: S3 (for the FrontEnd statics) \u2705 \u274c Applications Infrastructure leverage apps-infrastructure cloudfront cdn Caching: CloudFront (for the FrontEnd) w/ access logs \u2705 \u274c Applications Infrastructure leverage apps-infrastructure cache redis CacheLayer: AWS Elasticache (Memcache or Redis) \u2705 \u274c","title":"Features / Functionalities \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udcaf\ud83e\udd47"},{"location":"work-with-us/roadmap/ref-arch/overview/","text":"Roadmap \u00b6 Leverage AWS Cloud Solutions Reference Architecture Features / Functionalities per category Operational Excellence Reliability & Performance Security Cost Optimization Demo Applications","title":"Overview"},{"location":"work-with-us/roadmap/ref-arch/overview/#roadmap","text":"Leverage AWS Cloud Solutions Reference Architecture Features / Functionalities per category Operational Excellence Reliability & Performance Security Cost Optimization Demo Applications","title":"Roadmap"},{"location":"work-with-us/roadmap/ref-arch/reliability-performance/","text":"Reliability Performance Roadmap \u00b6 Features / Functionalities \ud83d\ude80\u23f2\ud83d\udcca \u00b6 Category Tags / Labels Feature / Functionality Status Doc Monitoring Metrics & Alerting leverage monitoring-metrics-alerting prometheus grafana Metrics: install and configure Prometheus (NodeExporter for EC2 / BlackBox exporter / Alert Monitroing), install and configure Grafana (K8s Plugin + Prometheus int + CloudWatch int) \u2705 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting grafana cloudwatch Metrics: Grafana + AWS Cloudwatch integrations config (https://github.com/monitoringartist/grafana-aws-cloudwatch-dashboards) 2021 Q2 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting apm APM: review, analyze and implement (New Relic, DataDog, ElasticAPM Agent/Server) 2021 Q2 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting documentation Define and document reference notification/escalation procedure \u2705 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting Alerting: configure AlertsManager, Elastalert (optimized logs rotation when using it from docker image), PagerDuty, Slack according to the procedure above 2021 Q2 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting prometheus Monitor Infra Tool Instances (WebHook Proxy, Jenkins, Vault, Pritunl, Prometheus, Grafana, etc) / implement monitoring via Prometheus + Grafana or Another Solution \u2705 \u274c Monitoring Distributed Tracing leverage monitoring-tracing jaeger Distributed Tracing Instrumentation: review, analyze and implement to detect and improve transactions performance and svs dep analysis (jaeger, instana, lightstep, AWS X-Ray, etc) 2021 Q3 \u274c Monitoring Logging leverage monitoring-logs efk Logging / EFK - use separate indexes per K8s components & apps/svc for each custer/env (segregating dev/stg from prd) + enable ES monitoring w/ X-Pack + configure curator to rotate indices + tool to improve index mgmt 2021 Q2 \u274c Performance & Optimization leverage performance-optimization ci-cd-pipeline Load Testing: set up and run continuous load tests pipelines (Jenkins) to determine and improve apps/services capacity through time (apapche ab, gatling, iperf, locust, taurus, BlazeMeter and https://github.com/loadimpact/k6) 2021 Q3 \u274c Performance & Optimization leverage performance-optimization ci-cd-pipeline Performance Testing (stress, soak, spike, etc): set up and run continuous performance tests pipelines (Jenkins) to measure performance through time (apapche ab, gatling, iperf, locust, taurus and BlazeMeter) 2021 Q3 \u274c Performance & Optimization leverage performance-optimization kubernetes Tune K8S nodes (EC2 family type, size and AWS ASG -> K8s HPA + Cluster AutoScaler ) 2021 Q3 \u274c Performance & Optimization leverage performance-optimization kubernetes Tune K8S requests and limits per namespace (CPU and RAM) / https://github.com/FairwindsOps/goldilocks 2021 Q2 \u274c Performance & Optimization leverage performance-optimization s3 S3: ensure each bucket is using the proper storage types and persistence (automate mv these objs into lower $ storage tier w/ Life Cycle Policies or w/ S3 Intelligent-Tiering) \u2705 \u274c Disaster Recovery leverage disaster-recovery backup AWS Backup Service: RDS, EC2 (AMI), EBS, Dynamo, EFS, SFx, Storage Gw \u2705 \u274c Disaster Recovery leverage disaster-recovery backup Replication: S3 (CRR cross-region replication or SRR same-region replication) \u2705 \u274c Disaster Recovery leverage disaster-recovery backup Replication: VPC / Compute / Database (CRR cross-region replication) \u2705 \u274c Disaster Recovery leverage disaster-recovery backup kubernetes Backup and migrate Kubernetes applications and their persistent volumes w/ https://velero.io/ 2021 Q3 \u274c Disaster Recovery leverage documentation disaster-recovery Review: Disaster recovery plan, missing resources, RTO / RPO, level of automation 2021 Q4 \u274c Disaster Recovery leverage documentation disaster-recovery Improve Plan: create a plan to improve the existing recovery plan and determine implementation phases 2021 Q4 \u274c Disaster Recovery leverage documentation disaster-recovery Execute Plan: implement according to the plan, review/measure and iterate 2021 Q4 \u274c","title":"Reliability & Performance"},{"location":"work-with-us/roadmap/ref-arch/reliability-performance/#reliability-performance-roadmap","text":"","title":"Reliability Performance Roadmap"},{"location":"work-with-us/roadmap/ref-arch/reliability-performance/#features-functionalities","text":"Category Tags / Labels Feature / Functionality Status Doc Monitoring Metrics & Alerting leverage monitoring-metrics-alerting prometheus grafana Metrics: install and configure Prometheus (NodeExporter for EC2 / BlackBox exporter / Alert Monitroing), install and configure Grafana (K8s Plugin + Prometheus int + CloudWatch int) \u2705 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting grafana cloudwatch Metrics: Grafana + AWS Cloudwatch integrations config (https://github.com/monitoringartist/grafana-aws-cloudwatch-dashboards) 2021 Q2 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting apm APM: review, analyze and implement (New Relic, DataDog, ElasticAPM Agent/Server) 2021 Q2 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting documentation Define and document reference notification/escalation procedure \u2705 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting Alerting: configure AlertsManager, Elastalert (optimized logs rotation when using it from docker image), PagerDuty, Slack according to the procedure above 2021 Q2 \u274c Monitoring Metrics & Alerting leverage monitoring-metrics-alerting prometheus Monitor Infra Tool Instances (WebHook Proxy, Jenkins, Vault, Pritunl, Prometheus, Grafana, etc) / implement monitoring via Prometheus + Grafana or Another Solution \u2705 \u274c Monitoring Distributed Tracing leverage monitoring-tracing jaeger Distributed Tracing Instrumentation: review, analyze and implement to detect and improve transactions performance and svs dep analysis (jaeger, instana, lightstep, AWS X-Ray, etc) 2021 Q3 \u274c Monitoring Logging leverage monitoring-logs efk Logging / EFK - use separate indexes per K8s components & apps/svc for each custer/env (segregating dev/stg from prd) + enable ES monitoring w/ X-Pack + configure curator to rotate indices + tool to improve index mgmt 2021 Q2 \u274c Performance & Optimization leverage performance-optimization ci-cd-pipeline Load Testing: set up and run continuous load tests pipelines (Jenkins) to determine and improve apps/services capacity through time (apapche ab, gatling, iperf, locust, taurus, BlazeMeter and https://github.com/loadimpact/k6) 2021 Q3 \u274c Performance & Optimization leverage performance-optimization ci-cd-pipeline Performance Testing (stress, soak, spike, etc): set up and run continuous performance tests pipelines (Jenkins) to measure performance through time (apapche ab, gatling, iperf, locust, taurus and BlazeMeter) 2021 Q3 \u274c Performance & Optimization leverage performance-optimization kubernetes Tune K8S nodes (EC2 family type, size and AWS ASG -> K8s HPA + Cluster AutoScaler ) 2021 Q3 \u274c Performance & Optimization leverage performance-optimization kubernetes Tune K8S requests and limits per namespace (CPU and RAM) / https://github.com/FairwindsOps/goldilocks 2021 Q2 \u274c Performance & Optimization leverage performance-optimization s3 S3: ensure each bucket is using the proper storage types and persistence (automate mv these objs into lower $ storage tier w/ Life Cycle Policies or w/ S3 Intelligent-Tiering) \u2705 \u274c Disaster Recovery leverage disaster-recovery backup AWS Backup Service: RDS, EC2 (AMI), EBS, Dynamo, EFS, SFx, Storage Gw \u2705 \u274c Disaster Recovery leverage disaster-recovery backup Replication: S3 (CRR cross-region replication or SRR same-region replication) \u2705 \u274c Disaster Recovery leverage disaster-recovery backup Replication: VPC / Compute / Database (CRR cross-region replication) \u2705 \u274c Disaster Recovery leverage disaster-recovery backup kubernetes Backup and migrate Kubernetes applications and their persistent volumes w/ https://velero.io/ 2021 Q3 \u274c Disaster Recovery leverage documentation disaster-recovery Review: Disaster recovery plan, missing resources, RTO / RPO, level of automation 2021 Q4 \u274c Disaster Recovery leverage documentation disaster-recovery Improve Plan: create a plan to improve the existing recovery plan and determine implementation phases 2021 Q4 \u274c Disaster Recovery leverage documentation disaster-recovery Execute Plan: implement according to the plan, review/measure and iterate 2021 Q4 \u274c","title":"Features / Functionalities \ud83d\ude80\u23f2\ud83d\udcca"},{"location":"work-with-us/roadmap/ref-arch/security/","text":"Security Roadmap \u00b6 Features / Functionalities \ud83d\udd10\u2705 \u00b6 Category Tags / Labels Feature / Functionality Status Doc Security & Audit (SecOps) leverage security-audit passwords Team Password Management: review, analyze and implement (passbolt, bitwarden, 1password, etc) \u2705 \u274c Security & Audit (SecOps) leverage ci-cd-infrastructure secrets Secrets Management: review, analyze and implement Hashicorp vault 2021 Q1 \u274c Compliance (SecOps) leverage secrets aws-vault implementation 2021 Q1 \u274c Security & Audit (SecOps) leverage security-audit guardduty AWS Guarduty (Cross-Org with Master and member accounts setup + Trusted IP Lists and Threat IP Lists / Creation + Deletion of Filters for your GuardDuty findings to avoid false possitives + CloudWatch Rule to Lambda/ Cw-Metrics w/ CloudWatch Dashboard) \u2705 \u274c Security & Audit (SecOps) leverage security-audit inspector AWS Inspector (w/ Ansible aws-inpector galaxy role per EC2) 2021 Q3 \u274c Security & Audit (SecOps) leverage security-audit cloudtrail AWS CloudTrail w/ CloudWatch Dashboard + Alarms (include RootLogin) to Slack \u2705 \u274c Security & Audit (SecOps) leverage security-audit firewall AWS Firewall Manager (cross-org WAF + Shield integrated with ALBs, CloudFront and/or API-GW + Cross-org Sec group audit) \u2705 \u274c Security & Audit (SecOps) leverage security-audit vpc AWS VPC Flow Logs \u2705 \u274c Security & Audit (SecOps) leverage security-audit ScoutSuite / Prowler: set up continuous, automated reports for each account (Evaluate the use of CloudMapper) 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit users Infra DevOps Tools OS Layer ( OS security updates and patches, root user config, ssh port, fail2ban ) \u2705 \u274c Compliance (SecOps) leverage security-audit compliance AWS Config: implement audit controls (evaluate automatic remediation if applicable) \u2705 \u274c Compliance (SecOps) leverage security-audit compliance AWS Security Hub: implement audit controls 2021 Q3 \u274c Compliance (SecOps) leverage security-audit compliance AWS Trusted Advisor: Review automated Costs Optimization, Performance, Security, Fault Tolerance and Service Limits audit results. \u2705 \u274c Compliance (SecOps) leverage security-audit compliance kubernetes Kubernetes Audit: implement on the clusters: KubeAudit, Kube-Bench, Kube-Hunter and Starboard. 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit ci-cd-pipeline Security and Vulnerability static code analysis (code dependencies): implement tools to continuously analyze and report vulnerabilities, automated reports (OWASP, bandit, snyk, HawkEye scanner, yarn audit, etc) 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit docker Containers: implement tools to continuously analyze and report on vulnerabilities (docker-bench-security, snyk, aquasecurity microscanner, docker-bench, aws ecr scan) \u2705 \u274c Security & Audit (SecOps) leverage security-audit Review and Fix all snyk high sev findings 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit Security and cost analysis in the CI PR automated process (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q1 \u274c Security & Audit (SecOps) leverage security-audit Comply with AWS Security Maturity Roadmap 2021 2021 Q2 \u274c Compliance (SecOps) leverage security-audit compliance Certified compliant by the Center for Internet Security (CIS) end-to-end CIS-compliant Reference Architecture (get compliance out of the box) 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit dashboard Centralized DevSecOps Tools and Audit Report Dashboard 2021 Q3 \u274c","title":"Security"},{"location":"work-with-us/roadmap/ref-arch/security/#security-roadmap","text":"","title":"Security Roadmap"},{"location":"work-with-us/roadmap/ref-arch/security/#features-functionalities","text":"Category Tags / Labels Feature / Functionality Status Doc Security & Audit (SecOps) leverage security-audit passwords Team Password Management: review, analyze and implement (passbolt, bitwarden, 1password, etc) \u2705 \u274c Security & Audit (SecOps) leverage ci-cd-infrastructure secrets Secrets Management: review, analyze and implement Hashicorp vault 2021 Q1 \u274c Compliance (SecOps) leverage secrets aws-vault implementation 2021 Q1 \u274c Security & Audit (SecOps) leverage security-audit guardduty AWS Guarduty (Cross-Org with Master and member accounts setup + Trusted IP Lists and Threat IP Lists / Creation + Deletion of Filters for your GuardDuty findings to avoid false possitives + CloudWatch Rule to Lambda/ Cw-Metrics w/ CloudWatch Dashboard) \u2705 \u274c Security & Audit (SecOps) leverage security-audit inspector AWS Inspector (w/ Ansible aws-inpector galaxy role per EC2) 2021 Q3 \u274c Security & Audit (SecOps) leverage security-audit cloudtrail AWS CloudTrail w/ CloudWatch Dashboard + Alarms (include RootLogin) to Slack \u2705 \u274c Security & Audit (SecOps) leverage security-audit firewall AWS Firewall Manager (cross-org WAF + Shield integrated with ALBs, CloudFront and/or API-GW + Cross-org Sec group audit) \u2705 \u274c Security & Audit (SecOps) leverage security-audit vpc AWS VPC Flow Logs \u2705 \u274c Security & Audit (SecOps) leverage security-audit ScoutSuite / Prowler: set up continuous, automated reports for each account (Evaluate the use of CloudMapper) 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit users Infra DevOps Tools OS Layer ( OS security updates and patches, root user config, ssh port, fail2ban ) \u2705 \u274c Compliance (SecOps) leverage security-audit compliance AWS Config: implement audit controls (evaluate automatic remediation if applicable) \u2705 \u274c Compliance (SecOps) leverage security-audit compliance AWS Security Hub: implement audit controls 2021 Q3 \u274c Compliance (SecOps) leverage security-audit compliance AWS Trusted Advisor: Review automated Costs Optimization, Performance, Security, Fault Tolerance and Service Limits audit results. \u2705 \u274c Compliance (SecOps) leverage security-audit compliance kubernetes Kubernetes Audit: implement on the clusters: KubeAudit, Kube-Bench, Kube-Hunter and Starboard. 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit ci-cd-pipeline Security and Vulnerability static code analysis (code dependencies): implement tools to continuously analyze and report vulnerabilities, automated reports (OWASP, bandit, snyk, HawkEye scanner, yarn audit, etc) 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit docker Containers: implement tools to continuously analyze and report on vulnerabilities (docker-bench-security, snyk, aquasecurity microscanner, docker-bench, aws ecr scan) \u2705 \u274c Security & Audit (SecOps) leverage security-audit Review and Fix all snyk high sev findings 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit Security and cost analysis in the CI PR automated process (le-tf-aws / le-ansible / le-tf-vault / le-tf-github) 2021 Q1 \u274c Security & Audit (SecOps) leverage security-audit Comply with AWS Security Maturity Roadmap 2021 2021 Q2 \u274c Compliance (SecOps) leverage security-audit compliance Certified compliant by the Center for Internet Security (CIS) end-to-end CIS-compliant Reference Architecture (get compliance out of the box) 2021 Q2 \u274c Security & Audit (SecOps) leverage security-audit dashboard Centralized DevSecOps Tools and Audit Report Dashboard 2021 Q3 \u274c","title":"Features / Functionalities \ud83d\udd10\u2705"},{"location":"work-with-us/updates/product-updates-12-2021/","text":"Leverage Product Updates | August 2021 \u00b6 Dear Leveragers, We kicked this month with a lot of improvements and some exciting new features Reference Architecture \u00b6 Updates \ud83d\udce2 TODO New Features \ud83c\udf89\ud83d\ude4c TODO Improvements \ud83d\ude80 TODO Bug Fixes \ud83d\udc1b TODO Leverage CLI \u00b6 Updates \ud83d\udce2 TODO New Features \ud83c\udf89\ud83d\ude4c TODO Improvements \ud83d\ude80 TODO Bug Fixes \ud83d\udc1b TODO Infrastructure as Code Library \u00b6 Updates \ud83d\udce2 TODO New Features \ud83c\udf89\ud83d\ude4c TODO Improvements \ud83d\ude80 TODO Bug Fixes \ud83d\udc1b TODO","title":"December 2021"},{"location":"work-with-us/updates/product-updates-12-2021/#leverage-product-updates-august-2021","text":"Dear Leveragers, We kicked this month with a lot of improvements and some exciting new features","title":"Leverage Product Updates | August 2021"},{"location":"work-with-us/updates/product-updates-12-2021/#reference-architecture","text":"Updates \ud83d\udce2 TODO New Features \ud83c\udf89\ud83d\ude4c TODO Improvements \ud83d\ude80 TODO Bug Fixes \ud83d\udc1b TODO","title":"Reference Architecture"},{"location":"work-with-us/updates/product-updates-12-2021/#leverage-cli","text":"Updates \ud83d\udce2 TODO New Features \ud83c\udf89\ud83d\ude4c TODO Improvements \ud83d\ude80 TODO Bug Fixes \ud83d\udc1b TODO","title":"Leverage CLI"},{"location":"work-with-us/updates/product-updates-12-2021/#infrastructure-as-code-library","text":"Updates \ud83d\udce2 TODO New Features \ud83c\udf89\ud83d\ude4c TODO Improvements \ud83d\ude80 TODO Bug Fixes \ud83d\udc1b TODO","title":"Infrastructure as Code Library"}]}